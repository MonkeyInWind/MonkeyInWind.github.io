<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>flutter--Stack &amp; Positioned &amp; Align 层叠布局与定位</title>
    <url>/post/flutterStackPositioned/</url>
    <content><![CDATA[<p><code>Stack</code>在<a href="/post/flutterDemoMockLogin">flutter–模拟登录</a>中出现过，这里来详细了解一下这个<code>Widget</code>，类似于<code>css</code>中的<code>position: relative</code>，但是会强制子<code>Widget</code>层叠显示，<code>Positioned</code>类似于<code>css</code>中的<code>position: absolute</code>，可以设置坐标。</p>
<a id="more"></a>
<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Stack(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    AlignmentGeometry alignment: AlignmentDirectional.topStart,</span><br><span class="line">    TextDirection textDirection,</span><br><span class="line">    StackFit fit: StackFit.loose,</span><br><span class="line">    Overflow overflow: Overflow.clip,</span><br><span class="line">    List&lt;Widget&gt; children: const[]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>先看一个只有<code>children</code>的demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Stack(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Text(&apos;1&apos;),</span><br><span class="line">            Text(&apos;2&apos;),</span><br><span class="line">            Text(&apos;3&apos;)</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt><br>1、2、3叠在了一起，哪一个在上哪一个在下，把<code>Text</code>换成<code>Container</code>再看一下，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Stack(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Container(</span><br><span class="line">              width: 100,</span><br><span class="line">              height: 100,</span><br><span class="line">              color: Colors.red</span><br><span class="line">            ),</span><br><span class="line">            Container(</span><br><span class="line">              width: 50,</span><br><span class="line">              height: 50,</span><br><span class="line">              color: Colors.green</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="2.png" alt><br>可以看见和<code>css</code>里一样，后写的在上。  </p>
<h3 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h3><p>子<code>Widget</code>的对齐方式<br><code>AlignmentDirectional.topStart</code> (默认值)、<code>AlignmentDirectional.topCenter</code>、<code>AlignmentDirectional.topEnd</code>、<code>AlignmentDirectional.centerStart</code>、<code>AlignmentDirectional.center</code>、<code>AlignmentDirectional.centerEnd</code>、<code>AlignmentDirectional.bottomStart</code>、<code>AlignmentDirectional.bottomCenter</code>、<code>AlignmentDirectional.bottomEnd</code>。<br>简单易懂，看个demo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Stack(</span><br><span class="line">          alignment: AlignmentDirectional.bottomCenter,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Container(</span><br><span class="line">              width: 100,</span><br><span class="line">              height: 100,</span><br><span class="line">              color: Colors.red</span><br><span class="line">            ),</span><br><span class="line">            Container(</span><br><span class="line">              width: 50,</span><br><span class="line">              height: 50,</span><br><span class="line">              color: Colors.green</span><br><span class="line">            ),</span><br><span class="line">            Container(</span><br><span class="line">              width: 30,</span><br><span class="line">              height: 30,</span><br><span class="line">              color: Colors.blue</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="3.png" alt></p>
<h3 id="textDirection"><a href="#textDirection" class="headerlink" title="textDirection"></a>textDirection</h3><p>子<code>Widget</code>的排列方式，默认值是<code>TextDirection.ltr</code>，从左往右，当设置为<code>TextDirection.rtl</code>时效果如下：</p>
<p><img src="4.png" alt></p>
<h3 id="fit"><a href="#fit" class="headerlink" title="fit"></a>fit</h3><p>子<code>Widget</code>中未定位元素的大小，只有两个值：<br><code>StackFit.loose</code>：不对其大小进行约束(默认值)<br><code>StackFit.expand</code>：最大<br><code>StackFit.passthrough</code>：父级的约束直接传递给子<code>Widgert</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Container(</span><br><span class="line">          width: 200,</span><br><span class="line">          height: 200,</span><br><span class="line">          child: Stack(</span><br><span class="line">            fit: StackFit.passthrough,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                width: 50,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.red</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="5.png" alt><br>这里需要注意的是<code>fit</code>值如果不是默认值<code>StackFit.loose</code>，子<code>Widget</code>设置的尺寸将失去作用。</p>
<h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><p>和<code>css</code>里效果一样，只有两个值<br><code>Overflow.clip</code>：溢出将被剪切<br><code>Overflow.visible</code>：不对溢出的部分做处理</p>
<h2 id="Positioned"><a href="#Positioned" class="headerlink" title="Positioned"></a>Positioned</h2><p>定位元素，用于<code>Stack</code>的子<code>Widget</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Positioned(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    double left,</span><br><span class="line">    double top,</span><br><span class="line">    double right,</span><br><span class="line">    double bottom,</span><br><span class="line">    double width,</span><br><span class="line">    double height,</span><br><span class="line">    @required Widget child</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>都是基础属性，<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>是相对于父级的坐标。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Stack(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Positioned(</span><br><span class="line">              width: 100,</span><br><span class="line">              height: 100,</span><br><span class="line">              left: 100,</span><br><span class="line">              bottom: 100,</span><br><span class="line">              child: Container(</span><br><span class="line">                color: Colors.red</span><br><span class="line">              )</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="6.png" alt><br>相对于左下角的距离是100、100.</p>
<h2 id="Align"><a href="#Align" class="headerlink" title="Align"></a>Align</h2><p>这个更简单一点，只是设定子<code>Widget</code>相对于<code>Align</code>的位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Align(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    AlignmentGeometry alignment: Alignment.center,</span><br><span class="line">    double widthFactor,</span><br><span class="line">    double heightFactor,</span><br><span class="line">    Widget child</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="alignment-1"><a href="#alignment-1" class="headerlink" title="alignment"></a>alignment</h3><p>子<code>Widget</code>相对于<code>Align</code>的位置。</p>
<h3 id="widthFactor-amp-heightFactor"><a href="#widthFactor-amp-heightFactor" class="headerlink" title="widthFactor &amp; heightFactor"></a>widthFactor &amp; heightFactor</h3><p>这两个相当于是系数，乘以子<code>Widget</code>的宽高，就是<code>Align</code>的尺寸。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Align(</span><br><span class="line">          widthFactor: 2,</span><br><span class="line">          heightFactor: 2,</span><br><span class="line">          alignment: Alignment.bottomRight,</span><br><span class="line">          child: Container(</span><br><span class="line">            width: 50,</span><br><span class="line">            height: 50,</span><br><span class="line">            color: Colors.blue</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="7.png" alt><br>这里需要注意一点，就是如果<code>Align</code>的父级设有宽高<code>widthFactor</code>和<code>heightFactor</code>将市区作用，大小为最大。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Container(</span><br><span class="line">          width: 300,</span><br><span class="line">          height: 300,</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          child: Align(</span><br><span class="line">            widthFactor: 2,</span><br><span class="line">            heightFactor: 2,</span><br><span class="line">            alignment: Alignment.bottomRight,</span><br><span class="line">            child: Container(</span><br><span class="line">              width: 50,</span><br><span class="line">              height: 50,</span><br><span class="line">              color: Colors.blue</span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="8.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>flutter--Wrap &amp; Flow流式布局</title>
    <url>/post/flutterRowFlow/</url>
    <content><![CDATA[<p>在<a href="/post/flutterRowColumnFlex">flutter–Row &amp; Column线性布局、Flex &amp; Expanded弹性布局</a>介绍了线性布局和弹性布局，这两种布局有时候并不能满足我们的需求，比如子<code>Widgert</code>的尺寸超出父<code>Widget</code>的时候会报错，可能我们需要的是自动排在下一行，这一篇来就看一下流式布局。</p>
<a id="more"></a>
<h2 id="Wrap"><a href="#Wrap" class="headerlink" title="Wrap"></a>Wrap</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Wrap(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    Axis direction: Axis.horizontal,</span><br><span class="line">    WrapAlignment alignment: WrapAlignment.start,</span><br><span class="line">    double spacing: 0.0,</span><br><span class="line">    WrapAlignment runAlignment: WrapAlignment.start,</span><br><span class="line">    double runSpacing: 0.0,</span><br><span class="line">    WrapCrossAlignment crossAxisAlignment: WrapCrossAlignment.start,</span><br><span class="line">    TextDirection textDirection,</span><br><span class="line">    VerticalDirection verticalDirection: VerticalDirection.down,</span><br><span class="line">    List&lt;Widget&gt; children: const[]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="direction"><a href="#direction" class="headerlink" title="direction"></a>direction</h3><p>排列方向<br><code>Axis.horizontal</code>：横向排列（默认值）<br><code>Axis.vertical</code>：纵向排列</p>
<h3 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h3><p>这个和<code>Row</code>的<code>mainAxisAlignment</code>效果是一样的，这里就不重复了，看<a href="/post/flutterRowColumnFlex">flutter–Row &amp; Column线性布局、Flex &amp; Expanded弹性布局</a><br>有一点需要注意的就是<code>Wrap</code>的尺寸，横向只会被子<code>Widget</code>撑开，纵向如果父组件有高度则是父组件的高度，这里看一下demo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Container(</span><br><span class="line">          child: Wrap(</span><br><span class="line">            alignment: WrapAlignment.spaceAround,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.blue</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                  width: 80,</span><br><span class="line">                  height: 50,</span><br><span class="line">                  color: Colors.blue</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 50,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                  width: 70,</span><br><span class="line">                  height: 50,</span><br><span class="line">                  color: Colors.blue</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt></p>
<h3 id="spacing"><a href="#spacing" class="headerlink" title="spacing"></a>spacing</h3><p>子<code>Widget</code>之间的间距</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Container(</span><br><span class="line">          child: Wrap(</span><br><span class="line">            spacing: 10,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.blue</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="2.png" alt></p>
<h3 id="runAlignment"><a href="#runAlignment" class="headerlink" title="runAlignment"></a>runAlignment</h3><p>一行子<code>Widget</code>纵向的对齐方式，属性值与<code>alignment</code>相同。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Container(</span><br><span class="line">          height: 300,</span><br><span class="line">          child: Wrap(</span><br><span class="line">            runAlignment: WrapAlignment.spaceBetween,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.blue</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.green,</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                  width: 80,</span><br><span class="line">                  height: 50,</span><br><span class="line">                  color: Colors.yellow</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 50,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.pinkAccent,</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 70,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.deepPurple</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="3.png" alt></p>
<h3 id="runSpacing"><a href="#runSpacing" class="headerlink" title="runSpacing"></a>runSpacing</h3><p>每一行子<code>Widget</code>纵向上的间距</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Container(</span><br><span class="line">          child: Wrap(</span><br><span class="line">            runSpacing: 10,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.blue</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.green,</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                  width: 80,</span><br><span class="line">                  height: 50,</span><br><span class="line">                  color: Colors.yellow</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 50,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.pinkAccent,</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 70,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.deepPurple</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="4.png" alt></p>
<h3 id="crossAxisAlignment"><a href="#crossAxisAlignment" class="headerlink" title="crossAxisAlignment"></a>crossAxisAlignment</h3><p>子<code>Widget</code>在纵向上的对齐方式，看着好像和<code>runAlignment</code>一样，看demo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Container(</span><br><span class="line">          height: 300,</span><br><span class="line">          child: Wrap(</span><br><span class="line">            crossAxisAlignment: WrapCrossAlignment.center,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 100,</span><br><span class="line">                color: Colors.red,</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.blue</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 100,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.green,</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                  width: 80,</span><br><span class="line">                  height: 50,</span><br><span class="line">                  color: Colors.yellow</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 50,</span><br><span class="line">                height: 100,</span><br><span class="line">                color: Colors.pinkAccent,</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 70,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.deepPurple</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="5.png" alt><br>这个属性是对每一行内的<code>Widget</code>进行对齐操作，而<code>runAlignment</code>是以行为单位进行对齐操作。</p>
<h3 id="textDirection"><a href="#textDirection" class="headerlink" title="textDirection"></a>textDirection</h3><p>子<code>Widget</code>横向排列方式，从左往右还是从右往左，不了解的话看这里<a href="/post/flutterRowColumnFlex">flutter–Row &amp; Column线性布局、Flex &amp; Expanded弹性布局</a>。</p>
<h3 id="verticalDirection"><a href="#verticalDirection" class="headerlink" title="verticalDirection"></a>verticalDirection</h3><p>子<code>Widget</code>纵向排列方式</p>
<h2 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flow(&#123;</span><br><span class="line">    Key: key,</span><br><span class="line">    @required FlowDelegate delegate,</span><br><span class="line">    List&lt;Widget&gt; children: const[]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>Flow</code>的属性只有两个，都是必须的，貌似很简单，其实很复杂，<code>children</code>没啥说的，主要是<code>delegate</code>，属性值是一个函数，利用矩阵变换设置坐标来控制每一个<code>Widget</code>的位置。<br>大多数情况下<code>Wrap</code>已经满足需求，关于<code>Flow</code>就不深入来，有兴趣的话可以看<a href="https://api.flutter.dev/flutter/widgets/Flow-class.html" target="_blank" rel="noopener">官方的文档</a>。</p>
]]></content>
  </entry>
  <entry>
    <title>flutter--Row &amp; Column线性布局、Flex &amp; Expanded弹性布局</title>
    <url>/post/flutterRowColumnFlex/</url>
    <content><![CDATA[<h2 id="Row-amp-Column"><a href="#Row-amp-Column" class="headerlink" title="Row &amp; Column"></a>Row &amp; Column</h2><p>这两个属性都一样，用法也一样，一个横向一个竖向，放一起，这里以<code>Row</code>为例。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Row(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    MainAxisAlignment mainAxisAlignment: MainAxisAlignment.start,  //对齐方式</span><br><span class="line">    MainAxisSize mainAxisSize: MainAxisSize.max,    //主轴方向占用的空间</span><br><span class="line">    CrossAxisAlignment crossAxisAlignment: CrossAxisAlignment.center,   //交叉轴上的对齐方式</span><br><span class="line">    TextDirection textDirection,    //主轴方向上的排列顺序</span><br><span class="line">    VerticalDirection verticalDirection: VerticalDirection.down,    交叉轴上排列的开始和结束</span><br><span class="line">    TextBaseline textBaseline,  //文本基线</span><br><span class="line">    List&lt;&gt;Widget children: const []     //子组件</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="mainAxisAlignment"><a href="#mainAxisAlignment" class="headerlink" title="mainAxisAlignment"></a>mainAxisAlignment</h3><p>子组件在主轴上的对齐方式。<br><code>MainAxisAlignment.start</code>：正序<br><code>MainAxisAlignment.end</code>：反序<br><code>MainAxisAlignment.center</code>：居中<br><code>MainAxisAlignment.spaceAround</code>：分散对齐，第一个组件和最后一个组件和父组件之间存在间距，为子组件之间间距的一半<br><code>MainAxisAlignment.spaceBetween</code>：分散对齐，第一个和最后一个子组件和父组件之间没有间距<br><code>MainAxisAlignment.spaceEvenly</code>：分散对齐，子组件以及父组件之间的间距相等</p>
<h3 id="mainAxisSize"><a href="#mainAxisSize" class="headerlink" title="mainAxisSize"></a>mainAxisSize</h3><p><code>Row</code>在主轴方向上所占用的空间，<code>MainAxisSize.max</code>在父组件内占用最大空间，<code>MainAxisSize.min</code>最小，占用空间为子组件撑开的大小。<br>前边两个属性看demo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Container(</span><br><span class="line">          child: Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">            mainAxisSize: MainAxisSize.max,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container(</span><br><span class="line">                width: 50,</span><br><span class="line">                height: 100,</span><br><span class="line">                color: Colors.green</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                width: 80,</span><br><span class="line">                height: 50,</span><br><span class="line">                color: Colors.red</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                  width: 50,</span><br><span class="line">                  height: 50,</span><br><span class="line">                  color: Colors.pinkAccent</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                  width: 50,</span><br><span class="line">                  height: 50,</span><br><span class="line">                  color: Colors.blue</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt></p>
<h3 id="crossAxisAlignment"><a href="#crossAxisAlignment" class="headerlink" title="crossAxisAlignment"></a>crossAxisAlignment</h3><p>自组件在交叉轴上的对齐方式。<br><code>CrossAxisAlignment.center</code>：居中（默认）<br><code>CrossAxisAlignment.start</code>：正序<br><code>CrossAxisAlignment.end</code>：倒序<br><code>CrossAxisAlignment.center</code>：子组件拉伸为父组件的高度<br><code>CrossAxisAlignment.baseline</code>：基线对齐，要配合<code>textBaseline</code>同时使用  </p>
<h3 id="textDirection"><a href="#textDirection" class="headerlink" title="textDirection"></a>textDirection</h3><p><code>TextDirection.ltr</code>：从左到右（默认值）<br><code>TextDirection.ltr</code>：从右到左</p>
<h3 id="verticalDirection"><a href="#verticalDirection" class="headerlink" title="verticalDirection"></a>verticalDirection</h3><p>交叉轴上排列的开始和结束，配合<code>crossAxisAlignment</code>使用。<br><code>VerticalDirection.up</code>：竖直方向从下往上排列<br><code>VerticalDirection.down</code>：竖直方向从上往下排列  </p>
<h3 id="textBaseline"><a href="#textBaseline" class="headerlink" title="textBaseline"></a>textBaseline</h3><p>文本基线，没看出来效果。</p>
<h3 id="children"><a href="#children" class="headerlink" title="children"></a>children</h3><p>子组件。</p>
<h2 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h2><p><code>Row</code>和<code>Column</code>都是继承自<code>Flex</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flex(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    @required Axis direction,</span><br><span class="line">    MainAxisAlignment mainAxisAlignment: MainAxisAlignment.start,  //对齐方式</span><br><span class="line">    MainAxisSize mainAxisSize: MainAxisSize.max,    //主轴方向占用的空间</span><br><span class="line">    CrossAxisAlignment crossAxisAlignment: CrossAxisAlignment.center,   //交叉轴上的对齐方式</span><br><span class="line">    TextDirection textDirection,    //主轴方向上的排列顺序</span><br><span class="line">    VerticalDirection verticalDirection: VerticalDirection.down,    交叉轴上排列的开始和结束</span><br><span class="line">    TextBaseline textBaseline,  //文本基线</span><br><span class="line">    List&lt;&gt;Widget children: const []     //子组件</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>Flex</code>只多了一个<code>direction</code>属性。</p>
<h3 id="direction"><a href="#direction" class="headerlink" title="direction"></a>direction</h3><p>排列方式，两个值<br><code>Axis.horizontal</code>：水平排列<br><code>Axis.vertical</code>：竖直排列</p>
<h2 id="Expanded"><a href="#Expanded" class="headerlink" title="Expanded"></a>Expanded</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Expanded(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    int flex: 1,</span><br><span class="line">    @required Widget child</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这个很简单，只有一个<code>flex</code>和<code>child</code>。<br><code>Flex</code>和<code>Expanded</code>与<code>css</code>里的<code>display: flex</code>、<code>flex: 1</code>效果是一样的，看一下demo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Container(</span><br><span class="line">          child: Flex(</span><br><span class="line">            direction: Axis.horizontal,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Expanded(</span><br><span class="line">                flex: 1,</span><br><span class="line">                child: Container(</span><br><span class="line">                  height: 50,</span><br><span class="line">                  color: Colors.red</span><br><span class="line">                )</span><br><span class="line">              ),</span><br><span class="line">              Expanded(</span><br><span class="line">                flex: 2,</span><br><span class="line">                child: Container(</span><br><span class="line">                  height: 50,</span><br><span class="line">                  color: Colors.blue</span><br><span class="line">                )</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="2.png" alt><br><code>flex</code>属性表示所占的比例。</p>
]]></content>
  </entry>
  <entry>
    <title>flutter--Scaffold以及功能组件介绍</title>
    <url>/post/flutterScaffold/</url>
    <content><![CDATA[<p><code>Scaffold</code>这个组件在之前的笔记都出现过，但是没有详细的说明，这一篇笔记就来介绍一下。<br>先看<code>constructor</code>。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Scaffold(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    PreferredSizeWidget appBar,  // 页面顶部标题栏</span><br><span class="line">    Widget body,        // 页面的主体</span><br><span class="line">    Widget floatingActionBotton,  // 悬浮按钮</span><br><span class="line">    FloatingActionButtonLocation floatingActionButtonLocation,  //悬浮按钮的位置</span><br><span class="line">    FloatingActionButtonAnimator floatingActionButtonAnimator,  //悬浮按钮的动画</span><br><span class="line">    List&lt;Widget&gt; persistentFooterButtons,   //底部按钮</span><br><span class="line">    Widget drawer,      //左侧抽屉</span><br><span class="line">    Widget endDrawer,   //右侧抽屉</span><br><span class="line">    Widget bottomNavigationBar,     //底部导航</span><br><span class="line">    Widget bottomSheet,     //底部滑出</span><br><span class="line">    Color backgroundColor,      //背景色</span><br><span class="line">    bool resizeToAvoidBottomPadding,    //已弃用，键盘弹出时是否重新绘制，以避免输入框被遮挡</span><br><span class="line">    bool resizeToAvoidBottomInset,      //键盘弹出时是否重新绘制，以避免输入框被遮挡</span><br><span class="line">    bool primary: true,     //是否计算手机顶部状态栏的高度</span><br><span class="line">    DragStartBehavior drawerDragStartBehavior: DragStartBehavior.start,  //拖动的处理</span><br><span class="line">    bool extendBody: false,     //是否延伸body至底部。</span><br><span class="line">    bool extendBodyBehindAppBar: false,     //是否延伸body至顶部。</span><br><span class="line">    Color drawerScrimColor,     //抽屉遮罩层背景色</span><br><span class="line">    double drawerEdgeDragWidth  //滑动拉出抽屉的生效距离</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="appBar"><a href="#appBar" class="headerlink" title="appBar"></a>appBar</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AppBar(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    Widget leading,</span><br><span class="line">    bool automaticallyImplyLeading: true,</span><br><span class="line">    Widget title,</span><br><span class="line">    List&lt;Widget&gt;actions,</span><br><span class="line">    Widget flexibleSpace,</span><br><span class="line">    PreferredSizeWidget bottom,</span><br><span class="line">    double elevation,</span><br><span class="line">    ShapeBorder shape,</span><br><span class="line">    Color backgroundColor,</span><br><span class="line">    Brightness brightness,</span><br><span class="line">    IconThemeData iconTheme,</span><br><span class="line">    IconThemeData actionsIconTheme,</span><br><span class="line">    TextTheme textTheme,</span><br><span class="line">    bool primary: true,</span><br><span class="line">    bool centerTitle,</span><br><span class="line">    double titleSpacing: NavigationToolbar.kMiddleSpacing,</span><br><span class="line">    double toolbarOpacity: 1.0,</span><br><span class="line">    double bottomOpacity: 1.0</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>先看一张官方文档<code>AppBar</code>的图</p>
<p><img src="1.png" alt><br>可以看见，之前只用到<code>AppBar</code>的<code>title</code>，其实这个<code>Widget</code>是很强大的，接下来详细看一下。</p>
<h3 id="leading"><a href="#leading" class="headerlink" title="leading"></a>leading</h3><p>这个之前用过，但是是默认的，就是路由跳转之后，在<code>AppBar</code>左上角有一个返回按钮，就是它。<br>看demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          leading: MaterialButton(</span><br><span class="line">            child: Text(&apos;L&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              print(&apos;pressed leading&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>左上角的按钮，在这里用了一个<code>MaterialButton</code>，点击的时候会打印出<code>pressed leading</code>。<br>效果如图<br><img src="2.png" alt><br>就是左上角的那个<code>L</code>。  </p>
<h3 id="automaticallyImplyLeading"><a href="#automaticallyImplyLeading" class="headerlink" title="automaticallyImplyLeading"></a>automaticallyImplyLeading</h3><p>这个就牛逼了，如果<code>leading</code>为空,<code>automaticallyImplyLeading</code>值为<code>true</code>的话，就自动推断出<code>leading</code>是什么并创建，比如之前说的返回按钮，再比如加了个<code>Drawer</code>，<code>leading</code>会是一个操作<code>Drawer</code>的按钮，这个就不在这写demo了，看后边。</p>
<h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>这个就不细说了，之前的笔记里用过很多次了。</p>
<h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p><code>leading</code>在左侧，这个<code>action</code>在右侧，与<code>leading</code>不同的是，<code>action</code>是一个<code>List</code>类型，可以有多个子<code>Widget</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          actions: &lt;Widget&gt;[</span><br><span class="line">            MaterialButton(</span><br><span class="line">              child: Text(&apos;BTN1&apos;)</span><br><span class="line">            ),</span><br><span class="line">            MaterialButton(</span><br><span class="line">              child: Text(&apos;BTN2&apos;)</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="3.png" alt></p>
<h3 id="flexibleSpace"><a href="#flexibleSpace" class="headerlink" title="flexibleSpace"></a>flexibleSpace</h3><p>一个高度可以自适应的<code>Widget</code>，被标题和工具栏覆盖，看一下demo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(</span><br><span class="line">            &apos;title&apos;,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">              color: Colors.red</span><br><span class="line">            )</span><br><span class="line">          ),</span><br><span class="line">          flexibleSpace: FlexibleSpaceBar(</span><br><span class="line">            title:  Text(&apos;flexibleSpace title&apos;)</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="4.png" alt><br>可以看见两个标题重叠了，并且<code>title</code>覆盖在了<code>flexibleSpace title</code>之上。<br><code>flexibleSpace</code>一般用在<code>SliverAppBar</code>里，<code>SliverAppBar</code>是一个可以随着内容一起滚动的头部，大多数都是在滚动页面改变头部高度时用。</p>
<h3 id="bottom"><a href="#bottom" class="headerlink" title="bottom"></a>bottom</h3><p>布局上和<code>title</code>一行的<code>toolbar</code>同级，但是是底对齐，和<code>toolbar</code>同时出现时会把<code>toolbar</code>顶上去。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          leading: MaterialButton(</span><br><span class="line">            child: Text(&apos;H&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          title: Text(</span><br><span class="line">            &apos;title&apos;,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">              color: Colors.red</span><br><span class="line">            )</span><br><span class="line">          ),</span><br><span class="line">          bottom: PreferredSize(</span><br><span class="line">            child: Text(&apos;bottom&apos;)</span><br><span class="line">          )</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="5.png" alt><br>可以看到<code>title</code>和<code>leading</code>所在的<code>toolbar</code>被顶上去了。</p>
<h3 id="elevation"><a href="#elevation" class="headerlink" title="elevation"></a>elevation</h3><p><code>appBar</code>下方的阴影，默认值是4。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(</span><br><span class="line">            &apos;title&apos;</span><br><span class="line">          ),</span><br><span class="line">          elevation: 10</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="6.png" alt></p>
<h3 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h3><p>设置<code>appBar</code>的形状，常规来说应用场景不会太多。。。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(</span><br><span class="line">            &apos;title&apos;</span><br><span class="line">          ),</span><br><span class="line">          shape: StadiumBorder(),</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="7.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(</span><br><span class="line">            &apos;title&apos;</span><br><span class="line">          ),</span><br><span class="line">          shape: CircleBorder(),</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="8.png" alt></p>
<h3 id="backgroundColor"><a href="#backgroundColor" class="headerlink" title="backgroundColor"></a>backgroundColor</h3><p>背景色，没啥说的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(</span><br><span class="line">            &apos;title&apos;</span><br><span class="line">          ),</span><br><span class="line">          backgroundColor: Colors.red,</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="9.png" alt></p>
<h3 id="brightness"><a href="#brightness" class="headerlink" title="brightness"></a>brightness</h3><p>主题色调，两个值<code>Brightness.dark</code>和<code>Brightness.light</code>，没看出什么效果，关于<code>brightness</code>，这里有介绍<a href="/post/flutterButtonWidget/">按钮 各种Button</a></p>
<h3 id="iconTheme"><a href="#iconTheme" class="headerlink" title="iconTheme"></a>iconTheme</h3><p><a href="/post/flutterIconWidget/">图标Icon</a>这里有介绍，不重复了。</p>
<h3 id="actionsIconTheme"><a href="#actionsIconTheme" class="headerlink" title="actionsIconTheme"></a>actionsIconTheme</h3><p>同上。</p>
<h3 id="textTheme"><a href="#textTheme" class="headerlink" title="textTheme"></a>textTheme</h3><p>与<code>iconTheme</code>类似。</p>
<h3 id="primary"><a href="#primary" class="headerlink" title="primary"></a>primary</h3><p><code>appBar</code>是否计算手机顶部状态栏的高度，默认为<code>true</code>，为<code>false</code>时如图</p>
<p><img src="10.png" alt></p>
<h3 id="centerTitle"><a href="#centerTitle" class="headerlink" title="centerTitle"></a>centerTitle</h3><p><code>title</code>是否居中，默认为<code>true</code>，为<code>false</code>是居左。</p>
<h3 id="titleSpacing"><a href="#titleSpacing" class="headerlink" title="titleSpacing"></a>titleSpacing</h3><p><code>title</code>和其他元素的距离。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          leading: MaterialButton(</span><br><span class="line">            child: Text(&apos;L&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          title: Text(</span><br><span class="line">            &apos;title&apos;,</span><br><span class="line">          ),</span><br><span class="line">          actions: &lt;Widget&gt;[</span><br><span class="line">            MaterialButton(</span><br><span class="line">              child: Text(&apos;A&apos;),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line"></span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">            MaterialButton(</span><br><span class="line">              child: Text(&apos;B&apos;),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line"></span><br><span class="line">              &#125;,</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">          bottom: PreferredSize(</span><br><span class="line">            child: Text(&apos;bottom&apos;)</span><br><span class="line">          ),</span><br><span class="line">          titleSpacing: 70,</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="11.png" alt><br>设置过大自己内容显示不全，出现了…</p>
<h3 id="toolbarOpacity"><a href="#toolbarOpacity" class="headerlink" title="toolbarOpacity"></a>toolbarOpacity</h3><p><code>toolbar</code>透明度，默认是<code>1.0</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          leading: MaterialButton(</span><br><span class="line">            child: Text(&apos;L&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          title: Text(</span><br><span class="line">            &apos;title&apos;,</span><br><span class="line">          ),</span><br><span class="line">          actions: &lt;Widget&gt;[</span><br><span class="line">            MaterialButton(</span><br><span class="line">              child: Text(&apos;A&apos;),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line"></span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">            MaterialButton(</span><br><span class="line">              child: Text(&apos;B&apos;),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line"></span><br><span class="line">              &#125;,</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">          bottom: PreferredSize(</span><br><span class="line">            child: Text(&apos;bottom&apos;)</span><br><span class="line">          ),</span><br><span class="line">          toolbarOpacity: 0.5</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="12.png" alt><br>貌似只对<code>title</code>生效。</p>
<h3 id="bottomOpacity"><a href="#bottomOpacity" class="headerlink" title="bottomOpacity"></a>bottomOpacity</h3><p><code>bottom</code>的透明度。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          leading: MaterialButton(</span><br><span class="line">            child: Text(&apos;L&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          title: Text(</span><br><span class="line">            &apos;title&apos;,</span><br><span class="line">          ),</span><br><span class="line">          actions: &lt;Widget&gt;[</span><br><span class="line">            MaterialButton(</span><br><span class="line">              child: Text(&apos;A&apos;),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line"></span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">            MaterialButton(</span><br><span class="line">              child: Text(&apos;B&apos;),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line"></span><br><span class="line">              &#125;,</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">          bottom: PreferredSize(</span><br><span class="line">            child: Text(&apos;bottom&apos;)</span><br><span class="line">          ),</span><br><span class="line">          bottomOpacity: 0.5</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="13.png" alt></p>
<h2 id="body"><a href="#body" class="headerlink" title="body"></a>body</h2><p>值是一个<code>Widget</code>，在顶部工具栏和底部菜单栏之间，可以是<code>Container</code>，可以是<code>Text</code>，也可以是<code>Center</code>或者其他。。。</p>
<h2 id="floatingActionBotton"><a href="#floatingActionBotton" class="headerlink" title="floatingActionBotton"></a>floatingActionBotton</h2><p>对于这个<code>Widget</code>在<a href="/post/flutterButtonWidget/">按钮 各种Button</a>中有介绍，这里就不详细说了。</p>
<h2 id="floatingActionButtonLocation"><a href="#floatingActionButtonLocation" class="headerlink" title="floatingActionButtonLocation"></a>floatingActionButtonLocation</h2><p>悬浮按钮的位置<br><code>FloatingActionButtonLocation.endTop</code>：右上角<br><code>FloatingActionButtonLocation.centerFloat</code>：下居中，不贴边<br><code>FloatingActionButtonLocation.centerDocked</code>：下居中贴边<br><code>FloatingActionButtonLocation.endDocked</code>：右下角贴底边<br><code>FloatingActionButtonLocation.endFloat</code>：默认值，右下角不贴边<br><code>FloatingActionButtonLocation.startTop</code>：左上角<br><code>FloatingActionButtonLocation.miniStartTop</code>：左上角，离左侧边框更近一点。<br>这里需要注意，不管左上角还是右上角，全都是悬浮按钮的中心线在顶部边框的位置，也就是有一半按钮在屏外</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        floatingActionButton: FloatingActionButton(</span><br><span class="line">          child: Text(&apos;BTN&apos;),</span><br><span class="line">        ),</span><br><span class="line">        floatingActionButtonLocation: FloatingActionButtonLocation.startTop</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="14.png" alt><br>再看一下在底部贴边的效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        floatingActionButton: FloatingActionButton(</span><br><span class="line">          child: Text(&apos;BTN&apos;),</span><br><span class="line">        ),</span><br><span class="line">        floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="15.png" alt></p>
<h2 id="floatingActionButtonAnimator"><a href="#floatingActionButtonAnimator" class="headerlink" title="floatingActionButtonAnimator"></a>floatingActionButtonAnimator</h2><p>操作<code>floatingActionButton</code>的动画效果，例如旋转、缩放、偏移。<br>具体怎么用还不知道。。。</p>
<h2 id="persistentFooterButtons"><a href="#persistentFooterButtons" class="headerlink" title="persistentFooterButtons"></a>persistentFooterButtons</h2><p>固定在页面下方的一组按钮(不止可以放按钮也可以放其他<code>Widget</code>，按钮比较常见)，不随页面滚动，右对齐，新增的<code>Widget</code>会在最右侧，这个不是底部导航。<br>水平方向空间足够时，按钮会水平排列，空间不足时会竖直排列。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        persistentFooterButtons: &lt;Widget&gt;[</span><br><span class="line">          MaterialButton(</span><br><span class="line">            child: Text(&apos;BTN1&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              print(&apos;pressed btn1&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          MaterialButton(</span><br><span class="line">            child: Text(&apos;BTN2&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              print(&apos;pressed btn2&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          MaterialButton(</span><br><span class="line">            child: Text(&apos;BTN3&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              print(&apos;pressed btn3&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          MaterialButton(</span><br><span class="line">            child: Text(&apos;BTN4&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              print(&apos;pressed btn4&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          Container(</span><br><span class="line">            width: 50,</span><br><span class="line">            height: 50,</span><br><span class="line">            color: Colors.red</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="16.gif" alt></p>
<h2 id="drawer"><a href="#drawer" class="headerlink" title="drawer"></a>drawer</h2><p>最常见的左抽屉，自带半透明遮罩层，值可以是<code>Container</code>也可以是其他，如<code>Button</code>、<code>Text</code>。<br>这里加上<code>appBar</code>会自动生成一个<code>leading</code>，同时向右滑动也可以拉出抽屉。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(&apos;title&apos;)</span><br><span class="line">        ),</span><br><span class="line">        drawer: Container(</span><br><span class="line">          width: 150,</span><br><span class="line">          color: Colors.blue</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="17.gif" alt><br>如果不想用<code>appBar</code>自带的<code>leading</code>，也可以自定义，flutter提供了<code>ScaffoldState.openDrawer</code>函数。</p>
<h2 id="endDrawer"><a href="#endDrawer" class="headerlink" title="endDrawer"></a>endDrawer</h2><p>右侧抽屉，和左侧一样，两个抽屉可同时存在。</p>
<h2 id="drawerDragStartBehavior"><a href="#drawerDragStartBehavior" class="headerlink" title="drawerDragStartBehavior"></a>drawerDragStartBehavior</h2><p>触发拖拽的时机，有两个值，默认为<code>DragStartBehavior.start</code>，还有<code>DragStartBehavior.down</code>，文档推荐用默认值，试了一下，没感觉两个有明显差别。</p>
<h2 id="drawerScrimColor"><a href="#drawerScrimColor" class="headerlink" title="drawerScrimColor"></a>drawerScrimColor</h2><p>抽屉遮罩层背景色，默认为<code>Colors.black54</code>。</p>
<h2 id="drawerEdgeDragWidth"><a href="#drawerEdgeDragWidth" class="headerlink" title="drawerEdgeDragWidth"></a>drawerEdgeDragWidth</h2><p>滑动拉出抽屉的生效距离，设置为0时不能滑动拉出。</p>
<h2 id="bottomNavigationBar"><a href="#bottomNavigationBar" class="headerlink" title="bottomNavigationBar"></a>bottomNavigationBar</h2><p>这里需要注意的是，值不只可以是<code>BottomNavigationBar</code>，其他<code>Widget</code>也可以，试了一下<code>ListView</code>，不会显示在底部，居上显示，失去了底部导航的意义。<br>底部导航，先看一下<code>constructor</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BottomNavigationBar(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    @required List&lt;BottomNavigationBarItem&gt; items,</span><br><span class="line">    ValueChanged&lt;int&gt; onTap,</span><br><span class="line">    int currentIndex: 0,</span><br><span class="line">    double elevation: 8.0,</span><br><span class="line">    BottomNavigationBarType type,</span><br><span class="line">    Color fixedColor,</span><br><span class="line">    Color backgroundColor,</span><br><span class="line">    double iconSize: 24.0,</span><br><span class="line">    Color selectedItemColor,</span><br><span class="line">    Color unselectedItemColor,</span><br><span class="line">    IconThemeData selectedIconTheme: const IconThemeData(),</span><br><span class="line">    IconThemeData unselectedIconTheme: const IconThemeData(),</span><br><span class="line">    double selectedFontSize: 14.0,</span><br><span class="line">    double unselectedFontSize: 12.0,</span><br><span class="line">    TextStyle selectedLabelStyle,</span><br><span class="line">    TextStyle unselectedLabelStyle,</span><br><span class="line">    bool showSelectedLabels: true,</span><br><span class="line">    bool showUnselectedLabels: true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="items"><a href="#items" class="headerlink" title="items"></a>items</h3><p>菜单的按钮</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BottomNavigationBarItem(&#123;</span><br><span class="line">    @required Widget icon,  //菜单按钮的图标</span><br><span class="line">    Widget title,   //菜单按钮的标题</span><br><span class="line">    Widget activeIcon,  //active状态下的图标</span><br><span class="line">    Color backgroundColor   //背景色，需要type为shifting，否则没有效果</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: &lt;BottomNavigationBarItem&gt;[</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.home</span><br><span class="line">              ),</span><br><span class="line">              title: Text(&apos;HOME&apos;),</span><br><span class="line">            ),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.android</span><br><span class="line">              ),</span><br><span class="line">              title: Text(&apos;ANDROID&apos;)</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="18.png" alt><br>接下来给<code>HOME</code>加一个<code>activeIcon</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: &lt;BottomNavigationBarItem&gt;[</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.home</span><br><span class="line">              ),</span><br><span class="line">              title: Text(&apos;HOME&apos;),</span><br><span class="line">              activeIcon: Icon(</span><br><span class="line">                Icons.done</span><br><span class="line">              )</span><br><span class="line">            ),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.android</span><br><span class="line">              ),</span><br><span class="line">              title: Text(&apos;ANDROID&apos;),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="19.png" alt></p>
<h3 id="onTap"><a href="#onTap" class="headerlink" title="onTap"></a>onTap</h3><p>点击回调，有个<code>int</code>类型的参数，为点击的索引。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: &lt;BottomNavigationBarItem&gt;[</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.home</span><br><span class="line">              ),</span><br><span class="line">              title: Text(&apos;HOME&apos;),</span><br><span class="line">            ),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.android</span><br><span class="line">              ),</span><br><span class="line">              title: Text(&apos;ANDROID&apos;),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">          onTap: (index)&#123;</span><br><span class="line">            print(index);</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="20.png" alt></p>
<h3 id="elevation-1"><a href="#elevation-1" class="headerlink" title="elevation"></a>elevation</h3><p>导航栏的阴影，关于阴影前边有介绍，这里就不重复了。</p>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>flutter的这个底部的导航栏，不只提供了一种形式，默认为<code>fixed</code>，就是前边的那种，还有一种<code>shifting</code>，下面来看一下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: &lt;BottomNavigationBarItem&gt;[</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.home</span><br><span class="line">              ),</span><br><span class="line">              title: Text(&apos;HOME&apos;),</span><br><span class="line">              backgroundColor: Colors.red</span><br><span class="line">            ),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.android</span><br><span class="line">              ),</span><br><span class="line">              title: Text(&apos;ANDROID&apos;),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">          onTap: (index)&#123;</span><br><span class="line">            print(index);</span><br><span class="line">          &#125;,</span><br><span class="line">          type: BottomNavigationBarType.shifting,</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到<code>BottomNavigationBarItem</code>的背景色起作用了，只需要在一个设置了，整个导航栏都加上了，尝试了一下分别设置不同的颜色，只有第一个起作用。<br>图标和标题默认为白色，并且不显示标题，<code>active</code>状态下图标会放大，同时标题也会显示出来。</p>
<h3 id="fixedColor"><a href="#fixedColor" class="headerlink" title="fixedColor"></a>fixedColor</h3><p><code>icon</code>和<code>title</code>的颜色。</p>
<h3 id="backgroundColor-1"><a href="#backgroundColor-1" class="headerlink" title="backgroundColor"></a>backgroundColor</h3><p>标题栏的背景色，只在<code>type</code>为<code>fixed</code>时起作用。<br>感觉这有点乱，<code>fixed</code>和<code>shifting</code>背景色设置不统一。</p>
<h3 id="iconSize"><a href="#iconSize" class="headerlink" title="iconSize"></a>iconSize</h3><p><code>icon</code>的大小</p>
<h3 id="selectedItemColor-amp-unselectedItemColor"><a href="#selectedItemColor-amp-unselectedItemColor" class="headerlink" title="selectedItemColor &amp; unselectedItemColor"></a>selectedItemColor &amp; unselectedItemColor</h3><p>这两个放一起，选中和未选中的颜色。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: &lt;BottomNavigationBarItem&gt;[</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.home</span><br><span class="line">              ),</span><br><span class="line">              title: Text(&apos;HOME&apos;),</span><br><span class="line">            ),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.android</span><br><span class="line">              ),</span><br><span class="line">              title: Text(&apos;ANDROID&apos;),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">          onTap: (index)&#123;</span><br><span class="line">            print(index);</span><br><span class="line">          &#125;,</span><br><span class="line">          selectedItemColor: Colors.red,</span><br><span class="line">          unselectedItemColor: Colors.green</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="21.png" alt><br>红配绿</p>
<h3 id="selectedIconTheme-amp-unselectedIconTheme"><a href="#selectedIconTheme-amp-unselectedIconTheme" class="headerlink" title="selectedIconTheme &amp; unselectedIconTheme"></a>selectedIconTheme &amp; unselectedIconTheme</h3><p>这个和前边那两个颜色类似，是主题。</p>
<h3 id="selectedFontSize-amp-unselectedFontSize"><a href="#selectedFontSize-amp-unselectedFontSize" class="headerlink" title="selectedFontSize &amp; unselectedFontSize"></a>selectedFontSize &amp; unselectedFontSize</h3><p>选中和未选中的字体大小</p>
<h3 id="selectedLabelStyle-amp-unselectedLabelStyle"><a href="#selectedLabelStyle-amp-unselectedLabelStyle" class="headerlink" title="selectedLabelStyle &amp; unselectedLabelStyle"></a>selectedLabelStyle &amp; unselectedLabelStyle</h3><p>两种状态下的文字样式，关于文字的样式看这里<a href="/post/flutterTextWidget/">hello world和文本组件Text、TextSpan</a></p>
<h3 id="showSelectedLabels-amp-showUnselectedLabels"><a href="#showSelectedLabels-amp-showUnselectedLabels" class="headerlink" title="showSelectedLabels &amp; showUnselectedLabels"></a>showSelectedLabels &amp; showUnselectedLabels</h3><p>是否显示选中 / 为选中的<code>title</code>默认都是<code>true</code>，<code>false</code>时不显示。</p>
<h3 id="currentIndex"><a href="#currentIndex" class="headerlink" title="currentIndex"></a>currentIndex</h3><p>选中的索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: &lt;BottomNavigationBarItem&gt;[</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.home</span><br><span class="line">              ),</span><br><span class="line">              title: Text(&apos;HOME&apos;),</span><br><span class="line">            ),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              icon: Icon(</span><br><span class="line">                Icons.android</span><br><span class="line">              ),</span><br><span class="line">              title: Text(&apos;ANDROID&apos;),</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">          currentIndex: 1</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="22.png" alt></p>
<h2 id="bottomSheet"><a href="#bottomSheet" class="headerlink" title="bottomSheet"></a>bottomSheet</h2><p>底部滑出的组件。<br>先看一个最简单的<code>demo</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        bottomSheet:Container(</span><br><span class="line">          height: 100,</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          child: Center(</span><br><span class="line">            child: Text(&apos;bottomSheet&apos;)</span><br><span class="line">          )</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="23.png" alt><br>这就完成了，这种东西用在哪里？微信聊天界面底部，是不是有个输入框和一个按钮，就可以用这个实现。<br>有人会问，这是固定在底部的，也不是滑出来的啊，往下看。<br>想要弹出的话需要用<code>showBottomSheet</code>或者<code>showModalBottomSheet</code>方法，区别就是一个没有半透明遮罩层，一个有半透明遮罩层并且点击遮罩层会关闭。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Builder(</span><br><span class="line">          builder: (BuildContext context)&#123;</span><br><span class="line">            return Center(</span><br><span class="line">              child: ListView(</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  MaterialButton(</span><br><span class="line">                    child: Text(&apos;showBottomSheet&apos;),</span><br><span class="line">                    onPressed: () &#123;</span><br><span class="line">                      showBottomSheet(</span><br><span class="line">                        context: context,</span><br><span class="line">                        builder: (context) &#123;</span><br><span class="line">                          return Container(</span><br><span class="line">                            height: 100,</span><br><span class="line">                            color: Colors.red,</span><br><span class="line">                            child: Center(</span><br><span class="line">                              child: Text(&apos;bottomSheet&apos;)</span><br><span class="line">                            )</span><br><span class="line">                          );</span><br><span class="line">                        &#125;</span><br><span class="line">                      );</span><br><span class="line">                    &#125;</span><br><span class="line">                  ),</span><br><span class="line">                  MaterialButton(</span><br><span class="line">                    child: Text(&apos;showModalBottomSheet&apos;),</span><br><span class="line">                    onPressed: () &#123;</span><br><span class="line">                      showModalBottomSheet(</span><br><span class="line">                        context: context,</span><br><span class="line">                        builder: (context) &#123;</span><br><span class="line">                          return Container(</span><br><span class="line">                            height: 100,</span><br><span class="line">                            color: Colors.blue,</span><br><span class="line">                            child: Center(</span><br><span class="line">                                child: Text(&apos;bottomSheet&apos;)</span><br><span class="line">                            )</span><br><span class="line">                          );</span><br><span class="line">                        &#125;</span><br><span class="line">                      );</span><br><span class="line">                    &#125;,</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              )</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="24.gif" alt><br>这里需要注意一点就是<code>body</code>需要用<code>Builder</code>包一下，否则会找不到<code>Scaffold</code>。</p>
<h2 id="backgroundColor-2"><a href="#backgroundColor-2" class="headerlink" title="backgroundColor"></a>backgroundColor</h2><p>背景色。</p>
<h2 id="resizeToAvoidBottomPadding-amp-resizeToAvoidBottomInset"><a href="#resizeToAvoidBottomPadding-amp-resizeToAvoidBottomInset" class="headerlink" title="resizeToAvoidBottomPadding &amp; resizeToAvoidBottomInset"></a>resizeToAvoidBottomPadding &amp; resizeToAvoidBottomInset</h2><p>当键盘弹出时是否重新绘制以避免输入框被遮挡，默认为<code>true</code>。<code>resizeToAvoidBottomPadding</code>已弃用，目前还可以用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        resizeToAvoidBottomPadding: true,</span><br><span class="line">        body: ListView(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Container(</span><br><span class="line">              height: 400,</span><br><span class="line">              color: Colors.blue</span><br><span class="line">            ),</span><br><span class="line">            TextField(),</span><br><span class="line">            Container(</span><br><span class="line">              height: 100,</span><br><span class="line">              color: Colors.red</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="25.gif" alt></p>
<h2 id="primary-1"><a href="#primary-1" class="headerlink" title="primary"></a>primary</h2><p>和<code>appBar</code>的<code>primary</code>类似。</p>
<h2 id="extendBody"><a href="#extendBody" class="headerlink" title="extendBody"></a>extendBody</h2><p>如果设为<code>true</code>，当有<code>bottomNavigationBar</code>或者<code>bottomSheet</code>时<code>body</code>会延伸到下方，也就是说有一部分内容可能会被遮挡。</p>
<h2 id="extendBodyBehindAppBar"><a href="#extendBodyBehindAppBar" class="headerlink" title="extendBodyBehindAppBar"></a>extendBodyBehindAppBar</h2><p>与<code>extendBody</code>类似，是否延伸到<code>appBar</code>下方。</p>
]]></content>
  </entry>
  <entry>
    <title>electron &#39;unsafe-eval&#39;</title>
    <url>/post/ElectronUnsafeEval/</url>
    <content><![CDATA[<p>electron 出现如下警告</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Electron Security Warning (Insecure Content-Security-Policy) This renderer process has either no Content Security</span><br><span class="line">    Policy set or a policy with &quot;unsafe-eval&quot; enabled. This exposes users of</span><br><span class="line">    this app to unnecessary security risks.</span><br><span class="line"></span><br><span class="line">For more information and help, consult</span><br><span class="line">https://electronjs.org/docs/tutorial/security.</span><br><span class="line">This warning will not show up</span><br><span class="line">once the app is packaged.</span><br></pre></td></tr></table></figure>

<p>在<code>main.js</code>（入口文件）添加一行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">process.env[&apos;ELECTRON_DISABLE_SECURITY_WARNINGS&apos;] = &apos;true&apos;;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>flutter--模拟登录</title>
    <url>/post/flutterDemoMockLogin/</url>
    <content><![CDATA[<p><code>dart</code>官方文档：<a href="https://www.dartcn.com/" target="_blank" rel="noopener">https://www.dartcn.com/</a></p>
<p>先放上demo的github地址：<a href="https://github.com/MonkeyInWind/flutter_demo" target="_blank" rel="noopener">https://github.com/MonkeyInWind/flutter_demo</a>这篇笔记中的demo都在这个项目里。</p>
<a id="more"></a>
<p>前边学了一些简单的组件下面从0开始来写个demo。<br>动手之前先看demo效果<br><img src="1.gif" alt="Dec-12-2019 22-43-30.gif"></p>
<h1 id="一、创建一个项目"><a href="#一、创建一个项目" class="headerlink" title="一、创建一个项目"></a>一、创建一个项目</h1><p>在之前的笔记里（<a href="/post/flutterOfficialExample">官方示例&amp;代码解读</a>）已经说过怎么创建项目，以及官方demo的解读，这里就不详细说了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter create flutter_demo</span><br></pre></td></tr></table></figure>

<p>看到控制台打印以下信息，说明创建成功了。<br><img src="2.png" alt="image.png"><br>打开<code>Android Studio</code><br><img src="3.png" alt="image.png"><br>选择一个模拟器打开，打开之后就可以选择模拟器跑项目了。<br><img src="4.png" alt="image.png"><br>选择刚打开的模拟器，点绿色的三角启动，不想用模拟器选web也可以。<br><img src="5.png" alt="image.png"><br>跑起来就可以进行下一步了。</p>
<h1 id="二、写Demo"><a href="#二、写Demo" class="headerlink" title="二、写Demo"></a>二、写Demo</h1><h2 id="1、一段文本"><a href="#1、一段文本" class="headerlink" title="1、一段文本"></a>1、一段文本</h2><p><img src="6.png" alt="image.png"><br>这里选成<code>Project</code>，打开<code>lib</code>目录下的<code>main.dart</code>，删除大部分代码，只保留以下部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line"></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来在<code>MaterialApp</code>中添加文本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: Text(&apos;我是一段文本&apos;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="7.png" alt="image.png"><br>文字显示出来了，但是这也太难看了，接下来进行装饰。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: Scaffold(    //翻译成中文就是脚手架，提供了一个布局框架，里边有很多常用的api，比如顶部标题、底部菜单、左右抽屉等。</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(&apos;文本&apos;)</span><br><span class="line">        ),</span><br><span class="line">        body: Text(&apos;我是一段文本&apos;)</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="8.png" alt="image.png"><br>变成了这样，比前边好多了，我们再改一下，让这段文字在页面内居中显示，并且换个颜色。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(&apos;文本&apos;)</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(</span><br><span class="line">            &apos;我是一段文本&apos;,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">              color: Color.fromARGB(0xFF, 0xFF, 0x11, 0xF5)</span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要加上<code>Center</code>这个widget，就实现了水平垂直居中。<br>关于<code>Text</code>的详细介绍看这里<a href="/post/flutterTextWidget">hello world和文本组件Text、TextSpan</a></p>
<p>到这可能有人会提出问题，一个app不可能所有代码都放在一个class里，那根本没法看，这就是接下来要干的事。</p>
<h2 id="2、组件封装"><a href="#2、组件封装" class="headerlink" title="2、组件封装"></a>2、组件封装</h2><p>定义一个新的class叫<code>Page1</code>，并把<code>scaffold</code>放在里边。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: Page1()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Page1 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page1&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(</span><br><span class="line">          &apos;我是一段文本&apos;,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            color: Color.fromARGB(0xFF, 0xFF, 0x11, 0xF5)</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是不是感觉像是在写react（不考虑他这蛋疼的写法）。<br>写到这又会有人提出问题，这是没写到同一个class里，但是是在同一个文件里啊，接下来咱们就拆成两个文件。<br>在<code>lib</code>目录下新建一个文件叫<code>page1.dart</code>。<br><img src="9.png" alt="image.png"><br>内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page1 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page1&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(</span><br><span class="line">          &apos;我是一段文本&apos;,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            color: Color.fromARGB(0xFF, 0xFF, 0x11, 0xF5)</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">  );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就是把<code>material.dart</code>import进来之后再把刚刚<code>main.dart</code>里<code>Page1</code>粘过来。<br>下面改写<code>main.dart</code>，将刚新建的<code>page1.dart</code>import进来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line">import &apos;package:flutter_demo/page1.dart&apos;;   //项目目录名/文件名</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: Page1(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就做到了组件拆分。<br>开篇的demo地址切到<code>demo_1</code>分支，就是上边的完整代码。</p>
<h2 id="3、一个方块"><a href="#3、一个方块" class="headerlink" title="3、一个方块"></a>3、一个方块</h2><p>html有个最常用的标签<code>div</code>，曾有一段时间把页面布局叫做div布局，flutter里有个类似的widget叫<code>Container</code>（<a href="/post/flutterContainerWidget">容器组件Container</a>）。<br>接下来我们在<code>lib</code>目录下新建一个<code>page2.dart</code>文件。<br>整体框架和<code>page1.dart</code>相同。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page2 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page2&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line"></span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在<code>main.dart</code>里把<code>page2.dart</code>import进来，然后把home改成<code>Page2</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line">//import &apos;package:flutter_demo/page1.dart&apos;;</span><br><span class="line">import &apos;package:flutter_demo/page2.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: Page2(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="10.png" alt="image.png"><br>可以看见一个空白的页面，title是<code>page2</code>，接下来在<code>Center</code>里边写一个<code>Container</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page2 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page2&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Container(</span><br><span class="line">          width: 200,</span><br><span class="line">          height: 200,</span><br><span class="line">          color: Colors.red</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看见页面上出现了一个红色的方块。<br>有page1和page2了，接下来看以下页面怎么跳转。  </p>
<h2 id="4、路由"><a href="#4、路由" class="headerlink" title="4、路由"></a>4、路由</h2><p>我们来改造一下前边写的demo，<code>main.dart</code>还是import<code>page1.dart</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line">import &apos;package:flutter_demo/page1.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: Page1(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>page1.dart</code>中，我们在右下角加一个悬浮按钮。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page1 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page1&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(</span><br><span class="line">          &apos;我是一段文本&apos;,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            color: Color.fromARGB(0xFF, 0xFF, 0x11, 0xF5)</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          print(&apos;pressed next page&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候右下角出现了一个蓝色的悬浮按钮，点击之后可以看见控制台输出打印的信息。<br><img src="11.png" alt="image.png"><br>为了好看一点，我们在按钮里加一个图标（<a href="/post/flutterIconWidget">图标Icon</a>）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">floatingActionButton: FloatingActionButton(</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    print(&apos;pressed next page&apos;);</span><br><span class="line">  &#125;,</span><br><span class="line">  child: new Icon(Icons.arrow_forward),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>效果如下：<br><img src="12.png" alt="image.png"><br>接下来是跳转到下一页<br>先在<code>page1.dart</code>中将<code>page2.dart</code>import一下，然后写路由跳转，<code>page1.dart</code>完整的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line">import &apos;package:flutter_demo/page2.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page1 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page1&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(</span><br><span class="line">          &apos;我是一段文本&apos;,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            color: Color.fromARGB(0xFF, 0xFF, 0x11, 0xF5)</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          print(&apos;pressed next page&apos;);</span><br><span class="line">          Navigator.push(</span><br><span class="line">            context,</span><br><span class="line">            new MaterialPageRoute(builder: (context) =&gt; Page2()),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        child: new Icon(Icons.arrow_forward),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下<br><img src="13.gif" alt="Dec-08-2019 13-21-39.gif"><br>如果不想点标题栏的返回按钮，也可以自定义。<br>将<code>page2.dart</code>中的<code>Container</code>删除，换成一个按钮<code>MaterialButton</code>（<a href="/post/flutterButtonWidget">按钮 各种Button</a><br>）。<br>代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page2 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page2&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: MaterialButton(</span><br><span class="line">          child: Text(&apos;back&apos;),</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            print(&apos;back&apos;);</span><br><span class="line">            Navigator.pop(context);</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="14.png" alt="image.png"><br>只需要调用<code>Navigator.pop(context)</code>方法就可以返回上一页。<br>分支切换到<code>demo_2</code>为以上demo的代码。</p>
<h2 id="5、插播一条调试"><a href="#5、插播一条调试" class="headerlink" title="5、插播一条调试"></a>5、插播一条调试</h2><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><p>写web都知道开发者工具可以定位到页面上任意一个元素，flutter也可以。<br><code>Android Studio</code>在菜单栏<code>View -&gt; Tool Windows -&gt; Flutter Inspector</code>。<br>打开之后在编辑区右侧出现了调试工具。<br><img src="15.png" alt="image.png"><br><code>Widgets</code>可以看见整个页面的结构，点左上角的准星，可以去模拟器中选中某一个<code>Widget</code>。<br><img src="16.png" alt="image.png"><br>并且可以看见这个<code>Widget</code>上的所有属性和样式同时模拟器左下角还会出现一个放大镜，点击放大镜后可以再选中其他<code>Widget</code>。<br><img src="17.png" alt="image.png"><br>另一个工具可以查看页面的整体布局。</p>
<h4 id="打断点"><a href="#打断点" class="headerlink" title="打断点"></a>打断点</h4><p>需要在debug模式下运行才可以打断点。<br><img src="18.png" alt="image.png"><br>用这只虫子启动项目，在某一行代码前点击，出现红色的圆点。<br><img src="19.png" alt="image.png"><br>然后点击<code>back</code>这个按钮。<br><img src="20.png" alt="image.png"><br>和web一样。</p>
<h4 id="利用浏览器调试"><a href="#利用浏览器调试" class="headerlink" title="利用浏览器调试"></a>利用浏览器调试</h4><p><img src="21.png" alt="image.png"><br>点击这个按钮会在浏览器打开<code>Dart DevTools</code>，和在<code>Android Studio</code>调试基本相同，就不重复了，放一张图。<br><img src="22.png" alt="image.png"></p>
<h2 id="6、图片"><a href="#6、图片" class="headerlink" title="6、图片"></a>6、图片</h2><p>首先新建一个<code>page3.dart</code>的文件，在<code>page2.dart</code>中添加<code>floatingActionButton</code>，并将<code>page3.dart</code>import进来，<code>page3.dart</code> 中搭好页面。<br><code>page2.dart</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line">import &apos;package:flutter_demo/page3.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page2 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page2&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: MaterialButton(</span><br><span class="line">          child: Text(&apos;back&apos;),</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            print(&apos;back&apos;);</span><br><span class="line">            Navigator.pop(context);</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        child: Icon(Icons.arrow_forward),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          Navigator.push(</span><br><span class="line">            context,</span><br><span class="line">            new MaterialPageRoute(builder: (context) =&gt; Page3()),</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>page3.dart</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page3 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page3&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line"></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在第二页点右下角的按钮会进入第三页， 一个空页面。<br>接下来在根目录下新建一个<code>images</code>文件夹，里边放一张图片。<br>把刚才图片的路径添加到<code>pubspec.yaml</code>。<br><img src="23.png" alt="image.png"></p>
<p>接下来就可以使用这张图片了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page3 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page3&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Image.asset(&apos;./images/logo.png&apos;)</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存之后page3中会居中显示一个flutter的logo。<br>有时候我们不需要把图片打包进来，需要用到网络图片，这个时候需要把<code>Image.asset</code>换成<code>Image.network</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page3 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page3&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Image.network(&apos;https://www.baidu.com/img/bd_logo1.png&apos;)</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>去网上复制一张图片的链接，如果图片不显示，有可能是图片加了防盗链，这里用了百度的logo。<br>网络图片都有个加载时间，我们在放一个loading占位。<br>把<code>Center</code>换成<code>Stack</code>，<code>Stack</code>里放两个<code>Center</code>，再把loading和图片放在<code>Center</code>里。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page3 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">            title: Text(&apos;page3&apos;)</span><br><span class="line">        ),</span><br><span class="line">        body: Stack(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Center(</span><br><span class="line">              child: CircularProgressIndicator()</span><br><span class="line">            ),</span><br><span class="line">            Center(</span><br><span class="line">              child: Image.network(&apos;https://www.baidu.com/img/bd_logo1.png&apos;)</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="24.gif" alt="Dec-09-2019 21-19-47.gif"></p>
<p>这里简单介绍一下<code>Stack</code>，类似于<code>position: relative</code>，子<code>Widget</code>会重叠显示，上边的demo实际上是图片加载之后把loading盖住了。<br>上边虽然实现了loading占位，但是图片显示太过生硬，我们用<code>FadeInImage</code>给他加个淡入效果。<br><code>pubspec.yaml</code>里添加一个<code>transparent_image</code>（<a href="https://github.com/brianegan/transparent_image" target="_blank" rel="noopener">https://github.com/brianegan/transparent_image</a><br>）在图片加载之前占位用，这里其实体现不出来他的作用，但是<code>placeholder</code>不能为空。</p>
<p>这里用了第三方的包<a href="https://pub.dev/" target="_blank" rel="noopener">https://pub.dev/</a>，类似于npm的仓库。</p>
<p><img src="25.png" alt="image.png"></p>
<p>命令行执行<code>flutter pub get</code>如果是在<code>Android Studio</code>中添加之后会有提示，安装好之后改写一下<code>page3.dart</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line">import &apos;package:transparent_image/transparent_image.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page3 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">            title: Text(&apos;page3&apos;)</span><br><span class="line">        ),</span><br><span class="line">        body: Stack(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Center(</span><br><span class="line">              child: CircularProgressIndicator()</span><br><span class="line">            ),</span><br><span class="line">            Center(</span><br><span class="line">              child: FadeInImage.memoryNetwork(</span><br><span class="line">                placeholder: kTransparentImage,</span><br><span class="line">                image: &apos;https://www.baidu.com/img/bd_logo1.png&apos;</span><br><span class="line">              )</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下<br><img src="26.gif" alt="Dec-09-2019 21-17-09.gif"></p>
<p>这就比直接显示图片要好很多。<br>以上代码在demo_3分支。</p>
<h2 id="7、滚动列表-amp-网格布局"><a href="#7、滚动列表-amp-网格布局" class="headerlink" title="7、滚动列表 &amp; 网格布局"></a>7、滚动列表 &amp; 网格布局</h2><p>还是在<code>page3.dart</code>中添加<code>floatingActionButton</code>，然后新建一个文件<code>page4.dart</code>，在<code>page3.dart</code>中import。<br>先看一个最简单的列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page4 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page4&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: ListView(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          ListTile(</span><br><span class="line">            leading: Icon(Icons.phone),</span><br><span class="line">            title: Text(&apos;Title1&apos;)</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">              leading: Icon(Icons.cached),</span><br><span class="line">              title: Text(&apos;Title2&apos;)</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">              leading: Icon(Icons.adb),</span><br><span class="line">              title: Text(&apos;Title3&apos;)</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">              leading: Icon(Icons.adjust),</span><br><span class="line">              title: Text(&apos;Title4&apos;)</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="27.png" alt="image.png"></p>
<p>这样就实现了一个滚动列表，可以多复制一些<code>ListTitle</code>尝试一下上下滑动，这里就不写了。<br>纵向滚动实现里，下面看一下横向滚动，直接在<code>ListView</code>里加一个<code>Container</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page4 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page4&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: ListView(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          ListTile(</span><br><span class="line">            leading: Icon(Icons.phone),</span><br><span class="line">            title: Text(&apos;Title1&apos;)</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">              leading: Icon(Icons.cached),</span><br><span class="line">              title: Text(&apos;Title2&apos;)</span><br><span class="line">          ),</span><br><span class="line">          Container(</span><br><span class="line">            height: 200,</span><br><span class="line">            child: ListView(</span><br><span class="line">              scrollDirection: Axis.horizontal,</span><br><span class="line">              children: [</span><br><span class="line">                Container(</span><br><span class="line">                  color: Colors.red,</span><br><span class="line">                  width: 150,</span><br><span class="line">                ),</span><br><span class="line">                Container(</span><br><span class="line">                  color: Colors.blue,</span><br><span class="line">                  width: 150,</span><br><span class="line">                ),</span><br><span class="line">                Container(</span><br><span class="line">                  color: Colors.green,</span><br><span class="line">                  width: 150,</span><br><span class="line">                ),</span><br><span class="line">                Container(</span><br><span class="line">                  color: Colors.yellow,</span><br><span class="line">                  width: 150,</span><br><span class="line">                ),</span><br><span class="line">              ]</span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="28.png" alt="image.png"><br>这就在纵向列表里加了一个横向的列表。<br>这还不满足的话继续往下看，我们还可以在列表里同时展示两列。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page4 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page4&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: ListView(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          ListTile(</span><br><span class="line">            leading: Icon(Icons.phone),</span><br><span class="line">            title: Text(&apos;Title1&apos;)</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">              leading: Icon(Icons.cached),</span><br><span class="line">              title: Text(&apos;Title2&apos;)</span><br><span class="line">          ),</span><br><span class="line">          Container(</span><br><span class="line">            height: 200,</span><br><span class="line">            child: ListView(</span><br><span class="line">              scrollDirection: Axis.horizontal,</span><br><span class="line">              children: [</span><br><span class="line">                Container(</span><br><span class="line">                  color: Colors.red,</span><br><span class="line">                  width: 150,</span><br><span class="line">                ),</span><br><span class="line">                Container(</span><br><span class="line">                  color: Colors.blue,</span><br><span class="line">                  width: 150,</span><br><span class="line">                ),</span><br><span class="line">                Container(</span><br><span class="line">                  color: Colors.green,</span><br><span class="line">                  width: 150,</span><br><span class="line">                ),</span><br><span class="line">                Container(</span><br><span class="line">                  color: Colors.yellow,</span><br><span class="line">                  width: 150,</span><br><span class="line">                ),</span><br><span class="line">              ]</span><br><span class="line">            )</span><br><span class="line">          ),</span><br><span class="line">          Container(</span><br><span class="line">            height: 200,</span><br><span class="line">            decoration: BoxDecoration(</span><br><span class="line">              border: Border.all(width: 1, color: Colors.black)</span><br><span class="line">            ),</span><br><span class="line">            child: GridView.count(</span><br><span class="line">              crossAxisCount: 2,</span><br><span class="line">              children: List.generate(100, (index) &#123;</span><br><span class="line">                return Center(</span><br><span class="line">                  child: Text(&apos;Item $index&apos;)</span><br><span class="line">                );</span><br><span class="line">              &#125;)</span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="29.gif" alt="Dec-11-2019 21-09-18.gif"></p>
<p>这里用了<code>GridView</code>和<code>List.generate</code>。<br><code>GridView</code>就是网格布局，可以指定一行有几个<code>Widget</code>，每个<code>Widget</code>之间的距离等。<br><code>List.generate</code>值是一个函数，返回一个<code>Widget</code>，用来生成一组<code>Widget</code>。<br>以上代码在<code>demo_4</code>分支。</p>
<h2 id="8、手势"><a href="#8、手势" class="headerlink" title="8、手势"></a>8、手势</h2><p>前边都是一些常见<code>Widget</code>的简单用法，接下来说一下手势。<br>先来介绍一下<code>Pointers</code>，用户与屏幕交互的原始数据，包括<code>PointerDownEvent</code>、<code>PointerMoveEvent</code>、<code>PointerUpEvent</code>、<code>PointerCancelEvent</code>。类似于移动端<code>web</code>的<code>touch</code>事件。<br>再说一下手势，一个或几个<code>Pointer</code>的封装，先来一个按钮的demo看一下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page5 extends StatelessWidget&#123;</span><br><span class="line">  final items = new List&lt;String&gt;.generate(5, (i) =&gt; &apos;Item $&#123;i + 1&#125;&apos;);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page5&apos;),</span><br><span class="line">      ),</span><br><span class="line">      body: InkWell(</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Container(</span><br><span class="line">            child: Text(&apos;this is a button&apos;),</span><br><span class="line">            padding: EdgeInsets.only(</span><br><span class="line">              top: 10,</span><br><span class="line">              bottom: 10</span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">        ),</span><br><span class="line">        onTap: () &#123;</span><br><span class="line">          print(&apos;on tap&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onTapDown: (tapDownDetail) &#123;</span><br><span class="line">          print(&apos;on tap down&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onTapCancel: () &#123;</span><br><span class="line">          print(&apos;on tap cancel&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onDoubleTap: () &#123;</span><br><span class="line">          print(&apos;on dubble tap&apos;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onLongPress: () &#123;</span><br><span class="line">          print(&apos;on long press&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样一个全屏的大按钮就完成了，点击还有水波纹效果。。。<br>监听了五种手势，可以看一下打印。<br>接下来对demo进行改造，写一个可以滑动删除的列表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page5 extends StatelessWidget&#123;</span><br><span class="line">  final items = new List&lt;String&gt;.generate(5, (i) =&gt; &apos;Item $&#123;i + 1&#125;&apos;);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page5&apos;),</span><br><span class="line">      ),</span><br><span class="line">      body: ListView(</span><br><span class="line">        children: &lt;Widget&gt; [</span><br><span class="line">          InkWell(</span><br><span class="line">            child: Center(</span><br><span class="line">              child: Container(</span><br><span class="line">                child: Text(&apos;this is a button&apos;),</span><br><span class="line">                padding: EdgeInsets.only(</span><br><span class="line">                  top: 10,</span><br><span class="line">                  bottom: 10</span><br><span class="line">                )</span><br><span class="line">              )</span><br><span class="line">            ),</span><br><span class="line">            onTap: () &#123;</span><br><span class="line">              print(&apos;on tap&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">            onTapDown: (tapDownDetail) &#123;</span><br><span class="line">              print(&apos;on tap down&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">            onTapCancel: () &#123;</span><br><span class="line">              print(&apos;on tap cancel&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">            onDoubleTap: () &#123;</span><br><span class="line">              print(&apos;on dubble tap&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">            onLongPress: () &#123;</span><br><span class="line">              print(&apos;on long press&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">          ),</span><br><span class="line">          Container(</span><br><span class="line">            height: 400,</span><br><span class="line">            child: ListView.builder(</span><br><span class="line">              itemCount: items.length,</span><br><span class="line">              itemBuilder: (context, index) &#123;</span><br><span class="line">                final item = items[index];</span><br><span class="line">                return Dismissible(</span><br><span class="line">                  key: Key(&apos;key_$index&apos;),</span><br><span class="line">                  onDismissed: (direction) &#123;</span><br><span class="line">                    items.removeAt(index);</span><br><span class="line">                    Scaffold.of(context).showSnackBar(</span><br><span class="line">                      SnackBar(</span><br><span class="line">                        content: Text(&apos;$item dismissed&apos;)</span><br><span class="line">                      )</span><br><span class="line">                    );</span><br><span class="line">                  &#125;,</span><br><span class="line">                  background: Container(</span><br><span class="line">                    color: Colors.red</span><br><span class="line">                  ),</span><br><span class="line">                  child: ListTile(</span><br><span class="line">                    title: Text(&apos;$item&apos;)</span><br><span class="line">                  )</span><br><span class="line">                );</span><br><span class="line">              &#125;</span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">        ]</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下效果<br><img src="30.gif" alt="Dec-11-2019 21-27-49.gif"><br>这里用了<code>List.generate</code>方法生成了一个<code>List</code> ，然后用了<code>ListView.builder</code>生成了一个<code>ListView</code>。<code>Dismissible</code>是flutter提供的一个可以滑动删除的<code>Widget</code>，<code>SnackBar</code>就是底部的提示。<br>关于手势的中文文档看这里<a href="https://flutterchina.club/gestures/" target="_blank" rel="noopener">https://flutterchina.club/gestures/</a>。<br>以上demo在<code>demo_5</code>分支。</p>
<h2 id="9、有状态组件"><a href="#9、有状态组件" class="headerlink" title="9、有状态组件"></a>9、有状态组件</h2><p>前边的<code>Widget</code>都是继承<code>StatelessWidget</code>也就是无状态组件，接下来看一下<code>StatefulWidget</code>有状态组件。<br>先来布个局<br><img src="31.png" alt="image.png"><br>这个结构很简单，上边一个红色的<code>Container</code>，下边一行放三个按钮<code>MaterialButton</code>，最终实现的效果就是点击按钮改变上边<code>Container</code>的颜色。<br>先看布局代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page6 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page6&apos;),</span><br><span class="line">      ),</span><br><span class="line">      body: Column(</span><br><span class="line">        crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Container(</span><br><span class="line">            width: 200,</span><br><span class="line">            height: 200,</span><br><span class="line">            color: Colors.red,</span><br><span class="line">            margin: EdgeInsets.only(</span><br><span class="line">              top: 20,</span><br><span class="line">              bottom: 20</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          Row (</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container (</span><br><span class="line">                padding: EdgeInsets.only(</span><br><span class="line">                  left: 10,</span><br><span class="line">                  right: 10</span><br><span class="line">                ),</span><br><span class="line">                child: MaterialButton (</span><br><span class="line">                  color: Colors.red,</span><br><span class="line">                  child: Text(&apos;red&apos;),</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    print(&apos;red&apos;);</span><br><span class="line">                  &#125;,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              Container (</span><br><span class="line">                padding: EdgeInsets.only(</span><br><span class="line">                    left: 10,</span><br><span class="line">                    right: 10</span><br><span class="line">                ),</span><br><span class="line">                child: MaterialButton (</span><br><span class="line">                  color: Colors.blue,</span><br><span class="line">                  child: Text(&apos;blue&apos;),</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    print(&apos;blue&apos;);</span><br><span class="line">                  &#125;</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              Container (</span><br><span class="line">                padding: EdgeInsets.only(</span><br><span class="line">                  left: 10,</span><br><span class="line">                  right: 10</span><br><span class="line">                ),</span><br><span class="line">                child: MaterialButton (</span><br><span class="line">                  color: Colors.green,</span><br><span class="line">                  child: Text(&apos;green&apos;),</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    print(&apos;green&apos;);</span><br><span class="line">                  &#125;</span><br><span class="line">                )</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里边用了<code>Column</code>和<code>Row</code>这两个新的<code>Widget</code>，一个是子<code>Widget</code>纵向排列，另一个是横向排列，另外还用了<code>MainAxisAlignment</code>主轴上的对齐方式和<code>CrossAxisAlignment</code>交叉轴上的对齐方式，这里都用了居中，至于<code>margin</code>为什么不加在<code>MaterialButton</code>上，对不起，没有。<br>接下来对demo进行改写，<code>StatelessWidget</code>肯定是不行的，要换成<code>StatefulWidget</code>。<br>先看代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page6 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page6&apos;),</span><br><span class="line">      ),</span><br><span class="line">      body: BoxChangeColor()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BoxChangeColor extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _BoxChangeColorState createState() =&gt; new _BoxChangeColorState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _BoxChangeColorState extends State&lt;BoxChangeColor&gt; &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Column(</span><br><span class="line">      crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Container(</span><br><span class="line">          width: 200,</span><br><span class="line">          height: 200,</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          margin: EdgeInsets.only(</span><br><span class="line">            top: 20,</span><br><span class="line">            bottom: 20</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        Row (</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Container (</span><br><span class="line">              padding: EdgeInsets.only(</span><br><span class="line">                left: 10,</span><br><span class="line">                right: 10</span><br><span class="line">              ),</span><br><span class="line">              child: MaterialButton (</span><br><span class="line">                color: Colors.red,</span><br><span class="line">                child: Text(&apos;red&apos;),</span><br><span class="line">                onPressed: () &#123;</span><br><span class="line">                  print(&apos;red&apos;);</span><br><span class="line">                &#125;,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Container (</span><br><span class="line">              padding: EdgeInsets.only(</span><br><span class="line">                left: 10,</span><br><span class="line">                right: 10</span><br><span class="line">              ),</span><br><span class="line">              child: MaterialButton (</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">                child: Text(&apos;blue&apos;),</span><br><span class="line">                onPressed: () &#123;</span><br><span class="line">                  print(&apos;blue&apos;);</span><br><span class="line">                &#125;</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Container (</span><br><span class="line">              padding: EdgeInsets.only(</span><br><span class="line">                left: 10,</span><br><span class="line">                right: 10</span><br><span class="line">              ),</span><br><span class="line">              child: MaterialButton (</span><br><span class="line">                color: Colors.green,</span><br><span class="line">                child: Text(&apos;green&apos;),</span><br><span class="line">                onPressed: () &#123;</span><br><span class="line">                  print(&apos;green&apos;);</span><br><span class="line">                &#125;</span><br><span class="line">              )</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里新建了一个<code>BoxChangeColor</code>继承了<code>StatefulWidget</code>，并重写了<code>createState</code>方法，再创建一个<code>_BoxChangeColorState</code>类继承<code>State</code>，在<code>_BoxChangeColorState</code>返回上边的<code>Column</code>，这样就完成了一个缺少状态的有状态组件。<br>以<code>_</code>开头表示私有。<br>下面把缺少的状态添加进去。<br>在<code>_BoxChangeColorState</code>中声明一个变量，这个变量就是<code>state</code>，类型为<code>Color</code>并把这个<code>state</code>写成<code>Container</code>的 <code>color</code>属性值，在<code>MaterialButton</code>的<code>onPressed</code>事件中调用<code>setState</code>方法来改变<code>state</code>，这个时候会重新<code>build</code>，实现了切换颜色。<br>这个demo的完整带么如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Page6 extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;page6&apos;),</span><br><span class="line">      ),</span><br><span class="line">      body: BoxChangeColor()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BoxChangeColor extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _BoxChangeColorState createState() =&gt; new _BoxChangeColorState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _BoxChangeColorState extends State&lt;BoxChangeColor&gt; &#123;</span><br><span class="line">  Color color = Colors.red;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Column(</span><br><span class="line">      crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Container(</span><br><span class="line">          width: 200,</span><br><span class="line">          height: 200,</span><br><span class="line">          color: color,</span><br><span class="line">          margin: EdgeInsets.only(</span><br><span class="line">            top: 20,</span><br><span class="line">            bottom: 20</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        Row (</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Container (</span><br><span class="line">              padding: EdgeInsets.only(</span><br><span class="line">                left: 10,</span><br><span class="line">                right: 10</span><br><span class="line">              ),</span><br><span class="line">              child: MaterialButton (</span><br><span class="line">                color: Colors.red,</span><br><span class="line">                child: Text(&apos;red&apos;),</span><br><span class="line">                onPressed: () &#123;</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    color = Colors.red;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Container (</span><br><span class="line">              padding: EdgeInsets.only(</span><br><span class="line">                left: 10,</span><br><span class="line">                right: 10</span><br><span class="line">              ),</span><br><span class="line">              child: MaterialButton (</span><br><span class="line">                color: Colors.blue,</span><br><span class="line">                child: Text(&apos;blue&apos;),</span><br><span class="line">                onPressed: () &#123;</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    color = Colors.blue;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Container (</span><br><span class="line">              padding: EdgeInsets.only(</span><br><span class="line">                left: 10,</span><br><span class="line">                right: 10</span><br><span class="line">              ),</span><br><span class="line">              child: MaterialButton (</span><br><span class="line">                color: Colors.green,</span><br><span class="line">                child: Text(&apos;green&apos;),</span><br><span class="line">                onPressed: () &#123;</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    color = Colors.green;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">              )</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来看一下效果<br><img src="32.gif" alt="Dec-11-2019 22-43-58.gif"><br>以上代码在<code>demo_6</code>分支。</p>
<h2 id="10、模拟登录"><a href="#10、模拟登录" class="headerlink" title="10、模拟登录"></a>10、模拟登录</h2><p>前边都是基本用法的介绍，而且demo都很零碎，接下来做一个模拟登录的demo。<br>点击<code>Login</code>按钮跳转至登录页面，点击<code>Cancel</code>按钮返回登录页面，输入<code>username</code>和<code>password</code>后点击登录页面的<code>Login</code>按钮模拟登录，跳转回前一页面，这个时候隐藏登录页面的<code>Login</code>按钮并显示一张图片。<br>首先新建一个<code>login.dart</code>文件用作登录页面，终于不是page了，在里边创建一个名为<code>Login</code>的<code>StatefulWidget</code>，然后在<code>main.dart</code>中把这个文件import进来，然后在<code>main.dart</code>创建一个名为<code>HomePage</code>的<code>StatefulWidget</code>作为主页，中间放一个按钮，点击按钮跳转至登录页。<br>先看效果<br><img src="33.gif" alt="Dec-12-2019 14-51-49.gif"><br>再看代码<br><code>main.dart</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line">import &apos;package:flutter_demo/login.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: HomePage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class HomePage extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _HomePageState createState() =&gt; new _HomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _HomePageState extends State&lt;HomePage&gt; &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold (</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;Login&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center (</span><br><span class="line">        child: RaisedButton(</span><br><span class="line">          child: Text(&apos;Login&apos;),</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            Navigator.push(</span><br><span class="line">              context,</span><br><span class="line">              MaterialPageRoute(</span><br><span class="line">                fullscreenDialog: true,</span><br><span class="line">                builder: (context) =&gt; Login()</span><br><span class="line">              )</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里用了个<code>fullscreenDialog</code>属性，全屏弹窗，下一个页面从底部弹出。<br><code>login.dart</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Login extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _LoginState createState() =&gt; new _LoginState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _LoginState extends State&lt;Login&gt; &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      body: Column(</span><br><span class="line">        crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Container (</span><br><span class="line">            padding: EdgeInsets.only(</span><br><span class="line">              top:50,</span><br><span class="line">              left: 20,</span><br><span class="line">              right: 20</span><br><span class="line">            ),</span><br><span class="line">            child: TextField (</span><br><span class="line">              decoration: InputDecoration(</span><br><span class="line">                prefixIcon: Icon(Icons.person),</span><br><span class="line">                labelText: (&apos;username&apos;)</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">          ),</span><br><span class="line">          Container (</span><br><span class="line">            padding: EdgeInsets.all(20),</span><br><span class="line">            child: TextField (</span><br><span class="line">              decoration: InputDecoration(</span><br><span class="line">                prefixIcon: Icon(Icons.lock),</span><br><span class="line">                labelText: (&apos;password&apos;)</span><br><span class="line">              ),</span><br><span class="line">              obscureText: true</span><br><span class="line">            )</span><br><span class="line">          ),</span><br><span class="line">          Row (</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              Container (</span><br><span class="line">                margin: EdgeInsets.only(</span><br><span class="line">                  left: 10,</span><br><span class="line">                  right: 10</span><br><span class="line">                ),</span><br><span class="line">                child: RaisedButton(</span><br><span class="line">                  child: Text(&apos;Login&apos;),</span><br><span class="line">                  color: Colors.blue,</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line"></span><br><span class="line">                  &#125;</span><br><span class="line">                )</span><br><span class="line">              ),</span><br><span class="line">              Container (</span><br><span class="line">                margin: EdgeInsets.only(</span><br><span class="line">                  left: 10,</span><br><span class="line">                  right: 10</span><br><span class="line">                ),</span><br><span class="line">                child: RaisedButton(</span><br><span class="line">                  child: Text(&apos;Cancel&apos;),</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    Navigator.pop(context);</span><br><span class="line">                  &#125;</span><br><span class="line">                )</span><br><span class="line">              )</span><br><span class="line">            ]</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里用了文本输入框<code>TextField</code>，一个花里胡哨的<code>Widget</code>属性一大堆，和<code>html</code>里的<code>input</code>但是要比<code>input</code>强大很多，想要的效果这个<code>Widget</code>基本上都有，只要加属性就行了。这里用了<code>decoration</code>的<code>prefixIcon</code>输入框前的图标，<code>labelText</code>类似于<code>input</code>的<code>placeholder</code>当输入框获得焦点时虽小到左上角，还有<code>obscureText</code>是否密文。</p>
<p>写到这布局基本上就算完成了，接下来加状态，<code>HomePage</code>加一个登录状态，<code>Login</code>加上<code>username</code>和<code>password</code>，并在点<code>Login</code>的时候做空校验，通过之后跳转回<code>HomePage</code>并带上登录状态。</p>
<p>首先在<code>Login</code>里添加两个<code>state</code>，<code>username</code>和<code>password</code>，并在两个<code>TextField</code>里监听<code>onChanged</code>事件，给<code>username</code>和<code>password</code>赋值，并在点击<code>Login</code>的时候做校验。</p>
<p><code>TextField</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TextField (</span><br><span class="line">  decoration: InputDecoration(</span><br><span class="line">    prefixIcon: Icon(Icons.person),</span><br><span class="line">    labelText: (&apos;username&apos;)</span><br><span class="line">  ),</span><br><span class="line">  onChanged: (value) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      username = value;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>username</code>和<code>password</code>一样，就不重复了。  </p>
<p><code>Cancel</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RaisedButton(</span><br><span class="line">  child: Text(&apos;Cancel&apos;),</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      username = &apos;&apos;;</span><br><span class="line">      password = &apos;&apos;;  </span><br><span class="line">    &#125;);</span><br><span class="line">    Navigator.pop(context);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>取消的时候将<code>username</code>和<code>password</code>置空。  </p>
<p><code>Login</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RaisedButton(</span><br><span class="line">  child: Text(&apos;Login&apos;),</span><br><span class="line">  color: Colors.blue,</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    String tip = &apos;&apos;;</span><br><span class="line">    if (username == &apos;&apos;) &#123;</span><br><span class="line">      tip = &apos;username empty&apos;;</span><br><span class="line">    &#125; else if (password == &apos;&apos;) &#123;</span><br><span class="line">      tip = &apos;password empty&apos;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        username = &apos;&apos;;</span><br><span class="line">        password = &apos;&apos;;</span><br><span class="line">      &#125;);</span><br><span class="line">    tip = &apos;success&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    print(tip);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>在这里对<code>username</code>和<code>password</code>做校验，得到不同的<code>tip</code>。<br>三种不同状态，可以打印出来。<br><img src="35.png" alt="image.png"><br>接下来做提示，就用之前用过的<code>SnackBar</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line">import &apos;dart:async&apos;;</span><br><span class="line"></span><br><span class="line">class Login extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _LoginState createState() =&gt; new _LoginState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _LoginState extends State&lt;Login&gt; &#123;</span><br><span class="line">  String username = &apos;&apos;;</span><br><span class="line">  String password = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      body: Builder (builder: (BuildContext context) &#123;</span><br><span class="line">        return Column(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Container (</span><br><span class="line">              padding: EdgeInsets.only(</span><br><span class="line">                top:50,</span><br><span class="line">                left: 20,</span><br><span class="line">                right: 20</span><br><span class="line">              ),</span><br><span class="line">              child: TextField (</span><br><span class="line">                decoration: InputDecoration(</span><br><span class="line">                  prefixIcon: Icon(Icons.person),</span><br><span class="line">                  labelText: (&apos;username&apos;)</span><br><span class="line">                ),</span><br><span class="line">                onChanged: (value) &#123;</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    username = value;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">              )</span><br><span class="line">            ),</span><br><span class="line">            Container (</span><br><span class="line">              padding: EdgeInsets.all(20),</span><br><span class="line">              child: TextField (</span><br><span class="line">                decoration: InputDecoration(</span><br><span class="line">                  prefixIcon: Icon(Icons.lock),</span><br><span class="line">                  labelText: (&apos;password&apos;)</span><br><span class="line">                ),</span><br><span class="line">                obscureText: true,</span><br><span class="line">                onChanged: (value) &#123;</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    password = value;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">              )</span><br><span class="line">            ),</span><br><span class="line">            Row (</span><br><span class="line">              mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Container (</span><br><span class="line">                  margin: EdgeInsets.only(</span><br><span class="line">                    left: 10,</span><br><span class="line">                    right: 10</span><br><span class="line">                  ),</span><br><span class="line">                  child: RaisedButton(</span><br><span class="line">                    child: Text(&apos;Login&apos;),</span><br><span class="line">                    color: Colors.blue,</span><br><span class="line">                    onPressed: () &#123;</span><br><span class="line">                      String tip = &apos;&apos;;</span><br><span class="line">                      if (username == &apos;&apos;) &#123;</span><br><span class="line">                        tip = &apos;username empty&apos;;</span><br><span class="line">                      &#125; else if (password == &apos;&apos;) &#123;</span><br><span class="line">                        tip = &apos;password empty&apos;;</span><br><span class="line">                      &#125; else &#123;</span><br><span class="line">                        setState(() &#123;</span><br><span class="line">                          username = &apos;&apos;;</span><br><span class="line">                          password = &apos;&apos;;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        Timer(</span><br><span class="line">                          Duration(seconds: 1),</span><br><span class="line">                          () &#123;</span><br><span class="line">                            Navigator.pop(context, true);</span><br><span class="line">                          &#125;</span><br><span class="line">                        );</span><br><span class="line">                        tip = &apos;success&apos;;</span><br><span class="line">                      &#125;</span><br><span class="line">                      Scaffold.of(context).showSnackBar(</span><br><span class="line">                        SnackBar(</span><br><span class="line">                          content: Text(tip),</span><br><span class="line">                          duration: Duration(seconds: 1),</span><br><span class="line">                        )</span><br><span class="line">                      );</span><br><span class="line">                    &#125;</span><br><span class="line">                  )</span><br><span class="line">                ),</span><br><span class="line">                Container (</span><br><span class="line">                  margin: EdgeInsets.only(</span><br><span class="line">                    left: 10,</span><br><span class="line">                    right: 10</span><br><span class="line">                  ),</span><br><span class="line">                  child: RaisedButton(</span><br><span class="line">                    child: Text(&apos;Cancel&apos;),</span><br><span class="line">                    onPressed: () &#123;</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        username = &apos;&apos;;</span><br><span class="line">                        password = &apos;&apos;;</span><br><span class="line">                      &#125;);</span><br><span class="line">                      Navigator.pop(context, false);</span><br><span class="line">                    &#125;</span><br><span class="line">                  )</span><br><span class="line">                )</span><br><span class="line">              ]</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        );</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有几处处改动，<code>Column</code>套了个<code>Builder</code>方法，否则在用<code>Scaffold.of(context)</code>的时候会报错，查了一下是<code>context</code>的问题。另一个是<code>Login</code>的<code>onChanged</code>，这里加了<code>SnackBar</code>，<code>duration</code>是提示的时间，如果登录成功开了个一秒的定时器，在一秒之后返回上一页，这里需要注意的一点就是，<code>Timer</code>是在<code>dart/sync</code>这个包里，需要import进来，另外在登录成功和取消按钮跳转回前一页时传回一个登录状态的参数。<br>接下来把<code>main.dart</code>稍作改动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line">import &apos;package:flutter_demo/login.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: HomePage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class HomePage extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _HomePageState createState() =&gt; new _HomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _HomePageState extends State&lt;HomePage&gt; &#123;</span><br><span class="line">  bool logged = false;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold (</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&apos;Login&apos;)</span><br><span class="line">      ),</span><br><span class="line">      body: Center (</span><br><span class="line">        child: logged ? Image.asset(&apos;./images/logo.png&apos;)</span><br><span class="line">            :</span><br><span class="line">          RaisedButton(</span><br><span class="line">            child: Text(&apos;Login&apos;),</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            onPressed: () async &#123;</span><br><span class="line">              var result = await Navigator.push(</span><br><span class="line">                context,</span><br><span class="line">                MaterialPageRoute(</span><br><span class="line">                  fullscreenDialog: true,</span><br><span class="line">                  builder: (context) =&gt; Login()</span><br><span class="line">                )</span><br><span class="line">              );</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                logged = result;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这同样加一个<code>logged</code>表示登录状态，<code>Center</code>的<code>child</code>根据<code>logged</code>判断显示图片还是按钮，<code>Login</code>按钮的<code>onPressed</code>事件这需要注意一下，加了<code>sync</code>表示这是一个异步方法，<code>Navigator</code>这返回一个<code>Feature</code>，需要<code>await</code>一下，看着和js的<code>async</code>、<code>await</code>、<code>promise</code>用法一样，<code>result</code>就是返回的参数，把他set给<code>logged</code>，就实现了我们的需求。<br>再来看一下效果<br><img src="35.gif" alt="Dec-12-2019 22-43-30.gif"></p>
<h2 id="11、网络请求"><a href="#11、网络请求" class="headerlink" title="11、网络请求"></a>11、网络请求</h2><p>前边的登录是在app里模拟，但是写应用是离不开网络请求的，接下来我们添加个网络请求，调个登录接口。<br>这里用一个封装好的第三方网络请求<a href="https://github.com/flutterchina/dio" target="_blank" rel="noopener">https://github.com/flutterchina/dio</a><br>还是在<code>pubspec.yaml</code>里添加<code>dio</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  dio: 3.0.7</span><br><span class="line">  flutter:</span><br><span class="line">    sdk: flutter</span><br></pre></td></tr></table></figure>

<p>添加好之后<code>android studio</code>会提示需要下载这个包，或者在命令行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter pub get</span><br></pre></td></tr></table></figure>

<p>下载好了之后在<code>login.dart</code>中<code>import</code>进来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:dio/dio.dart&apos;;</span><br></pre></td></tr></table></figure>

<p>接下来就是改写代码，首先在<code>state</code>里声明一个<code>dio</code><br><img src="36.png" alt="image.png"><br>接下来在登录按钮的<code>onpressed</code>中添加网络请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RaisedButton(</span><br><span class="line">  child: Text(&apos;Login&apos;),</span><br><span class="line">  color: Colors.blue,</span><br><span class="line">  onPressed: () async &#123;</span><br><span class="line">    String tip = &apos;&apos;;</span><br><span class="line">    if (username == &apos;&apos;) &#123;</span><br><span class="line">      tip = &apos;username empty&apos;;</span><br><span class="line">    &#125; else if (password == &apos;&apos;) &#123;</span><br><span class="line">      tip = &apos;password empty&apos;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        Response res = await dio.post(</span><br><span class="line">            &apos;http://118.25.7.84:10086/login&apos;,    //这个是我自己的服务器提供的接口，可以直接用</span><br><span class="line">            data: &#123;</span><br><span class="line">              &apos;username&apos;: username,</span><br><span class="line">              &apos;password&apos;: password</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        print(res.data);</span><br><span class="line">        tip = res.data;</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        print(e);</span><br><span class="line">        tip = &apos;failed&apos;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Scaffold.of(context).showSnackBar(</span><br><span class="line">      SnackBar(</span><br><span class="line">        content: Text(tip),</span><br><span class="line">        duration: Duration(seconds: 1),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>具体这就实现了网络请求，接口返回<code>登录成功</code>，另外用了<code>try catch</code>捕获异常。<br>贴一下完整代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line">import &apos;dart:async&apos;;</span><br><span class="line">import &apos;package:dio/dio.dart&apos;;</span><br><span class="line"></span><br><span class="line">class Login extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _LoginState createState() =&gt; new _LoginState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _LoginState extends State&lt;Login&gt; &#123;</span><br><span class="line">  Dio dio = new Dio();</span><br><span class="line">  String username = &apos;&apos;;</span><br><span class="line">  String password = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      body: Builder (builder: (BuildContext context) &#123;</span><br><span class="line">        return Column(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Container (</span><br><span class="line">              padding: EdgeInsets.only(</span><br><span class="line">                top:50,</span><br><span class="line">                left: 20,</span><br><span class="line">                right: 20</span><br><span class="line">              ),</span><br><span class="line">              child: TextField (</span><br><span class="line">                decoration: InputDecoration(</span><br><span class="line">                  prefixIcon: Icon(Icons.person),</span><br><span class="line">                  labelText: (&apos;username&apos;)</span><br><span class="line">                ),</span><br><span class="line">                onChanged: (value) &#123;</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    username = value;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">              )</span><br><span class="line">            ),</span><br><span class="line">            Container (</span><br><span class="line">              padding: EdgeInsets.all(20),</span><br><span class="line">              child: TextField (</span><br><span class="line">                decoration: InputDecoration(</span><br><span class="line">                  prefixIcon: Icon(Icons.lock),</span><br><span class="line">                  labelText: (&apos;password&apos;)</span><br><span class="line">                ),</span><br><span class="line">                obscureText: true,</span><br><span class="line">                onChanged: (value) &#123;</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    password = value;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">              )</span><br><span class="line">            ),</span><br><span class="line">            Row (</span><br><span class="line">              mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Container (</span><br><span class="line">                  margin: EdgeInsets.only(</span><br><span class="line">                    left: 10,</span><br><span class="line">                    right: 10</span><br><span class="line">                  ),</span><br><span class="line">                  child: RaisedButton(</span><br><span class="line">                    child: Text(&apos;Login&apos;),</span><br><span class="line">                    color: Colors.blue,</span><br><span class="line">                    onPressed: () async &#123;</span><br><span class="line">                      String tip = &apos;&apos;;</span><br><span class="line">                      if (username == &apos;&apos;) &#123;</span><br><span class="line">                        tip = &apos;username empty&apos;;</span><br><span class="line">                      &#125; else if (password == &apos;&apos;) &#123;</span><br><span class="line">                        tip = &apos;password empty&apos;;</span><br><span class="line">                      &#125; else &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                          Response res = await dio.post(</span><br><span class="line">                              &apos;http://118.25.7.84:10086/login&apos;,</span><br><span class="line">                              data: &#123;</span><br><span class="line">                                &apos;username&apos;: username,</span><br><span class="line">                                &apos;password&apos;: password</span><br><span class="line">                              &#125;</span><br><span class="line">                          );</span><br><span class="line">                          print(res.data);</span><br><span class="line">                          tip = res.data;</span><br><span class="line">                          Timer(</span><br><span class="line">                            Duration(seconds: 1),</span><br><span class="line">                            () &#123;</span><br><span class="line">                              Navigator.pop(context, true);</span><br><span class="line">                            &#125;</span><br><span class="line">                          );</span><br><span class="line">                        &#125; catch (e) &#123;</span><br><span class="line">                          print(e);</span><br><span class="line">                          tip = &apos;failed&apos;;</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                      Scaffold.of(context).showSnackBar(</span><br><span class="line">                        SnackBar(</span><br><span class="line">                          content: Text(tip),</span><br><span class="line">                          duration: Duration(seconds: 1),</span><br><span class="line">                        )</span><br><span class="line">                      );</span><br><span class="line">                    &#125;</span><br><span class="line">                  )</span><br><span class="line">                ),</span><br><span class="line">                Container (</span><br><span class="line">                  margin: EdgeInsets.only(</span><br><span class="line">                    left: 10,</span><br><span class="line">                    right: 10</span><br><span class="line">                  ),</span><br><span class="line">                  child: RaisedButton(</span><br><span class="line">                    child: Text(&apos;Cancel&apos;),</span><br><span class="line">                    onPressed: () &#123;</span><br><span class="line">                      setState(() &#123;</span><br><span class="line">                        username = &apos;&apos;;</span><br><span class="line">                        password = &apos;&apos;;</span><br><span class="line">                      &#125;);</span><br><span class="line">                      Navigator.pop(context, false);</span><br><span class="line">                    &#125;</span><br><span class="line">                  )</span><br><span class="line">                )</span><br><span class="line">              ]</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        );</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目前flutter已经支持<code>MacOs</code>，可以在吗命令行执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter config --enable-macos-desktop</span><br></pre></td></tr></table></figure>

<p>在项目目录下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter create .</span><br></pre></td></tr></table></figure>

<p>即可体验<br>在<code>android studio</code>的设备下啦列表了会多一个<code>macOs(desktop)</code>，选中后就可以跑起来了。<br>这里需要注意的是，跑起来之后调接口是会失败的，需要在<code>macos/Runner/DebugProfile.entitlements</code>文件中添加<code>com.apple.security.network.client</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">	&lt;key&gt;com.apple.security.app-sandbox&lt;/key&gt;</span><br><span class="line">	&lt;true/&gt;</span><br><span class="line">	&lt;key&gt;com.apple.security.cs.allow-jit&lt;/key&gt;</span><br><span class="line">	&lt;true/&gt;</span><br><span class="line">	&lt;key&gt;com.apple.security.network.server&lt;/key&gt;</span><br><span class="line">	&lt;true/&gt;</span><br><span class="line">	&lt;key&gt;com.apple.security.network.client&lt;/key&gt;</span><br><span class="line">	&lt;true/&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>

<p>以上代码在<code>http_server</code>分支。</p>
<p>最后还是要吐槽一下<code>flutter</code>的地狱嵌套，当然和我没有拆分组件有关系。。。看着脑袋疼。</p>
]]></content>
  </entry>
  <entry>
    <title>flutter--输入框TextField</title>
    <url>/post/flutterTextFieldWidget/</url>
    <content><![CDATA[<p>这个组件属性很多。。。<br>先看一下吧</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const TextField(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  TextEditingController controller,            //输入框的控制器</span><br><span class="line">  FocusNode focusNode,           //控制输入框是否获得焦点</span><br><span class="line">  InputDecoration decoration: const InputDecoration(),    //设置输入框的外观</span><br><span class="line">  TextInputType keyboardType,          //键盘类型</span><br><span class="line">  TextInputAction textInputAction,         //回车按钮的类型</span><br><span class="line">  TextCapitalization textCapitalization: TextCapitalization.none,    // 键盘大小写</span><br><span class="line">  TextStyle style,             //文本样式</span><br><span class="line">  StrutStyle strutStyle,</span><br><span class="line">  TextAlign textAlign: TextAlign.start,     //水平方向对齐方式</span><br><span class="line">  TextAlignVertical textAlignVertical,      //垂直方向对齐方式</span><br><span class="line">  TextDirection textDirection,           //文本书写顺序</span><br><span class="line">  bool readOnly: false,          //是否只读</span><br><span class="line">  bool showCursor,        //是否显示光标</span><br><span class="line">  bool autofocus: false,         //是否自动获得焦点</span><br><span class="line">  bool obscureText: false,     //是否隐藏正在输入的文本，内容显示为圆点</span><br><span class="line">  bool autocorrect: true,    //是否自动修正</span><br><span class="line">  int maxLines: 1,        //输入框的最大行数</span><br><span class="line">  int minLines,            //最小行数</span><br><span class="line">  bool expands: false,    //是否填充父级</span><br><span class="line">  int maxLength,             //文本最大长度</span><br><span class="line">  bool maxLengthEnforced: true,          //超过文本最大长度是否限制输入</span><br><span class="line">  ValueChanged&lt;String&gt; onChanged,      //输入文本时的回调</span><br><span class="line">  VoidCallback onEditingComplete,          //完成输入时触发（按回车）</span><br><span class="line">  ValueChanged&lt;String&gt; onSubmitted,        //完成输入时触发，接收当前输入文本为参数</span><br><span class="line">  List&lt;TextInputFormatter&gt; inputFormatters,      //指定输入格式</span><br><span class="line">  bool enabled,             //是否可用</span><br><span class="line">  double cursorWidth: 2.0,            //光标宽度</span><br><span class="line">  Radius cursorRadius,                //光标圆角</span><br><span class="line">  Color cursorColor,                      //光标颜色</span><br><span class="line">  Brightness keyboardAppearance,        //键盘色调，只在ios上有效</span><br><span class="line">  EdgeInsets scrollPadding: const EdgeInsets.all(20.0),   //当输入框获得焦点并且有一部分被滚动出屏外时，将自动滚动。</span><br><span class="line">  DragStartBehavior dragStartBehavior: DragStartBehavior.start,</span><br><span class="line">  bool enableInteractiveSelection,      //是否允许选中</span><br><span class="line">  GestureTapCallback onTap,            //点击回调</span><br><span class="line">  InputCounterWidgetBuilder buildCounter,</span><br><span class="line">  ScrollController scrollController,</span><br><span class="line">  ScrollPhysics scrollPhysics</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>先来一个最简单的demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">        home: Scaffold(</span><br><span class="line">            body: Center(</span><br><span class="line">              child: TextField(</span><br><span class="line"></span><br><span class="line">              )</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>屏幕中间一条线…点击获得焦点。<br><img src="1.png" alt="image.png"><br>接下来挨个属性看一下</p>
<h2 id="1、controller"><a href="#1、controller" class="headerlink" title="1、controller"></a>1、controller</h2><p>输入框文本发生改变时触发，但不限于这个功能。<br>先看demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">        home: Scaffold(</span><br><span class="line">            body: TextFieldDemo()</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TextFieldDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _TextFieldState createState() =&gt; new _TextFieldState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _TextFieldState extends State&lt;TextFieldDemo&gt; &#123;</span><br><span class="line">  TextEditingController _controller = TextEditingController();</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void initState() &#123;</span><br><span class="line">    _controller.addListener(() &#123;</span><br><span class="line">      print(_controller.text);</span><br><span class="line">    &#125;);</span><br><span class="line">    super.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Center(</span><br><span class="line">      child: TextField(</span><br><span class="line">        controller: _controller</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和前几个组件类似，但不相同，不只是一个状态值，而是有一个controller，并且在initState里监听文本变化。<br>是不是感觉和<code>onChange</code>重复了，继续往下看，除了监听文本变化，还有一些其他的功能。</p>
<h3 id="设置默认值"><a href="#设置默认值" class="headerlink" title="设置默认值"></a>设置默认值</h3><p>initState方法修改如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@override</span><br><span class="line">void initState() &#123;</span><br><span class="line">  _controller.text = &apos;default value&apos;;      //输入框的默认值</span><br><span class="line">  _controller.addListener(() &#123;</span><br><span class="line">    print(_controller.text);</span><br><span class="line">  &#125;);</span><br><span class="line">  super.initState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="清空输入框"><a href="#清空输入框" class="headerlink" title="清空输入框"></a>清空输入框</h3><p>initState方法修改如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@override</span><br><span class="line">void initState() &#123;</span><br><span class="line">  _controller.text = &apos;default value&apos;;</span><br><span class="line">  _controller.addListener(() &#123;</span><br><span class="line">    print(_controller.text);</span><br><span class="line">    _controller.clear();</span><br><span class="line">  &#125;);</span><br><span class="line">  super.initState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当输入框获得焦点时，会触发<code>_controller</code>这个时候调用<code>clear</code>方法会清空输入框。</p>
<h3 id="selection"><a href="#selection" class="headerlink" title="selection"></a>selection</h3><p>将initState方法修改如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void initState() &#123;</span><br><span class="line">  _controller.text = &apos;default value&apos;;</span><br><span class="line">  _controller.selection = TextSelection(</span><br><span class="line">    baseOffset: 3,</span><br><span class="line">    extentOffset: 5,</span><br><span class="line">    affinity: TextAffinity.upstream,</span><br><span class="line">    isDirectional: true</span><br><span class="line">  );</span><br><span class="line">  _controller.addListener(() &#123;</span><br><span class="line">    print(_controller.text);</span><br><span class="line">  &#125;);</span><br><span class="line">  super.initState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>baseOffset</code>和<code>extentOffset</code>配对使用，demo中的写法为从文本中第四个和第五个字符为选中状态。<br>另外的两个我不知道是干啥的。。。</p>
<h2 id="2、focusNode"><a href="#2、focusNode" class="headerlink" title="2、focusNode"></a>2、focusNode</h2><p>焦点控制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">/// This Widget is the main application widget.</span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  static const String _title = &apos;Flutter Code Sample&apos;;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: _title,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: const Text(_title)),</span><br><span class="line">        body: FocusNodeDemo(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class FocusNodeDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _FocusNodeState createState() =&gt; new _FocusNodeState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _FocusNodeState extends State&lt;FocusNodeDemo&gt; &#123;</span><br><span class="line">  FocusNode focusNode1 = new FocusNode();</span><br><span class="line">  FocusNode focusNode2 = new FocusNode();</span><br><span class="line">  FocusScopeNode focusScopeNode;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Container (</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          TextField(</span><br><span class="line">            //关联focusNode1</span><br><span class="line">            focusNode: focusNode1,     </span><br><span class="line">          ),</span><br><span class="line">          TextField(</span><br><span class="line">             //关联focusNode2</span><br><span class="line">            focusNode: focusNode2,             </span><br><span class="line">          ),</span><br><span class="line">          RaisedButton(</span><br><span class="line">            child: Text(&apos;移动焦点到1&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              //没有输入框获得焦点时初始值为null</span><br><span class="line">              if (focusScopeNode == null) &#123;</span><br><span class="line">                focusScopeNode = FocusScope.of(context);</span><br><span class="line">              &#125;</span><br><span class="line">              //focusNode1获得焦点</span><br><span class="line">              focusScopeNode.requestFocus(focusNode1);</span><br><span class="line">              //focusNode1和focusNode2焦点状态</span><br><span class="line">              print(focusNode1.hasFocus);</span><br><span class="line">              print(focusNode2.hasFocus);</span><br><span class="line">            &#125;</span><br><span class="line">          ),</span><br><span class="line">          RaisedButton(</span><br><span class="line">            child: Text(&apos;移动焦点到2&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">               //没有输入框获得焦点时初始值为null</span><br><span class="line">              if (focusScopeNode == null) &#123;</span><br><span class="line">                focusScopeNode = FocusScope.of(context);</span><br><span class="line">              &#125;</span><br><span class="line">              //focusNode2获得焦点</span><br><span class="line">              focusScopeNode.requestFocus(focusNode2);</span><br><span class="line">              //focusNode1和focusNode2焦点状态</span><br><span class="line">              print(focusNode1.hasFocus);</span><br><span class="line">              print(focusNode2.hasFocus);</span><br><span class="line">            &#125;</span><br><span class="line">          ),</span><br><span class="line">          RaisedButton(</span><br><span class="line">            child: Text(&apos;隐藏键盘&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              //focusNode1和focusNode2失去焦点</span><br><span class="line">              focusNode1.unfocus();</span><br><span class="line">              focusNode2.unfocus();</span><br><span class="line">            &#125;</span><br><span class="line">          ),</span><br><span class="line">          RaisedButton(</span><br><span class="line">            child: Text(&apos;焦点状态&apos;),</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              //focusNode1和focusNode2焦点状态</span><br><span class="line">              print(focusNode1.hasFocus);</span><br><span class="line">              print(focusNode2.hasFocus);</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        ]</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="2.png" alt="image.png"></p>
<p>输入框的焦点通过<code>FocusNode</code>和<code>focusScopeNode</code>控制，<code>focusScopeNode</code>可以通过<code>focusScope.of</code>方法来获取初始值，这个方法不会让元素获得焦点，<code>focusScopeNode.requestFocus</code>方法可以让元素获得焦点。<code>focusNode</code>还有一个<code>unFocus</code>方法，可以让输入框失去焦点，另外<code>focusNode</code>还有一个<code>hasFocus</code>属性，输入框获得焦点时为<code>true</code>，失去焦点时为<code>false</code>。</p>
<h2 id="3、decoration"><a href="#3、decoration" class="headerlink" title="3、decoration"></a>3、decoration</h2><p>先看一下constructor</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const InputDecoration(&#123;</span><br><span class="line">  Widget icon,         //输入框前的图标</span><br><span class="line">  String labelText,    //与placeholder类似，当输入框获得焦点时会缩小到左上角</span><br><span class="line">  TextStyle labelStyle,   //labelText的字体样式</span><br><span class="line">  String helperText,    //帮助类型文字提示在输入框下方，默认为灰色</span><br><span class="line">  TextStyle helperStyle,    //helperText的文字样式</span><br><span class="line">  String hintText,      //相当于html里的placeholder，当设置了labelText时输入框未获得焦点时不显示，获得焦点之后labelText缩小后会显示</span><br><span class="line">  TextStyle hintStyle,    //hintText文字样式</span><br><span class="line">  int hintMaxLines,      //hintText最大行数，如果文本超出这个最大行数后边会显示为...</span><br><span class="line">  String errorText,      //错误提示，和helperText位置相同，默认为红色</span><br><span class="line">  TextStyle errorStyle,  //helperText的文字样式</span><br><span class="line">  int errorMaxLines,    //errorText的最大行数，超出部分显示为...</span><br><span class="line">  bool hasFloatingPlaceholder: true,  //为false时，当输入框获得焦点labelText不会缩小到左上角，而是消失</span><br><span class="line">  bool isDense,</span><br><span class="line">  EdgeInsetsGeometry contentPadding,    //输入框内边距</span><br><span class="line">  Widget prefixIcon,        //输入框前缀图标</span><br><span class="line">  Widget prefix,              //输入框前缀</span><br><span class="line">  String prefixText,          //输入框前缀文本</span><br><span class="line">  TextString prefixStyle,    //前缀样式</span><br><span class="line">  Widget suffixIcon,        //后缀图标</span><br><span class="line">  Widget suffix,              //后缀文本</span><br><span class="line">  String suffixText,        //后缀</span><br><span class="line">  TextStyle suffixStyle,    //后缀样式</span><br><span class="line">  Widget counter,            //输入框右下方组件</span><br><span class="line">  String counterText,        //输入框右下方文本</span><br><span class="line">  TextStyle counterStyle,      //右下方文本样式</span><br><span class="line">  bool filled,                  //是否填充</span><br><span class="line">  Color fillColor,          //填充色（相当于背景色）</span><br><span class="line">  Color focusColor,    //</span><br><span class="line">  Color hoverColor,      //鼠标移入的填充色</span><br><span class="line">  InputBorder errorBorder,      //错误时的边框</span><br><span class="line">  InputBorder focusedBorder,    //获得焦点时边框</span><br><span class="line">  InputBorder focusedErrorBorder,    //错误并获得焦点时的边框</span><br><span class="line">  InputBorder disabledBorder,        //禁用时的边框</span><br><span class="line">  InputBorder enabledBorder,        //可用时的边框</span><br><span class="line">  InputBorder border,                //边框</span><br><span class="line">  bool enabled: true,              //是否可用  </span><br><span class="line">  String semanticCounterText,</span><br><span class="line">  bool alignLabelWithHint</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这里的属性都很简单，没啥细说的而且有很多都是重复的，只不过是在不同状态下和不同位置。没注释的暂时还没整明白是干啥的。</p>
<h2 id="4、keyboardType"><a href="#4、keyboardType" class="headerlink" title="4、keyboardType"></a>4、keyboardType</h2><p>输入框获得焦点时弹出键盘的类型。<br><code>number</code>、<code>phone</code>、<code>url</code>、<code>datetime</code>、<code>multiline</code>、<code>emailAddress</code>、<code>numberWithOptions()</code>、<code>visiblePassword</code>、<code>text</code><br>看着挺多，其实有好几个都是重复的，可能是为了语义化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">          child: TextField(</span><br><span class="line">            keyboardType: TextInputType.number,</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="3.png" alt="image.png"></p>
<h2 id="5、textInputAction"><a href="#5、textInputAction" class="headerlink" title="5、textInputAction"></a>5、textInputAction</h2><p>回车按钮的类型<br><code>continueAction</code>、<code>done</code>、<code>emergencyCall</code>、<code>go</code>、<code>join</code>、<code>newline</code>、<code>next</code>、<code>route</code>、<code>search</code>、<code>send</code>、<code>unspecified</code>、<code>none</code>、<code>previous</code><br><code>unspecified</code>和<code>newline</code>是回车，<code>none</code>和<code>previous</code>不知道干啥，android和ios都报错不支持，其他的值是什么按钮就显示什么</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">          child: TextField(</span><br><span class="line">            textInputAction: TextInputAction.send,</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="4.png" alt="image.png"></p>
<h2 id="6、textCapitalization"><a href="#6、textCapitalization" class="headerlink" title="6、textCapitalization"></a>6、textCapitalization</h2><p>配置平台键盘如何选择大写或小写键盘，只有文本键盘有效。<br><code>none</code>：默认键盘<br><code>characters</code>：大写键盘<br><code>sentences</code>：第一个字母大写<br><code>words</code>：单词首字母大写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">          child: TextField(</span><br><span class="line">            textCapitalization: TextCapitalization.words</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="5.png" alt="image.png"></p>
<h2 id="7、style"><a href="#7、style" class="headerlink" title="7、style"></a>7、style</h2><p>文本样式，这里不说了，之前的笔记有介绍。</p>
<h2 id="8、strutStyle"><a href="#8、strutStyle" class="headerlink" title="8、strutStyle"></a>8、strutStyle</h2><p>这个也不说了，看之前的笔记<a href="/post/flutterTextWidget">hello world和文本组件Text、TextSpan</a></p>
<h2 id="9、textAlign"><a href="#9、textAlign" class="headerlink" title="9、textAlign"></a>9、textAlign</h2><p>对齐方式<a href="/post/flutterTextWidget">hello world和文本组件Text、TextSpan</a></p>
<h2 id="10、TextAlignVertical"><a href="#10、TextAlignVertical" class="headerlink" title="10、TextAlignVertical"></a>10、TextAlignVertical</h2><p>垂直方向的对齐方式，有三个值<br><code>top</code>、<code>center</code>、<code>bottom</code><br>和css的<code>vertical-align</code>一个作用</p>
<h2 id="11、textDirection"><a href="#11、textDirection" class="headerlink" title="11、textDirection"></a>11、textDirection</h2><p>文本的书写顺序，不详细介绍了看之前的笔记<a href="/post/flutterTextWidget">hello world和文本组件Text、TextSpan</a></p>
<h2 id="12、readOnly"><a href="#12、readOnly" class="headerlink" title="12、readOnly"></a>12、readOnly</h2><p>是否只读，值为<code>boolean</code>类型，为<code>true</code>时只读，但是输入框可获得焦点。</p>
<h2 id="13、showCursor"><a href="#13、showCursor" class="headerlink" title="13、showCursor"></a>13、showCursor</h2><p>是否显示光标，值为<code>boolean</code>类型。</p>
<h2 id="14、autofocus"><a href="#14、autofocus" class="headerlink" title="14、autofocus"></a>14、autofocus</h2><p>是否自动获得焦点。</p>
<h2 id="15、obscureText"><a href="#15、obscureText" class="headerlink" title="15、obscureText"></a>15、obscureText</h2><p>是否密文，一般用于密码输入。</p>
<h2 id="16、autocorrect"><a href="#16、autocorrect" class="headerlink" title="16、autocorrect"></a>16、autocorrect</h2><p>是否自动修正输入的文本，默认为<code>true</code>。</p>
<h2 id="17、maxLines"><a href="#17、maxLines" class="headerlink" title="17、maxLines"></a>17、maxLines</h2><p>输入框的最当行数，默认为1，为<code>null</code>时不做限制。</p>
<h2 id="18、minLines"><a href="#18、minLines" class="headerlink" title="18、minLines"></a>18、minLines</h2><p>输入框最小行数，和<code>maxLines</code>同时使用，并且不能大于<code>maxLines</code>。</p>
<h2 id="19、expands"><a href="#19、expands" class="headerlink" title="19、expands"></a>19、expands</h2><p>是否调整输入框高度，以填充父级，<code>maxLines</code>和<code>minLines</code>必须为null。</p>
<h2 id="20、maxLength"><a href="#20、maxLength" class="headerlink" title="20、maxLength"></a>20、maxLength</h2><p>文本最大长度，输入框右下角有长度显示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">          child: TextField(</span><br><span class="line">            maxLength: 20</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="6.png" alt="image.png"></p>
<h2 id="21、maxLengthEnforced"><a href="#21、maxLengthEnforced" class="headerlink" title="21、maxLengthEnforced"></a>21、maxLengthEnforced</h2><p>文本长度超过最大长度是否限制输入，为false时不禁止输入，但是输入框会变红。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">          child: TextField(</span><br><span class="line">            maxLength: 5,</span><br><span class="line">            maxLengthEnforced: false</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="7.png" alt="image.png"></p>
<h2 id="22、onChanged"><a href="#22、onChanged" class="headerlink" title="22、onChanged"></a>22、onChanged</h2><p>文本输入回调</p>
<h2 id="23、onEditingComplete"><a href="#23、onEditingComplete" class="headerlink" title="23、onEditingComplete"></a>23、onEditingComplete</h2><p>文本输入完成时的回调，即按回车时的回调。</p>
<h2 id="24、onSubmitted"><a href="#24、onSubmitted" class="headerlink" title="24、onSubmitted"></a>24、onSubmitted</h2><p>文本输入完成的回调，当前输入的文本为参数。</p>
<h2 id="25、inputFormatters"><a href="#25、inputFormatters" class="headerlink" title="25、inputFormatters"></a>25、inputFormatters</h2><p>指定输入文本的格式，需要引入<code>package:flutter/services.dart</code>，值是<code>List</code>类型，可以有多个配置。<br><code>BlacklistingTextInputFormatter</code>：黑名单<br><code>WhitelistingTextInputFormatter</code>：白名单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line">import &apos;package:flutter/services.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: Center(</span><br><span class="line">          child: TextField(</span><br><span class="line">            inputFormatters: [</span><br><span class="line">              BlacklistingTextInputFormatter(RegExp(&quot;[abc]&quot;))</span><br><span class="line">            ],</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将<code>abc</code>添加黑名单，禁止输入。</p>
<h2 id="26、enabled"><a href="#26、enabled" class="headerlink" title="26、enabled"></a>26、enabled</h2><p>是否可用，为<code>false</code>时不可用，输入框不能获得焦点。</p>
<h2 id="27、cursorWidth"><a href="#27、cursorWidth" class="headerlink" title="27、cursorWidth"></a>27、cursorWidth</h2><p>光标宽度，默认是2.0。</p>
<h2 id="28、cursorRadius"><a href="#28、cursorRadius" class="headerlink" title="28、cursorRadius"></a>28、cursorRadius</h2><p>光标圆角。</p>
<h2 id="29、cursorColor"><a href="#29、cursorColor" class="headerlink" title="29、cursorColor"></a>29、cursorColor</h2><p>光标颜色</p>
<h2 id="30、keyboardAppearance"><a href="#30、keyboardAppearance" class="headerlink" title="30、keyboardAppearance"></a>30、keyboardAppearance</h2><p>键盘色调，<code>Brightness.light</code>为亮色，<code>Brightness.dark</code>为暗，只在<code>ios</code>上有效。</p>
<h2 id="31、scrollPadding"><a href="#31、scrollPadding" class="headerlink" title="31、scrollPadding"></a>31、scrollPadding</h2><p>当输入框获得焦点，并有一部分滚动到可视区之外时，自动将输入框滚动到可视区之内。</p>
<h2 id="32、dragStartBehavior"><a href="#32、dragStartBehavior" class="headerlink" title="32、dragStartBehavior"></a>32、dragStartBehavior</h2><p>好像和拖动有关，还没整明白怎么用。</p>
<h2 id="33、enableInteractiveSelection"><a href="#33、enableInteractiveSelection" class="headerlink" title="33、enableInteractiveSelection"></a>33、enableInteractiveSelection</h2><p>输入的文本属否允许选中，默认为<code>true</code>，为<code>false</code>时不能选中。</p>
<h2 id="34、onTap"><a href="#34、onTap" class="headerlink" title="34、onTap"></a>34、onTap</h2><p>点击的回调。</p>
<h2 id="35、buildCounter"><a href="#35、buildCounter" class="headerlink" title="35、buildCounter"></a>35、buildCounter</h2><p>没看明白怎么用。</p>
<h2 id="36、scrollController-amp-scrollPhysics"><a href="#36、scrollController-amp-scrollPhysics" class="headerlink" title="36、scrollController &amp; scrollPhysics"></a>36、scrollController &amp; scrollPhysics</h2><p>这两个放一起是因为不知道怎么用，看文档<code>scrollController</code>是创建一个滚动控制器，<code>scrollPhysics</code>是对滚动的物理特性做处理，应该是可以控制滚动惯性、滚动回弹的东西。</p>
]]></content>
  </entry>
  <entry>
    <title>flutter--单选框Radio、RadioListTile</title>
    <url>/post/flutterRadioWidget/</url>
    <content><![CDATA[<p>之前学习了复选框和开关，还有个单选框，这里看一下。</p>
<h2 id="一、Radio"><a href="#一、Radio" class="headerlink" title="一、Radio"></a>一、Radio</h2><p>还是先看constructor</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Radio&lt;T&gt;(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  @required T value,</span><br><span class="line">  @required T groupValue,</span><br><span class="line">  @required ValueChanged&lt;T&gt; onChanged,</span><br><span class="line">  Color activeColor,</span><br><span class="line">  MaterialTapTargetSize materialTapTargetSize</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这个Widget的constructor很简单，这几个属性前边都介绍过，怎么用看demo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: RadioDemo()</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum SingingCharacter &#123; lafayette, jefferson &#125;</span><br><span class="line"></span><br><span class="line">class RadioDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _RadioDemoState createState() =&gt; new _RadioDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _RadioDemoState extends State&lt;RadioDemo&gt; &#123;</span><br><span class="line">  SingingCharacter _character = SingingCharacter.lafayette;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      padding: EdgeInsets.only(top: 20.0),</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Radio(</span><br><span class="line">            value: SingingCharacter.lafayette,</span><br><span class="line">            groupValue: _character,</span><br><span class="line">            activeColor: Colors.red,</span><br><span class="line">            onChanged: (SingingCharacter value) &#123;</span><br><span class="line">              print(value);</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                _character = value;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          Radio(</span><br><span class="line">            value: SingingCharacter.jefferson,</span><br><span class="line">            groupValue: _character,</span><br><span class="line">            onChanged: (SingingCharacter value) &#123;</span><br><span class="line">              print(value);</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                _character = value;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        ]</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有点陌生的东西，接下来看一下。</p>
<h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><p>枚举类型。<br>官方文档挺详细的<a href="http://dart.goodev.org/guides/language/language-tour" target="_blank" rel="noopener">http://dart.goodev.org/guides/language/language-tour</a><br>这里就不详细说了</p>
<h3 id="Column"><a href="#Column" class="headerlink" title="Column"></a>Column</h3><p>这里简单介绍一下，后边再详细说，这个Widget可以简单的理解成列表类似于html里边的<code>ul</code>，子节点是<code>children</code>一组Widget。</p>
<h3 id="T"><a href="#T" class="headerlink" title="T"></a>T</h3><p>看constructor的时候应该就发现了，多了个<code>&lt;T&gt;</code>，这个是泛型，<code>&lt;&gt;</code>里边是数据类型，例如想定义一个<code>List</code>里边只能放<code>String</code>,可以这样写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str = new List&lt;String&gt;();</span><br></pre></td></tr></table></figure>

<p>这里<code>T</code>是备用类型，实际上就是一个占位符。</p>
<h2 id="二、RadioListTile"><a href="#二、RadioListTile" class="headerlink" title="二、RadioListTile"></a>二、RadioListTile</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const RadioListTile&lt;T&gt;(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  @required T value,</span><br><span class="line">  @required T groupValue,</span><br><span class="line">  @required ValueChanged&lt;T&gt; onChanged,</span><br><span class="line">  Color activeColor,</span><br><span class="line">  Widget title,</span><br><span class="line">  Widget subtitle,</span><br><span class="line">  bool isThreeLine: false,</span><br><span class="line">  bool dense,</span><br><span class="line">  Widget secondary,</span><br><span class="line">  bool selected: false,</span><br><span class="line">  ListTitleControlAffinity controlAffinity: ListTileControlAffinity.platform</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: RadioDemo()</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum SingingCharacter &#123; lafayette, jefferson &#125;</span><br><span class="line"></span><br><span class="line">class RadioDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _RadioDemoState createState() =&gt; new _RadioDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _RadioDemoState extends State&lt;RadioDemo&gt; &#123;</span><br><span class="line">  SingingCharacter _character = SingingCharacter.lafayette;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Center(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          RadioListTile&lt;SingingCharacter&gt;(</span><br><span class="line">            value: SingingCharacter.lafayette,</span><br><span class="line">            title: Text(&apos;lafayette&apos;),</span><br><span class="line">            groupValue: _character,</span><br><span class="line">            activeColor: Colors.red,</span><br><span class="line">            onChanged: (SingingCharacter value) &#123;</span><br><span class="line">              print(value);</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                _character = value;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          RadioListTile&lt;SingingCharacter&gt;(</span><br><span class="line">            value: SingingCharacter.jefferson,</span><br><span class="line">            title: Text(&apos;jefferson&apos;),</span><br><span class="line">            groupValue: _character,</span><br><span class="line">            onChanged: (SingingCharacter value) &#123;</span><br><span class="line">              print(value);</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                _character = value;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        ]</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和单独的<code>Radio</code>相比基本上没啥区别。<br>相对于<code>Radio</code>多出来的属性看这里：<a href="/post/flutterCheckWidget">复选框CheckBox、CheckboxListTile</a><br><code>CheckboxList</code>里边已经详细说过了。</p>
]]></content>
  </entry>
  <entry>
    <title>flutter--单选开关Switch、SwitchListTile</title>
    <url>/post/flutterSwitchWidget/</url>
    <content><![CDATA[<h2 id="一、Switch"><a href="#一、Switch" class="headerlink" title="一、Switch"></a>一、Switch</h2><p>先看一下<code>Switch</code>的<code>constructor</code></p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Switch(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  @required bool value,</span><br><span class="line">  @required ValueChanged&lt;bool&gt; onChanged,</span><br><span class="line">  Color activeColor,</span><br><span class="line">  Color activeTrackColor,</span><br><span class="line">  Color inactiveThumbColor,</span><br><span class="line">  Color inactiveTrackColor,</span><br><span class="line">  ImageProvider activeThumbImage,</span><br><span class="line">  ImageProvider inactiveThumbImage,</span><br><span class="line">  MaterialTapTargetSize materialTapTargetSize,</span><br><span class="line">  DragStartBehavior dragStartBehavior: DragStartBehavior.start</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>怎么用看demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: SwitchDemo()</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SwitchDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _SwitchDemoState createState() =&gt; new _SwitchDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _SwitchDemoState extends State&lt;SwitchDemo&gt; &#123;</span><br><span class="line">  bool _switchSelected = false;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      child: Switch(</span><br><span class="line">        value: _switchSelected,</span><br><span class="line">        onChanged: (value) &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _switchSelected = value;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看见模拟器中心有个蓝色的小开关，点击可以改变状态，这是最基础的用法。<br>这里需要注意的是<code>value</code>只能是<code>bool</code>类型，并且写死之后点击开关是没有效果的。</p>
<h3 id="activeColor-amp-activeTrackColor-amp-inactiveThumbColor-amp-inactiveTrackColor"><a href="#activeColor-amp-activeTrackColor-amp-inactiveThumbColor-amp-inactiveTrackColor" class="headerlink" title="activeColor &amp; activeTrackColor &amp; inactiveThumbColor &amp; inactiveTrackColor"></a>activeColor &amp; activeTrackColor &amp; inactiveThumbColor &amp; inactiveTrackColor</h3><p>先看一下这几个颜色，<code>active</code>对应开关打开，也就是<code>value</code>为<code>true</code>的状态，<code>inactive</code>对应开关关闭，<code>value</code>为<code>false</code>的状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(</span><br><span class="line">  value: _switchSelected,</span><br><span class="line">  activeColor: Colors.red,</span><br><span class="line">  activeTrackColor: Colors.yellow,</span><br><span class="line">  inactiveThumbColor: Colors.green,</span><br><span class="line">  inactiveTrackColor: Colors.purple,</span><br><span class="line">  onChanged: (value) &#123;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    _switchSelected = value;</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt="image.png"><br><img src="2.png" alt="image.png"></p>
<h3 id="activeThumbImage-amp-inactiveThumbImage"><a href="#activeThumbImage-amp-inactiveThumbImage" class="headerlink" title="activeThumbImage &amp; inactiveThumbImage"></a>activeThumbImage &amp; inactiveThumbImage</h3><p>这两个放一起，开关圆点的图片，和颜色一样<code>active、inactive</code>对应开关的两种状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Switch(</span><br><span class="line">  value: _switchSelected,</span><br><span class="line">  activeThumbImage: AssetImage(&apos;./images/logo.png&apos;),</span><br><span class="line">  inactiveThumbImage: AssetImage(&apos;./images/logo.png&apos;),</span><br><span class="line">  onChanged: (value) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _switchSelected = value;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>同一张图片，为啥不放两个不同的图片，因为我懒。<br><img src="3.png" alt="image.png"><br><img src="4.png" alt="image.png"></p>
<h3 id="materialTapTargetSize"><a href="#materialTapTargetSize" class="headerlink" title="materialTapTargetSize"></a>materialTapTargetSize</h3><p>有效点击区域的大小，在<a href="/post/flutterButtonWidget">按钮 各种Button</a>介绍过</p>
<h3 id="dragStartBehavior"><a href="#dragStartBehavior" class="headerlink" title="dragStartBehavior"></a>dragStartBehavior</h3><p>这个需要注意一下，直接写会报错<code>undefind</code>，需要<code>import &#39;package:flutter/gestures.dart&#39;;</code>。<br>看一下完整demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line">import &apos;package:flutter/gestures.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: SwitchDemo()</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SwitchDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _SwitchDemoState createState() =&gt; new _SwitchDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _SwitchDemoState extends State&lt;SwitchDemo&gt; &#123;</span><br><span class="line">  bool _switchSelected = false;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      child: Switch(</span><br><span class="line">        value: _switchSelected,</span><br><span class="line">        dragStartBehavior: DragStartBehavior.down,</span><br><span class="line">        onChanged: (value) &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _switchSelected = value;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以设置成<code>start</code>或者<code>down</code>。<br>源码里边对这个的解释是设置为<code>start</code>的时候拖拽会在开始拖动时开始触发，设置为<code>down</code>则在手指按下时开始触发，区别是<code>start</code>动画更平滑，<code>down</code>反应更灵敏。<br>试了一下，<code>start</code>和<code>down</code>并没有看出有什么区别。。。</p>
<h2 id="二、SwitchListTile"><a href="#二、SwitchListTile" class="headerlink" title="二、SwitchListTile"></a>二、SwitchListTile</h2><p>先看一下<code>constructor</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Switch(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  @required bool value,</span><br><span class="line">  @required ValueChanged&lt;bool&gt; onChanged,</span><br><span class="line">  Color activeColor,</span><br><span class="line">  Color activeTrackColor,</span><br><span class="line">  Color inactiveThumbColor,</span><br><span class="line">  Color inactiveTrackColor,</span><br><span class="line">  ImageProvider activeThumbImage,</span><br><span class="line">  ImageProvider inactiveThumbImage,</span><br><span class="line">  Widget title,</span><br><span class="line">  Widget subtitle,  </span><br><span class="line">  bool isThreeLine: false,</span><br><span class="line">  bool dense,   </span><br><span class="line">  Widget secondary,  </span><br><span class="line">  bool selected: false,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>SwitchListTile</code>一部分和<code>Switch</code>是重合的，另一部分和<code>CheckboxList</code>是重合的（忘了的话看这里：<a href="/post/flutterCheckWidget">复选框CheckBox、CheckboxListTile</a><br>）。。。这里就不重复了。</p>
]]></content>
  </entry>
  <entry>
    <title>flutter--复选框CheckBox、CheckboxListTile</title>
    <url>/post/flutterCheckWidget/</url>
    <content><![CDATA[<p><code>CheckBox</code>继承自<code>StatelessWidget</code>，是个无状态组件，本身不会保存状态，所以需要一个有状态的父组件用来保存这个状态。</p>
<a id="more"></a>
<h2 id="一、CheckBox"><a href="#一、CheckBox" class="headerlink" title="一、CheckBox"></a>一、CheckBox</h2><p>先看constructor</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CheckBox(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  @required bool value,                  //复选框的值</span><br><span class="line">  bool tristate: false,                     //为true时复选框会多一个值为null的状态，复选框内显示为横线</span><br><span class="line">  @required ValueChanged&lt;bool&gt; onChanged,    //点击复选框的回调</span><br><span class="line">  Color activeColor,                      //选中时复选框的颜色</span><br><span class="line">  Color checkColor,                      //选中时对号的颜色</span><br><span class="line">  MaterialTapTargetSize materialTapTargetSize    //有效点击区域的大小</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>看demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: CheckboxDemo()</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CheckboxDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _CheckboxDemoState createState() =&gt; new _CheckboxDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _CheckboxDemoState extends State&lt;CheckboxDemo&gt; &#123;</span><br><span class="line">  bool _checkboxSelected = false;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      child: Checkbox(</span><br><span class="line">        value: _checkboxSelected,</span><br><span class="line">        activeColor: Colors.red,</span><br><span class="line">        checkColor: Colors.yellow,</span><br><span class="line">        tristate: true,</span><br><span class="line">        onChanged:(value)&#123;</span><br><span class="line">          print(value);</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _checkboxSelected=value;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; ,</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>屏幕正中间一个小方块，就是<code>Checkbox</code>。<br>这个比较简单，<code>Color</code>已经很熟练了，基本上大部分可视组件都有，一个<code>value</code>还有个<code>onChanged</code>回调。</p>
<p><code>tristate</code>之前没见过，值为<code>false</code>的时候，复选框有两种状态，对应两个值<code>true</code>和<code>false</code>；值为<code>true</code>的时候有三种状态，对应三个值<code>true</code>、<code>null</code>、<code>false</code>。</p>
<p>这里用了有状态组件<code>StatefulWidget</code>作为父组件，又在父组件里创建了state，状态有子组件管理，在<code>onChanged</code>事件里<code>setState</code>改变状态，这里和<code>react</code>很像。</p>
<p>上边已经用了<code>value、onChanged</code>接下来看一下<code>Switch</code>的其他属性。<br>一个复选框就这么写完了，但是不能就放一个框啊，要有文字，没有文字谁知道这个框选中是要干啥，有可能还需要个图标，后边学了布局用<code>flex</code>很容易可以实现。<br>有人说我不想每次都重复写这么个布局，虽然不多但是每次都一样写着烦，<code>flutter</code>在这里体现出了人性化，提供了一个可以带文字和图标的复选框组件<code>CheckboxListTile</code>。</p>
<h2 id="二、CheckboxListTile"><a href="#二、CheckboxListTile" class="headerlink" title="二、CheckboxListTile"></a>二、CheckboxListTile</h2><p>先来看一下constructor</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const CheckboxListTitle(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  @required bool value,</span><br><span class="line">  @required ValueChanged&lt;bool&gt; onChanged,</span><br><span class="line">  Color activeColor,</span><br><span class="line">  Widget title,                    //复选框的主标题</span><br><span class="line">  Widget subtitle,                  //复选框的副标题</span><br><span class="line">  bool isThreeLine: false,          //文字是否为三行</span><br><span class="line">  bool dense,                        //是否为垂直密集列表的一部分</span><br><span class="line">  Widget secondary,                //图标</span><br><span class="line">  bool selected: false,              //文字和图标颜色是否为选中的颜色(activeColor)</span><br><span class="line">  ListTileControlAffinity controlAffinity: ListTileControlAffinity.platform    //文字、图标、复选框的排列顺序</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>看一下demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: CheckboxDemo()</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CheckboxDemo extends StatefulWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  _CheckboxDemoState createState() =&gt; new _CheckboxDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _CheckboxDemoState extends State&lt;CheckboxDemo&gt; &#123;</span><br><span class="line">  bool _checkboxSelected = false;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Center(</span><br><span class="line">      child: CheckboxListTile(</span><br><span class="line">        value: _checkboxSelected,</span><br><span class="line">        title: Text(&apos;this is title&apos;),</span><br><span class="line">        subtitle: Text(&apos;this is subtitle&apos;),</span><br><span class="line">        activeColor: Colors.red,</span><br><span class="line">        dense: true,</span><br><span class="line">        selected: true,</span><br><span class="line">        isThreeLine: false,</span><br><span class="line">        secondary: Icon(Icons.book),</span><br><span class="line">        controlAffinity: ListTileControlAffinity.leading,</span><br><span class="line">        onChanged:(value)&#123;</span><br><span class="line">          print(value);</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _checkboxSelected=value;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; ,</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重复的就不说了。</p>
<h3 id="title-amp-subtitle"><a href="#title-amp-subtitle" class="headerlink" title="title &amp; subtitle"></a>title &amp; subtitle</h3><p>这两个放一起，都是复选框的文字描述，一主一次。</p>
<h3 id="dense"><a href="#dense" class="headerlink" title="dense"></a>dense</h3><p>如果为<code>true</code>，表示这个复选框是一个列表的一部分，会缩小字体。<br>为<code>false</code>时则是默认大小</p>
<h3 id="isThreeLine"><a href="#isThreeLine" class="headerlink" title="isThreeLine"></a>isThreeLine</h3><p>是否为三行，这是个坑。<br>首先要搭配<code>subtitle</code>使用，没有<code>subtitle</code>的话报错。<br>然后就是这个坑了，不是文字以三行显示，而是告诉程序，我现在的文字(<code>title</code>)是不是有三行。。。<br><code>title</code>只有一行<br><code>isThreeLine</code>为<code>false</code><br><img src="1.png" alt="image.png"><br><code>isThreeLine</code>为<code>true</code><br><img src="2.png" alt="image.png"><br>可以看到为<code>false</code>的时候，文字会垂直局中，为<code>true</code>的时候，文字偏上，这是因为告诉程序这段文字有三行，会把三行文字整体垂直居中显示，这就造成了上边的情况。<br><code>title</code>为三行<br><code>isThreeLine</code>为<code>false</code><br><img src="3.png" alt="image.png"><br><code>isThreeLine</code>为<code>true</code><br><img src="4.png" alt="image.png"><br>可以看到显示上并没有什么区别，这是因为设置为<code>true</code>的时候，告诉了程序这是三行文字，会居中显示，为<code>false</code>的时候实际上是把整个<code>CheckboxListTile</code>的区域撑满，居中不居中并没有什么区别。</p>
<p><code>title</code>为两行和一行的情况显示是相同的，最多就是三行，超过三行的文字不会显示，会被剪切。<br>实际上<code>isThreeLine</code>是设置<code>title</code>和<code>subtitle</code>同时存在时文字在垂直方向的显示方式。</p>
<h3 id="secondary"><a href="#secondary" class="headerlink" title="secondary"></a>secondary</h3><p>图标，可以不设置。</p>
<h3 id="controlAffinity"><a href="#controlAffinity" class="headerlink" title="controlAffinity"></a>controlAffinity</h3><p>复选框、文字、图标的排列顺序，有三个值。<br><code>leading</code>：复选框在前，文字在中间图标在最后。<br><code>trailing</code>：复选框在后，文字在中间图标在前。<br><code>platform</code>：这个是根据不同平台的默认情况自己调整。</p>
<p><code>CheckBox</code>和<code>CheckboxListTile</code>相对其他组件来说简单一点，但是这里涉及到了<code>StatefulWidget</code>，在之前的笔记里没出现过，需要仔细想一下。</p>
]]></content>
  </entry>
  <entry>
    <title>flutter--按钮 各种Button</title>
    <url>/post/flutterButtonWidget/</url>
    <content><![CDATA[<p>flutter提供了以下几种按钮<br><code>RaisedButton 、OutlineButton 、FlatButton 、IconButton 、FloatingActionButton 、MaterialButton</code> 。  </p>
<a id="more"></a>
<p>其中<code>IconButton</code>在<a href="/post/flutterIconWidget">图标Icon</a>里已经说过了，这里就不重复了。<br>接下来挨个看一下。</p>
<h2 id="一、MaterialButton"><a href="#一、MaterialButton" class="headerlink" title="一、MaterialButton"></a>一、MaterialButton</h2><p>悬浮按钮自带灰色背景和灰色阴影，按下时阴影变大。<br>首先还是看一下<code>constructor</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const MaterialButton(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  @required VoidCallback onPressed,              //点击按钮的回调函数</span><br><span class="line">  ValueChanged&lt;bool&gt; onHighlightChanged,         //高亮变化的回调</span><br><span class="line">  ButtonTextTheme textTheme,                     //按钮的字体主题</span><br><span class="line">  Color textColor,                               //字体颜色</span><br><span class="line">  Color disabledTextColor,                      //禁用时的字体颜色</span><br><span class="line">  Color color,                                  //按钮背景色</span><br><span class="line">  Color disabledColor,                          //禁用时的背景色</span><br><span class="line">  Color focusColor,                              //联动节点获得焦点时的颜色</span><br><span class="line">  Color hoverColor,                              //鼠标悬停时的颜色</span><br><span class="line">  Color highlightColor,                          //按下背景颜色（长按，不是点击）</span><br><span class="line">  Color splashColor,                            //水波纹颜色</span><br><span class="line">  Brightness colorBrightness,                   //按钮亮度</span><br><span class="line">  double elevation,                              //阴影尺寸</span><br><span class="line">  double focusElevation,                        //联动节点获得焦点时的阴影尺寸</span><br><span class="line">  double hoverElevation,                        //鼠标悬停时阴影尺寸</span><br><span class="line">  double highlightElevation,                    //长按阴影尺寸</span><br><span class="line">  double disabledElevation,                    //禁用时的阴影尺寸</span><br><span class="line">  EdgeInsetsGeometry padding,                  //内边距</span><br><span class="line">  ShapeBorder shape,                            //按钮的形状</span><br><span class="line">  Clip clipBehavior: Clip.none,                //裁剪</span><br><span class="line">  FocusNode focusNode,                         //联动节点</span><br><span class="line">  MaterialTapTargetSize materialTapTargetSize,  //有效的点击区域大小</span><br><span class="line">  Duration animationDuration,                  //动画时间  </span><br><span class="line">  double minWidth,                              //最小宽</span><br><span class="line">  double hight,                                //高度</span><br><span class="line">  Widget child                                  //子节点</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>下面看demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Flutter Demo&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: new Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: new MaterialButton(</span><br><span class="line">            child: new Text(&apos;Button&apos;),</span><br><span class="line">            textTheme: ButtonTextTheme.primary,</span><br><span class="line">            textColor: Colors.red,</span><br><span class="line">            highlightColor: Colors.yellow,</span><br><span class="line">            color: Colors.green,</span><br><span class="line">            splashColor: Colors.purple,</span><br><span class="line">            elevation: 10.0,</span><br><span class="line">            highlightElevation: 20.0,</span><br><span class="line">            padding: EdgeInsets.all(20.0),</span><br><span class="line">            onHighlightChanged: (data) &#123;</span><br><span class="line">              print(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              print(1);</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个花里胡哨的按钮，下面挨个属性看一下，看效果的话不要像上边一样同时写太多，建议每次只写一个。</p>
<h3 id="onPressed"><a href="#onPressed" class="headerlink" title="onPressed"></a>onPressed</h3><p>这个没啥说的，按钮的回调，手指抬起时触发，点击或者长按都会触发。<br><code>********特别提醒，值为null的时候，按钮为禁用状态。</code></p>
<h3 id="onHighlightChanged"><a href="#onHighlightChanged" class="headerlink" title="onHighlightChanged"></a>onHighlightChanged</h3><p>和<code>onPressed</code>不同，这个按下按钮和松开按钮都会触发，有一个参数，按下为true，松开为false。</p>
<h3 id="textTheme"><a href="#textTheme" class="headerlink" title="textTheme"></a>textTheme</h3><p>有三个值<br><code>normal</code>：没看出来有啥效果。<br><code>primary</code>：没看出来有啥效果+1。<br><code>accent</code>：字体变成了主题同一颜色。  </p>
<h3 id="textColor"><a href="#textColor" class="headerlink" title="textColor"></a>textColor</h3><p>字体颜色，如果<code>Text</code>的<code>style</code>设置了<code>color</code>，则显示为<code>Text</code>设置的值。</p>
<h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><p>背景色</p>
<h3 id="focusColor-amp-focusElevation-amp-focusNode"><a href="#focusColor-amp-focusElevation-amp-focusNode" class="headerlink" title="focusColor &amp; focusElevation &amp; focusNode"></a>focusColor &amp; focusElevation &amp; focusNode</h3><p>还没试，看文档的意思是需要一个联动元素，比如输入框，获得焦点的时候按钮改变状态。</p>
<h3 id="disabledTextColor-amp-disabledTextColor-amp-disabledElevation"><a href="#disabledTextColor-amp-disabledTextColor-amp-disabledElevation" class="headerlink" title="disabledTextColor &amp; disabledTextColor &amp; disabledElevation"></a>disabledTextColor &amp; disabledTextColor &amp; disabledElevation</h3><p>禁用时按钮的状态，不挨个说了，和非禁用状态写法一样。<br><code>按钮是否禁用，没有单独的属性，看onPressed，如果为null，或者不写onPressed则为禁用。</code></p>
<h3 id="hoverColor"><a href="#hoverColor" class="headerlink" title="hoverColor"></a>hoverColor</h3><p>推测是桌面端和web端用的，移动端不知道怎么触发hover。</p>
<h3 id="highlightColor"><a href="#highlightColor" class="headerlink" title="highlightColor"></a>highlightColor</h3><p>按钮按下的背景色，不是点击是长按。</p>
<h3 id="splashColor"><a href="#splashColor" class="headerlink" title="splashColor"></a>splashColor</h3><p>水波纹的颜色，这个是点击</p>
<h3 id="colorBrightness"><a href="#colorBrightness" class="headerlink" title="colorBrightness"></a>colorBrightness</h3><p>亮度有两个值：<br><code>Brightness.light</code>：默认的状态，文字黑色，<code>splashColor&amp;highlightColor</code>都是灰色。<br><code>Brightness.dark</code>：文字白色，<code>splashColor&amp;highlightColor</code>变亮了？？？<br>你没看错，是不是写反了，这是个bug？<br>这不是个bug，这里的<code>colorBrightness</code>是整个主题的亮度，当app主题亮度为<code>Brightness.light</code>的时候，在这里也设成<code>light</code>，按钮会变暗；相反如果主题亮度为<code>Brightness.dark</code>，这里也设成<code>dark</code>，按钮会变亮。<br>这是个坑。。。从字面意思来看，谁能看出来这是主题亮度。  </p>
<h3 id="elevation-amp-highlightElevation"><a href="#elevation-amp-highlightElevation" class="headerlink" title="elevation &amp; highlightElevation"></a>elevation &amp; highlightElevation</h3><p>double类型，阴影和按下按钮状态下的阴影尺寸。</p>
<h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><p>这个之前介绍过，就不重复了。</p>
<h3 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h3><p>基于<code>ShapeBorder</code>的类有四个，下面看一下这四个类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//圆形</span><br><span class="line">const CircleBorder(&#123;</span><br><span class="line">  BorderSide side: BorderSide.none</span><br><span class="line">&#125;)</span><br><span class="line">//斜角（了解过机械的话可以理解成倒角）</span><br><span class="line">const BeveledRectangleBorder(&#123;</span><br><span class="line">  BorderSide side: BorderSide.none,</span><br><span class="line">  BorderRadiusGeometry borderRadius: BorderRadius.zero</span><br><span class="line">&#125;)</span><br><span class="line">//圆角</span><br><span class="line">const RoundedRectangleBorder(&#123;</span><br><span class="line">  BorderSide side: BorderSide.none,</span><br><span class="line">  BorderRadiusGeometry borderRadius: BorderRadius.zero</span><br><span class="line">&#125;)</span><br><span class="line">//也是圆角，但是和RoundedRectangleBorder不同，有最大值，超过最大值以最大值显示。</span><br><span class="line">const ContinuousRectangleBorder(&#123;</span><br><span class="line">  BorderSide side: BorderSide.none,</span><br><span class="line">  BorderRadiusGeometry borderRadius: BorderRadius.zero</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>可以看见，除了<code>CircleBorder</code>其他三个都是一样的，为啥这个特殊，少了个属性？<br>因为<code>CircleBorder</code>是设置按钮为圆形，<code>borderRadius</code>是圆角，根本不需要。。。<br>下面看一下怎么用：<br><code>borderRadius</code>之前的笔记介绍过<a href="/post/flutterContainerWidget">容器组件Container</a>，这里就不重复了，看一下demo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new RaisedButton(</span><br><span class="line">  child: new Text(&apos;button&apos;),</span><br><span class="line">  color: Colors.grey[200],</span><br><span class="line">  shape: ContinuousRectangleBorder(</span><br><span class="line">    borderRadius: BorderRadius.circular(10.0),</span><br><span class="line">   ),</span><br><span class="line">   onPressed: () &#123;</span><br><span class="line">     print(1);</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这样就给按钮加了圆角。<br>下面看一下<code>BorderSide</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const BorderSide(&#123;</span><br><span class="line">  Color color: const Color(0xFF000000),</span><br><span class="line">  double width: 1.0,</span><br><span class="line">  BorderStyle style: BorderStyle.solid</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这个就比较简单了，之前的也都介绍过这几个属性。</p>
<h3 id="clipBehavior"><a href="#clipBehavior" class="headerlink" title="clipBehavior"></a>clipBehavior</h3><p>裁剪，有四个值<code>antiAlias、antiAliasWithSaveLayer 、hardEdge、none</code>，都是对边缘的处理，看文档说<code>antiAlias</code>处理速度要比<code>antiAliasWithSaveLayer</code>快，但是要比<code>hardEdge</code>慢，还没整明白怎么用，以后补充。</p>
<h3 id="materialTapTargetSize"><a href="#materialTapTargetSize" class="headerlink" title="materialTapTargetSize"></a>materialTapTargetSize</h3><p><code>padded</code>：有效点击区域最小为<code>48px * 48px</code>。<br><code>shrinkWrap</code>：可点击组件的大小。</p>
<h3 id="animationDuration"><a href="#animationDuration" class="headerlink" title="animationDuration"></a>animationDuration</h3><p>设置<code>shape</code>和<code>elevation</code>的动画时间，看一下怎么用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new MaterialButton(</span><br><span class="line">  child: new Text(&apos;button&apos;),</span><br><span class="line">  color: Colors.grey[200],</span><br><span class="line">  animationDuration: new Duration(seconds: 10),</span><br><span class="line">  highlightElevation: 200.0,</span><br><span class="line">  textTheme: ButtonTextTheme.accent,</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    print(1);</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这里为了效果明显值写的都比较大，按住按钮不要松手可以看到阴影逐渐变大。<br><code>Duration</code>不只可以写<code>seconds</code>，<code>days、hours、minutes、seconds、milliseconds、microseconds</code>都可以。<br>想不出来在什么情况下一个动画会以天为时间单位。。。</p>
<h3 id="minWidth-amp-height"><a href="#minWidth-amp-height" class="headerlink" title="minWidth &amp; height"></a>minWidth &amp; height</h3><p>最小宽度和高度。</p>
<h3 id="child"><a href="#child" class="headerlink" title="child"></a>child</h3><p>子节点。</p>
<h2 id="二、OutlineButton"><a href="#二、OutlineButton" class="headerlink" title="二、OutlineButton"></a>二、OutlineButton</h2><p>默认有一个边框，不带阴影且背景透明。按下后，边框颜色会变亮、同时出现背景和阴影(较弱)。<br>看一下<code>constructor</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const OutlineButton(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  @required VoidCallback onPressed,</span><br><span class="line">  ButtonTextTheme textTheme,</span><br><span class="line">  Color textColor,     </span><br><span class="line">  Color disabledTextColor,    </span><br><span class="line">  Color color,  </span><br><span class="line">  Color focusColor,  </span><br><span class="line">  Color hoverColor,   </span><br><span class="line">  Color highlightColor,</span><br><span class="line">  Color splashColor,  </span><br><span class="line">  double highlightElevation,</span><br><span class="line">  BorderSide borderSide,</span><br><span class="line">  Color disabledBorderColor,</span><br><span class="line">  Color highlightedBorderColor,</span><br><span class="line">  EdgeInsetsGeometry padding,</span><br><span class="line">  ShapeBorder shape,</span><br><span class="line">  Clip clipBehavior,</span><br><span class="line">  FocusNode focusNode,</span><br><span class="line">  Widget child</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>和<code>RaisedButton</code>相同的就不说了，这里说一下<code>RaisedButton</code>没有的。<br>啥是<code>RaisedButton</code>没有的，自己写一下就知道了，多了个边框。。。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Flutter Demo&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: new Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: new OutlineButton(</span><br><span class="line">            child: new Text(&apos;Button&apos;),</span><br><span class="line">            borderSide: BorderSide(color: Colors.red, width: 4.0, style: BorderStyle.solid),</span><br><span class="line">//            disabledBorderColor: Colors.blue,</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              print(1);</span><br><span class="line">            &#125;</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="disabledBorderColor"><a href="#disabledBorderColor" class="headerlink" title="disabledBorderColor"></a>disabledBorderColor</h3><p>禁用时边框颜色，默认为灰色。</p>
<h3 id="borderSide"><a href="#borderSide" class="headerlink" title="borderSide"></a>borderSide</h3><p>边框样式，<code>color</code>和<code>width</code>没啥说的，一个颜色一个宽度，<code>style</code>要说一下，这个只有<code>solid</code>和<code>none</code>，也就是说只有实线边框和没有边框。</p>
<p>另外这个按钮和<code>MaterialButton</code>相比少了几个属性，对比看吧这里就不列出来了。</p>
<h2 id="三、RaisedButton"><a href="#三、RaisedButton" class="headerlink" title="三、RaisedButton"></a>三、RaisedButton</h2><p>和<code>MaterialButton</code>默认样式不同，默认带有阴影和灰色背景。按下后，阴影会变大没有<code>height</code>和<code>minWidth</code>。</p>
<h2 id="四、FlatButton"><a href="#四、FlatButton" class="headerlink" title="四、FlatButton"></a>四、FlatButton</h2><p>扁平按钮，默认背景透明并不带阴影。按下后，会有背景色。<br>和<code>MaterialButton</code>相比少了以下属性：<code>elevation、focusElevation 、hoverElevation 、highlightElevation 、disabledElevation 、animationDuration 、minWidth 、height</code>。</p>
<h2 id="五、FloatingActionButton"><a href="#五、FloatingActionButton" class="headerlink" title="五、FloatingActionButton"></a>五、FloatingActionButton</h2><p>页面的悬浮按钮。<br>看一下<code>constructor</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const FloatingActionButton(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  Widget child,</span><br><span class="line">  String tooltip,</span><br><span class="line">  Color foregroundColor,          //前景色，不会覆盖文字，加了之后改变了文字的颜色</span><br><span class="line">  Color backgroundColor,        //背景色</span><br><span class="line">  Color focusColor,</span><br><span class="line">  Color hoverColor,</span><br><span class="line">  Object heroTag: const _DefaultHeroTag(),      //动画效果</span><br><span class="line">  double elevation,</span><br><span class="line">  double focusElevation,</span><br><span class="line">  double hoverElevation,</span><br><span class="line">  double highlightElevation,  </span><br><span class="line">  double disabledElevation,   </span><br><span class="line">  @required VoidCallback onPressed,</span><br><span class="line">  bool mini: false,                    //为true时按钮尺寸会变小</span><br><span class="line">  ShapeBorder shape,</span><br><span class="line">  Clip clipBehavior: Clip.none,</span><br><span class="line">  FocusNode focusNode,</span><br><span class="line">  MaterialTapTargetSize materialTapTargetSize,</span><br><span class="line">  bool isExtended: false              //是否扩展</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>什么前景色背景色就不说了，说一下没见过的。</p>
<h3 id="heroTag"><a href="#heroTag" class="headerlink" title="heroTag"></a>heroTag</h3><p>设置为null，则不启用过渡动画，如果悬浮按钮在两个页面内的位置不同，页面切换时动作生硬。不设置的话为默认值，平滑过渡。</p>
<h3 id="mini"><a href="#mini" class="headerlink" title="mini"></a>mini</h3><p>为<code>true</code>时为按钮会缩小，但是要注意的是，这个缩小只是尺寸缩小，不是整体缩放，内容大小还是需要手动设置。</p>
<h3 id="isExtended"><a href="#isExtended" class="headerlink" title="isExtended"></a>isExtended</h3><p>是否扩展，默认为false。<br>不知道怎么用，但是发现个特性。</p>
<p>把<code>FloatingActionButton</code>写在<code>Container</code>里，同时<code>Container</code>不写<code>alignment</code>，并且<code>Container</code>设有<code>width</code>和<code>height</code>。<br><code>false</code>：按钮会尽量放大到宽高为<code>width&amp;height</code>之中小的那个尺寸，并保持圆形。<br><code>true</code>：按钮宽高会变成<code>Container</code>的宽高，不会保持圆形，但是有圆角。<br>为啥要说写在<code>Container</code>里，因为这货就不是用在<code>Container</code>里的。。。<br>怎么用往下看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return new MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        floatingActionButton: FloatingActionButton(</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">             print(1);</span><br><span class="line">          &#125;,</span><br><span class="line">          child: Icon(Icons.add)</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这才是常规用法，默认悬浮在右下角，不影响布局。<br>你说不想放右下角？可以，放哪都行，但是我不打算在这写，因为这个位置不是在按钮这设置的。</p>
<p>如有错误欢迎指出，很多不足欢迎补充。</p>
]]></content>
  </entry>
  <entry>
    <title>flutter--图标Icon</title>
    <url>/post/flutterIconWidget/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Icon(</span><br><span class="line">  IconData icon,                          //具体展示的图标</span><br><span class="line"> &#123;                      </span><br><span class="line">    Key key,</span><br><span class="line">    double size,                          //字体大小</span><br><span class="line">    Color color,                          //颜色</span><br><span class="line">    String semanticLabel,                   //语义标签</span><br><span class="line">    TextDirection textDirection            //icon里可以添加文本，文本的书写方向</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<p>官方给出了4种icon<br><code>Icons</code>：基础的图标。<br><code>IconButton</code>：交互式图标，就是图标按钮。<br><code>IconTheme</code>：为图标提供环境配置。<br><code>ImageIcon</code>：自定义图片图标。</p>
<h2 id="一、Icons"><a href="#一、Icons" class="headerlink" title="一、Icons"></a>一、Icons</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Flutter Demo&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: new Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: Icon(</span><br><span class="line">            Icons.add,</span><br><span class="line">            size: 50.0,</span><br><span class="line">            color: Colors.blue</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比较简单，设置字体大小颜色。<br>flutter内置了material的icon，所有icon看这里  <a href="https://design.google.com/icons/" target="_blank" rel="noopener">design.google.com/icons/</a>直接用就可以。（打不开？自己想办法）</p>
<h2 id="二、自定义字体图标"><a href="#二、自定义字体图标" class="headerlink" title="二、自定义字体图标"></a>二、自定义字体图标</h2><p>不想用material提供的图标，想自定义？可以，看下面  </p>
<h3 id="1、首先生成一个字体："><a href="#1、首先生成一个字体：" class="headerlink" title="1、首先生成一个字体："></a>1、首先生成一个字体：</h3><p>可以去这里<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a><br>也可以去这里<a href="https://icomoon.io/app/#/select" target="_blank" rel="noopener">https://icomoon.io/app/#/select</a><br>下载一个字体图标包，解压。  </p>
<h3 id="2、在项目根目录下新建一个fonts文件夹，把tff格式的字体放到文件夹下。"><a href="#2、在项目根目录下新建一个fonts文件夹，把tff格式的字体放到文件夹下。" class="headerlink" title="2、在项目根目录下新建一个fonts文件夹，把tff格式的字体放到文件夹下。"></a>2、在项目根目录下新建一个<code>fonts</code>文件夹，把<code>tff</code>格式的字体放到文件夹下。</h3><h3 id="3、在pubspec-yaml中添加字体"><a href="#3、在pubspec-yaml中添加字体" class="headerlink" title="3、在pubspec.yaml中添加字体"></a>3、在<code>pubspec.yaml</code>中添加字体</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  uses-material-design: true</span><br><span class="line">  fonts:</span><br><span class="line">    - family: myIcon  #指定一个字体名</span><br><span class="line">      fonts:</span><br><span class="line">        - asset: fonts/icomoon.ttf</span><br></pre></td></tr></table></figure>

<h3 id="4、使用字体图标"><a href="#4、使用字体图标" class="headerlink" title="4、使用字体图标"></a>4、使用字体图标</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body: new Container(</span><br><span class="line">  alignment: Alignment.center,</span><br><span class="line">  child: Icon(</span><br><span class="line">    IconData(</span><br><span class="line">      0xe90c,                    //去下载的字体包里找到css文件，把字体的`content`粘过来，别忘了加`0x`表示十六进制</span><br><span class="line">      fontFamily: &apos;myIcon&apos;      //自定义的字体名</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="三、IconButton"><a href="#三、IconButton" class="headerlink" title="三、IconButton"></a>三、IconButton</h2><p><code>Icon</code>里有这货，<code>Button</code>里也有这货，不纯洁。<br>写在<code>Icon</code>里吧，下一篇写<code>Button</code>就不写他了。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const IconButton(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  double iconSize: 24.0,                                        //字体大小</span><br><span class="line">  EdgeInsetsGeometry padding: const EdgeInsets.all(8.0),        //按钮的内边距</span><br><span class="line">  AlignmentGeometry alignment: Alignment.center,                //图标的对齐方式</span><br><span class="line">  @required Widget icon,                                         //图标</span><br><span class="line">  Color color,                                                  //图标字体颜色</span><br><span class="line">  Color focusColor,                                             //获得焦点时的颜色?</span><br><span class="line">  Color hoverColor,                                              //鼠标悬停时的颜色？</span><br><span class="line">  Color highlightColor,                                         //按钮按下时的背景颜色</span><br><span class="line">  Color splashColor,                                           //点击时，水波动画中水波的颜色</span><br><span class="line">  Color disabledColor,                                          //禁用时的颜色</span><br><span class="line">  @require VoidCallback onPressed,                              //点击按钮的回调函数</span><br><span class="line">  FocusNode focusNode,                                          //</span><br><span class="line">  String tooltip                                                 //点击按钮的提示语</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上代码，看demo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Flutter Demo&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: new Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: IconButton(</span><br><span class="line">            icon: new Icon(Icons.add),</span><br><span class="line">            iconSize: 24.0,</span><br><span class="line">            padding: const EdgeInsets.all(4.0),</span><br><span class="line">            alignment: Alignment.centerLeft,</span><br><span class="line">            color: Colors.red,</span><br><span class="line">            highlightColor: Colors.blue,</span><br><span class="line">            splashColor: Colors.green,</span><br><span class="line">            tooltip: &apos;test&apos;,</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              print(1);</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是个圆形的按钮。<br><code>focusNode</code>和<code>focusColor</code>推测是配合使用，和可以获得焦点的节点联动，获得焦点改变图标颜色，还未实验，欢迎补充。<br><code>tooltip</code>是要长按才出现提示，点击不会出现，<code>highlightColor</code>也是需要长按。<br><code>hoverColor</code>推测是桌面端和web端用的，毕竟移动端没发hover。<br>调整<code>iconSize/alignment/padding</code>会发现<code>IconButton</code>是有一个固定的宽高尺寸的，不可设置。</p>
<h2 id="四、IconTheme"><a href="#四、IconTheme" class="headerlink" title="四、IconTheme"></a>四、IconTheme</h2><p>这货只有<code>child</code>和<code>data</code>，在<code>data</code>里配置样式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const IconThemeData(&#123;</span><br><span class="line">  Color color,</span><br><span class="line">  double opacity,</span><br><span class="line">  double size</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>样式也不多，下面上代码，看用法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Flutter Demo&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: new Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: IconTheme(</span><br><span class="line">            data:  IconThemeData(color: Colors.red, opacity: 0.5, size: 30.0),</span><br><span class="line">            child: Container(</span><br><span class="line">              child: new Icon(Icons.add)</span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里<code>IconTheme</code>的子节点，不一定必须是<code>Icon</code>，这里是个<code>Container</code>。<br><code>IconTheme</code>相当于一个装饰器，对其下面的所有图标样式统一设置。</p>
<h2 id="五、ImageIcon"><a href="#五、ImageIcon" class="headerlink" title="五、ImageIcon"></a>五、ImageIcon</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const ImageIcon(</span><br><span class="line">  ImageProvider image,</span><br><span class="line">  &#123;</span><br><span class="line">    Key key,</span><br><span class="line">    double size,</span><br><span class="line">    Color color,</span><br><span class="line">    String semanticlabel</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>用一张图片做icon，和<code>Image</code>加<code>color</code>效果基本相同，不管什么花里胡哨的图片，都渲染成纯色，这里一定要用png这种背景透明的图片。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Flutter Demo&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: new Container(</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: ImageIcon(</span><br><span class="line">            AssetImage(&apos;images/logo.png&apos;),</span><br><span class="line">            color: Colors.red,</span><br><span class="line">            size: 50.0</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Icon到这里基本上就结束了。</p>
]]></content>
  </entry>
  <entry>
    <title>flutter--图片Image</title>
    <url>/post/flutterImageWidget/</url>
    <content><![CDATA[<p>先看一下constructor</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Image(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  @required ImageProvider image,                        //抽象的构造函数，提供图片加载入口</span><br><span class="line">  String semanticLabel,                                  //语义标签</span><br><span class="line">  bool excludeFromSemantics: false,                    //看文档好像是语义化</span><br><span class="line">  double width,                                           //宽</span><br><span class="line">  double height,                                         //高            </span><br><span class="line">  Color color,                                            //混合色值</span><br><span class="line">  BlendMode colorBlendMode,                              //混合模式</span><br><span class="line">  BoxFit fit,                                           //填充模式</span><br><span class="line">  AlignmentGeometry alignment: Alignment.center,          //对齐方式</span><br><span class="line">  ImageRepeat repeat: ImageRepeat.noRepeat,              //重复方式</span><br><span class="line">  Rect centerSlice,                                      //图片拉伸</span><br><span class="line">  bool matchTextDirection: false,                        //是否按书写方向绘制图片</span><br><span class="line">  bool gaplessPlayback: false,                          //图片路径发生改变后，加载新图片过程中是否显示旧图</span><br><span class="line">  FilterQuality filterQuality: FilterQuality.low        //看官网说貌似和图片质量有关系</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="一、加载一张图片"><a href="#一、加载一张图片" class="headerlink" title="一、加载一张图片"></a>一、加载一张图片</h2><p>flutter提供了4中图片的加载方式</p>
<h3 id="1、本地图片"><a href="#1、本地图片" class="headerlink" title="1、本地图片"></a>1、本地图片</h3><p>首先新建一个<code>images</code>的文件夹，随便放一张图片进去，我这里在官网下载了flutter的logo<br><img src="1.png" alt="image.png"></p>
<p>打开<code>pubspec.yaml</code>在<code>flutter</code>下添加<code>assets</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  uses-material-design: true</span><br><span class="line">  assets:</span><br><span class="line">    - images/logo.png</span><br></pre></td></tr></table></figure>

<p>接下来上代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Flutter Demo&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: new Center(</span><br><span class="line">          child: new Image(</span><br><span class="line">            image: AssetImage(&quot;images/logo.png&quot;)</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样一张本地图片就加载完成了。如果有2倍图3倍图需要在images文件夹下建<code>2.0x/3.0x</code>文件夹。<br>flutter还提供了简写的方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body: new Center(</span><br><span class="line">  child: new Image.asset(&apos;images/logo.png&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>是不是有问题，一张两张图片还可以，静态文件多了都要添加在<code>pubspec.yaml</code>是不是很麻烦，fultter支持只写文件夹路径，注意<code>/</code>不要忘了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  uses-material-design: true</span><br><span class="line">  assets:</span><br><span class="line">    - images/</span><br></pre></td></tr></table></figure>

<h3 id="2、网络图片"><a href="#2、网络图片" class="headerlink" title="2、网络图片"></a>2、网络图片</h3><p>本地图片需要添加到<code>pubspec.yaml</code>网络图片直接按上边的方法写是肯定不行的，需要用<code>NetworkImage</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body: new Center(</span><br><span class="line">  child: new Image(</span><br><span class="line">    image: NetworkImage(&apos;https://cdn.jsdelivr.net/gh/flutterchina/website@1.0/images/flutter-mark-square-100.png&apos;)</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>对于网络图片flutter同样提供了简写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body: new Center(</span><br><span class="line">  child: new Image.network(&apos;https://cdn.jsdelivr.net/gh/flutterchina/website@1.0/images/flutter-mark-square-100.png&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="3、FileImage"><a href="#3、FileImage" class="headerlink" title="3、FileImage"></a>3、FileImage</h3><h3 id="4、Image-momery"><a href="#4、Image-momery" class="headerlink" title="4、Image.momery"></a>4、Image.momery</h3><h2 id="二、设置样式-属性"><a href="#二、设置样式-属性" class="headerlink" title="二、设置样式/属性"></a>二、设置样式/属性</h2><h3 id="1、semanticLabel-amp-excludeFromSemantics"><a href="#1、semanticLabel-amp-excludeFromSemantics" class="headerlink" title="1、semanticLabel &amp; excludeFromSemantics"></a>1、semanticLabel &amp; excludeFromSemantics</h3><p><code>semanticLabel</code>看文档应该是和html里img标签的alt属性类似。<br><code>excludeFromSemantics</code>如果为true，则<code>semanticLabel</code>被忽略。</p>
<h3 id="2、width-amp-height"><a href="#2、width-amp-height" class="headerlink" title="2、width &amp; height"></a>2、width &amp; height</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body: new Center(</span><br><span class="line">  child: new Image(</span><br><span class="line">    image: new AssetImage(&apos;images/logo.png&apos;),</span><br><span class="line">    width: 50.0,</span><br><span class="line">    height: 50.0</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这里需要注意的是，图片的宽高是等比缩放，并且图片显示不会超过原图的尺寸，下面解释一下。<br>比如一张尺寸为<code>200.0*200.0</code>的图片。<br>1、单方向设置尺寸，例：设置<code>width</code>为<code>100.0</code>，则<code>height</code>等比例调整为<code>100.0</code>。<br>2、如果同时设置宽高，设置的尺寸小于等于图片尺寸，但是与原图比例不同：<code>width: 100.0, height: 200.0</code>，则<code>image</code>这个节点为设置的尺寸，但是图片显示为宽<code>100.0</code>高<code>100.0</code>，居中显示。<br>3、如果同时设置尺寸，并且两个尺寸都大于图片的实际尺寸，例：<code>width: 300.0, height: 300.0</code>，则<code>image</code>这个节点为设置的尺寸即<code>300.0*300.0</code>，图片显示为图片本身的尺寸即<code>200.0*200.0</code>居中显示。</p>
<h3 id="3、color"><a href="#3、color" class="headerlink" title="3、color"></a>3、color</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">color: Colors.red</span><br></pre></td></tr></table></figure>

<p>如果和我一样用了flutter官网的logo，会发现图片变成了红色，这个是设置图片的前景色，会覆盖图片，如果不是背景色透明的图片，会把整张图片覆盖。</p>
<h3 id="4、colorBlendMode"><a href="#4、colorBlendMode" class="headerlink" title="4、colorBlendMode"></a>4、colorBlendMode</h3><p>混合模式，这里先不说单开一篇分析一下混合模式。</p>
<h3 id="5、fit"><a href="#5、fit" class="headerlink" title="5、fit"></a>5、fit</h3><p>上边说<code>width&amp;height</code>的时候，如果设置的宽高大于图片本身的尺寸，图片会以本身的尺寸居中显示，如果想让他以设置的尺寸显示，就需要这个fit。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Image(</span><br><span class="line">  image: new AssetImage(&apos;images/logo.png&apos;),</span><br><span class="line">  width: 300.0,</span><br><span class="line">  height: 300.0,</span><br><span class="line">  fit: BoxFit.fill</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>fill</code>：设置多少就是多少，图片会被拉伸。<br><code>contain</code>: 缩放图片以完全装图片，可能有部分空白。<br><code>cover</code>: 缩放图片以完全覆盖图片区域，图片可能有部分看不见。<br><code>fitHeight</code>: 充满高，可能有部分图片无法显示。<br><code>fitWidth</code>：充满宽，可能有部分图片无法显示。<br><code>scaleDown</code>：在不大于原图尺寸的情况下，与<code>contain</code>效果相同，如果超过原图尺寸，则以原图大小居中显示。<br>经过总结发现这个<code>fit</code>有一些属性和css中<code>background-size</code>效果相同，比如<code>cover/contain</code>。</p>
<h3 id="6、alignment"><a href="#6、alignment" class="headerlink" title="6、alignment"></a>6、alignment</h3><p>对齐方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">child: new Image(</span><br><span class="line">  image: new AssetImage(&apos;images/logo.png&apos;),</span><br><span class="line">  width: 100.0,</span><br><span class="line">  height: 100.0,</span><br><span class="line">  alignment: Alignment.center,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这里不详细说了，和<code>Container</code>的<code>alignment</code>写法效果一样，<code>需要注意的是，image的alignment作用在自己身上，Container的alignment作用在子节点身上</code>。</p>
<h3 id="7、repeat"><a href="#7、repeat" class="headerlink" title="7、repeat"></a>7、repeat</h3><p>图片的重复方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body: new Center(</span><br><span class="line">  child: new Image(</span><br><span class="line">    image: new AssetImage(&apos;images/logo.png&apos;),</span><br><span class="line">    width: 400.0,</span><br><span class="line">    height: 400.0,</span><br><span class="line">    repeat: ImageRepeat.repeat,</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>repeat</code>：重复。<br><code>repeatX</code>：X方向重复。<br><code>repeatY</code>：Y方向重复。<br><code>noRepeat</code>：不重复，默认值。</p>
<h3 id="8、centerSlice"><a href="#8、centerSlice" class="headerlink" title="8、centerSlice"></a>8、centerSlice</h3><p>当图片需要被拉伸时，<code>centerSlice</code>定义了一个矩形区域，这个矩形区域有9个点，拉伸作用在这9个点上。上、下、左、右、左上、右上、左下、右下、正中心。</p>
<h3 id="9、matchTextDirection"><a href="#9、matchTextDirection" class="headerlink" title="9、matchTextDirection"></a>9、matchTextDirection</h3><p>是否按书写方向绘制，据说需要配合<code>Directionality</code>使用，但是<code>Image</code>并没有<code>Directionality</code>，如果说<code>Directionality</code>要加在父节点上，<code>Container</code>也没有，没整明白怎么用。</p>
<h3 id="10、gaplessPlayback"><a href="#10、gaplessPlayback" class="headerlink" title="10、gaplessPlayback"></a>10、gaplessPlayback</h3><p>当图片路径发生改变时，重新加载图片过程中原图是否保留展示。<br><code>true</code>：保留。<br><code>false</code>：不保留，空白等待新图片加载完成。</p>
<h3 id="11、filterQuality"><a href="#11、filterQuality" class="headerlink" title="11、filterQuality"></a>11、filterQuality</h3><p>貌似是图片质量相关，加了之后没看出来有什么效果。</p>
<p><code>Image</code>就到这里了，有一些属性和css里的<code>background</code>效果基本相同，可以对比来看，还有不知道怎么用的，有大佬知道希望告知。</p>
]]></content>
  </entry>
  <entry>
    <title>flutter--容器组件Container</title>
    <url>/post/flutterContainerWidget/</url>
    <content><![CDATA[<p>上一篇笔记用了个<code>Container</code>组件，这一篇详细介绍一下，整体来说这个组件类似<code>div</code>，但是与<code>div</code>又不同，具体有哪些特性，先了解一下<code>Container</code>有哪些属性再总结，因为不了解有哪些属性直接看的话，会有点懵逼。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Container(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  AlignmentGeometry alignment,        //子组件的对齐方式</span><br><span class="line">  EdgelnsetsGeometry padding,          //内边距</span><br><span class="line">  Color color,                          //背景色</span><br><span class="line">  Decoration decoration,                //背景装饰  相当于样式  在child之下</span><br><span class="line">  Decoration foregroundDecoration,      //前景装饰  覆盖在child之上  如半透明遮罩效果</span><br><span class="line">  double width,                         //宽</span><br><span class="line">  double height,                         //高</span><br><span class="line">  BoxConstraints constraints,           //容器的大小限制</span><br><span class="line">  EdgelnsetsGeometry margin,            //外边距</span><br><span class="line">  Matrix4 transform,                     //变换</span><br><span class="line">  Widget child                            //子节点</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="1、alignment"><a href="#1、alignment" class="headerlink" title="1、alignment"></a>1、alignment</h2><p>子组件的对齐方式，<code>有子组件并且当前Container尺寸大于子组件尺寸时有效</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Container(</span><br><span class="line">  color: Colors.red,</span><br><span class="line">  width: 400.0,</span><br><span class="line">  height: 400.0,</span><br><span class="line">  alignment: Alignment.center,</span><br><span class="line">  child: new Container(</span><br><span class="line">    color: Colors.blue,</span><br><span class="line">    width: 50.0,</span><br><span class="line">    height: 50.0,</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>center</code>：居中<br><code>centerLeft</code>：靠左垂直居中<br><code>centerRight</code>：靠右垂直居中<br><code>bottomCenter</code>：底部居中<br><code>bottomLeft</code>：左下<br><code>bottomRight</code>：右下<br><code>topCenter</code>：顶部居中<br><code>topLeft</code>：左上<br><code>topRight</code>：右上<br>可以看见除了<code>center</code>，都是两个单词拼在一起很好记，垂直方向在前，水平方向在后。<br>子组件尺寸要小于当前组件尺寸时才会生效。</p>
<h2 id="2、padding-amp-margin"><a href="#2、padding-amp-margin" class="headerlink" title="2、padding &amp; margin"></a>2、padding &amp; margin</h2><p>这两个放一起，设置方式相同，这里以padding为例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Container(</span><br><span class="line">  padding: EdgeInsets.all(10.0)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>EdgeInsets.all</code>：四个内边距值相同<br><code>EdgeInsets.only</code>：四个边距单独设置，不设置则为0，用法如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">padding: EdgeInsets.only(</span><br><span class="line">  top: 10.0,</span><br><span class="line">  left: 20.0</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>可以只写一个，也可以四个全都写。<br><code>EdgeInsets.symmetric</code>：可以设置同方向上的两个内边距</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">padding: EdgeInsets.symmetric(</span><br><span class="line">  horizontal: 10.0,        //水平方向两个边距</span><br><span class="line">  vertical: 20.0          //垂直方向两个边距</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>EdgeInsets.zero</code>：设置内边距为0<br><code>EdgeInsets.fromLTRB</code>：<code>only</code>的简写，顺序为左上右下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">padding: EdgeInsets.fromLTRB(10.0, 20.0, 30.0, 40.0)</span><br></pre></td></tr></table></figure>

<p><code>EdgeInsets.fromWindowPadding</code>：具体用法不知道<br><code>***EdgeInsets这个组件是个公用组件，并不是只有padding可以用，比如margin也可以</code></p>
<h2 id="3、color"><a href="#3、color" class="headerlink" title="3、color"></a>3、color</h2><p>背景色。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Container(</span><br><span class="line">  color: Colors.red</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="4、decoration"><a href="#4、decoration" class="headerlink" title="4、decoration"></a>4、decoration</h2><p><code>***decoration不能和color同时用，会报错。</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const BoxDecoration(&#123;</span><br><span class="line">  Color color,</span><br><span class="line">  DecorationImage image,</span><br><span class="line">  BoxBorder border,</span><br><span class="line">  BorderRadiusGeometry borderRadius,</span><br><span class="line">  List&lt;BoxShadow&gt; boxShadow,</span><br><span class="line">  Gradient gradient,</span><br><span class="line">  BlendMode backgroundBlendMode,</span><br><span class="line">  BoxShape shape: BoxShape.rectangle</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="color"><a href="#color" class="headerlink" title="color"></a>color</h4><p>和color一样，没啥说的。</p>
<h4 id="image"><a href="#image" class="headerlink" title="image"></a>image</h4><p>背景图，可以和背景色一起使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">decoration: BoxDecoration(</span><br><span class="line">  image: DecorationImage(</span><br><span class="line">  //这里先用网图，怎么加载本地资源以后再细说</span><br><span class="line">    image: new NetworkImage(&apos;https://cdn.jsdelivr.net/gh/flutterchina/website@1.0/images/flutter-mark-square-100.png&apos;)</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="border"><a href="#border" class="headerlink" title="border"></a>border</h4><p>边框，在container内部，和<code>margin/padding</code>类似，可以单独设置也可以设置为统一样式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">decoration: BoxDecoration(</span><br><span class="line">  //border: Border.all(width: 2.0, color: Colors.blue)          设置为相同样式</span><br><span class="line">  top: BorderSide(width: 2.0, color: Colors.blue),</span><br><span class="line">  left: BorderSide(width: 4.0, color: Colors.yellow),</span><br><span class="line">  right: BorderSide(width: 8.0, color: Colors.green),</span><br><span class="line">  bottom: BorderSide(width: 16.0, color: Colors.purple)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="borderRadius"><a href="#borderRadius" class="headerlink" title="borderRadius"></a>borderRadius</h4><p><code>*圆角不能和border同时设置，同时存在时可以运行但是会抛出一个异常</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">decoration: new BoxDecoration(</span><br><span class="line">  borderRadius: BorderRadius.only(                   //only对每个角单独设置</span><br><span class="line">    bottomLeft: Radius.circular(20.0),                  //圆角值为20.0</span><br><span class="line">    topLeft: Radius.zero,                                      //圆角为0</span><br><span class="line">    bottomRight: Radius.elliptical(20.0, 40.0)       //圆角x方向为20.0，y方向为40.0</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>Radius.all</code>：四个角同时设置，参数和但方向的参数相同（<code>borderRadius: new BorderRadius.all(Radius.circular(20.0))</code>）。<br><code>Radius.lerp</code>: 做动画用的多一点暂时先不深入。</p>
<h4 id="boxShadow"><a href="#boxShadow" class="headerlink" title="boxShadow"></a>boxShadow</h4><p>容器阴影</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">decoration: new BoxDecoration(</span><br><span class="line">  boxShadow: [</span><br><span class="line">    new BoxShadow(</span><br><span class="line">      color: Colors.red,                      //阴影颜色</span><br><span class="line">      offset: Offset(10.0, 20.0),          //偏移量x, y</span><br><span class="line">      blurRadius: 10.0,                      //模糊</span><br><span class="line">      spreadRadius: 10.0                  //延伸</span><br><span class="line">    ),</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="gradient"><a href="#gradient" class="headerlink" title="gradient"></a>gradient</h4><p>背景色渐变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> //径向渐变</span><br><span class="line">decoration: BoxDecoration(</span><br><span class="line">  gradient: RadialGradient(                         </span><br><span class="line">    colors: [Colors.red, Colors.blue],            //渐变颜色</span><br><span class="line">    center: Alignment.topLeft,                      //渐变中心点，可以设具体数值（center: const Alignment(0.7, -0.6)）</span><br><span class="line">    radius: 5.0                                              //渐变半径</span><br><span class="line">    stops: [0.4, 1.0],                                    //渐变颜色的比例</span><br><span class="line">  ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//线性渐变</span><br><span class="line">gradient: LinearGradient(</span><br><span class="line">  begin: Alignment.topLeft,                            //渐变起始点</span><br><span class="line">  end: Alignment(0.1, 0.1),                            //结束点</span><br><span class="line">  colors: [Colors.red, Colors.blue],              </span><br><span class="line">  tileMode: TileMode.mirror                          //模式有三个值（mirror：镜像，clamp: 单纯的单次渐变不做其他处理，repeated: 重复）</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//扇形渐变</span><br><span class="line">gradient: SweepGradient(</span><br><span class="line">  center: FractionalOffset.center,    //渐变的圆心</span><br><span class="line">  startAngle: 0.0,                      //渐变的起始角度</span><br><span class="line">  endAngle: math.pi * 2,          //渐变的角度范围</span><br><span class="line">  colors: const &lt;Color&gt;[</span><br><span class="line">    Colors.blue,</span><br><span class="line">    Colors.green,</span><br><span class="line">    Colors.red,</span><br><span class="line">    Colors.yellow,</span><br><span class="line">    Colors.pink</span><br><span class="line">  ],</span><br><span class="line">  stops: const &lt;double&gt;[0.0, 0.25, 0.5, 0.75, 1.0],      //每种颜色所占的比例，总数为2，多出部分被初始颜色覆盖</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>扇形渐变每种颜色的基准线为改颜色的中心线（不理解的自己试一下就知道了）。<br><code>tileMode</code>是这三种渐变都有的属性，不仅限于线性渐变。<br>径向渐变、扇形渐变的圆心位置和线性渐变的起始/结束坐标都是可以设置具体数值的。</p>
<h4 id="backgroundBlendMode"><a href="#backgroundBlendMode" class="headerlink" title="backgroundBlendMode"></a>backgroundBlendMode</h4><p>图像混合模式，这个东西有点多，要单开一篇。</p>
<h4 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h4><p>当前Container的形状</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">decoration: BoxDecoration(</span><br><span class="line">  shape: BoxShape.rectangle</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>有两个值<br><code>rectangle</code>：矩形<br><code>circle</code>：圆形，不会出现椭圆的情况，宽高不同时直径按小的那个值算。</p>
<h2 id="5、width-amp-height"><a href="#5、width-amp-height" class="headerlink" title="5、width &amp; height"></a>5、width &amp; height</h2><p>这俩放一起，<code>double</code>类型，宽高。</p>
<h2 id="6、constraints"><a href="#6、constraints" class="headerlink" title="6、constraints"></a>6、constraints</h2><p>对Container的尺寸约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">constraints: new BoxConstraints(</span><br><span class="line">  minWidth: 200.0,</span><br><span class="line">  maxWidth: 300.0,</span><br><span class="line">  minHeight: 200.0,</span><br><span class="line">  maxHeight: 300.0</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="7、transform"><a href="#7、transform" class="headerlink" title="7、transform"></a>7、transform</h2><p>对Container进行变换操作，和css的transform类似，值是一个矩阵(Matrix4)。<br>这里暂时跳过，开一篇单独说。</p>
<h2 id="8、child"><a href="#8、child" class="headerlink" title="8、child"></a>8、child</h2><p>子节点，只能有一个子节点，没有children。</p>
<h2 id="9、关于Container的特性"><a href="#9、关于Container的特性" class="headerlink" title="9、关于Container的特性"></a>9、关于<code>Container</code>的特性</h2><h4 id="关于尺寸的自我调节"><a href="#关于尺寸的自我调节" class="headerlink" title="关于尺寸的自我调节"></a>关于尺寸的自我调节</h4><p>1、如果设置了<code>width/height/constraints</code>，并且尺寸小于父组件的尺寸，则为设置的宽高，如果大于父组件的尺寸则为父组件的宽高，如果父组件有<code>padding</code>，或当前组件有<code>margin</code>需要减去<code>padding/margin</code>。<br>2、如果没有子节点并且没有<code>width/height</code>以及<code>constraints</code>约束，Container的尺寸会撑到最大，尽可能占满父节点。<br>2、如果有子节点并且没有<code>width/height</code>以及<code>constraints</code>约束，Container会尽量缩小。</p>
<h4 id="关于渲染过程"><a href="#关于渲染过程" class="headerlink" title="关于渲染过程"></a>关于渲染过程</h4><p>生成节点：<br><code>padding &gt; decoration &gt; constraints (width/height) &gt; margin</code><br>绘制节点：<br><code>transform &gt; decoration &gt; foregroundDecoration</code></p>
<p><code>Container</code>差不多就这些东西，不是太深入，深入的东西就需要自己在项目或者demo中尝试了，还有一些即使是粗略的说也不少，放这里感觉不太合适，后边单独分析。</p>
]]></content>
  </entry>
  <entry>
    <title>flutter--hello world和文本组件Text、TextSpan</title>
    <url>/post/flutterTextWidget/</url>
    <content><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>代码的世界从<code>hello world</code>开始，flutter也一样。<br>创建一个项目，将<code>lib</code>文件夹下的<code>main.dart</code>改为如下代码：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Flutter Demo&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">      body: new Center(</span><br><span class="line">        child: new Text(</span><br><span class="line">          &apos;hello world&apos;</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跑起来<br><img src="1.png" alt="image.png"><br><code>hello world</code>完成了。</p>
<p>先简单介绍两个组件</p>
<h3 id="1、Scaffold"><a href="#1、Scaffold" class="headerlink" title="1、Scaffold"></a>1、Scaffold</h3><p>打开任意一款app，顶部标题栏、侧边抽屉、底部导航等…，基本上都有这里边的一个或者几个，基于这个现状，material很贴心的提供了<code>scaffold</code>这个组件，相当于一个页面的骨架，可以把上边说的那些东西拼到里边。</p>
<h3 id="2、Center"><a href="#2、Center" class="headerlink" title="2、Center"></a>2、Center</h3><p>很简单的一句话，这个组件的子组件水平垂直居中。<br>这两个只是简单的介绍一下，以后再详细说，接下来是这篇笔记的主角。</p>
<h1 id="文本Widget"><a href="#文本Widget" class="headerlink" title="文本Widget"></a>文本Widget</h1><h2 id="一、Text"><a href="#一、Text" class="headerlink" title="一、Text"></a>一、Text</h2><p><code>hello world</code>这个demo里用过了，相当于<code>html</code>里边的<code>&lt;p&gt;&lt;/p&gt;</code>，但是又有所不同，都知道<code>p</code>标签独占一行，宽度如果没有限制则为父级宽度，<code>Text</code>也是独占一行，但是宽度为内容宽度，并且没有<code>width</code>属性。<br>看上边的demo，是不是感觉字体有点小，还想换个颜色，加个下划线…还有其他各种骚操作。<br>先看一下官网给出的Text</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Text(</span><br><span class="line">  String data,                                   //文本上边demo的hello world</span><br><span class="line">  &#123;</span><br><span class="line">    Key key,                                   //唯一标识，相当于react中map渲染节点的key</span><br><span class="line">    TextStyle style,                            //样式</span><br><span class="line">    StrutStyle strutStyle,                    //？？？不知道干啥的</span><br><span class="line">    TextAlign textAlign,                      //对齐方式</span><br><span class="line">    TextDirection textDirection,          //文本的书写顺序</span><br><span class="line">    Locale locale,                                //设置语言环境  就是国际化，多语言支持</span><br><span class="line">    bool softWrap,                              //文本过长是否自动换行</span><br><span class="line">    TextOverflow overflow,                  //对溢出文本的显示方式</span><br><span class="line">    double textScaleFactor,                //每个逻辑像素的字体像素数</span><br><span class="line">    int maxLines,                                //文本的最大行数</span><br><span class="line">    String semanticsLabel,                  //图像的语义描述，用于向Andoid上的TalkBack和iOS上的VoiceOver提供图像描述</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>接下来挨个看</p>
<h3 id="1、TextStyle"><a href="#1、TextStyle" class="headerlink" title="1、TextStyle"></a>1、TextStyle</h3><p>设置字体的样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const TextStyle(&#123;</span><br><span class="line">  bool inherit: true,                                  //是否继承父级</span><br><span class="line">  Color color,                                           //字体颜色</span><br><span class="line">  Color backgroundColor,                        //背景色</span><br><span class="line">  double fontSize,                                      //字体大小</span><br><span class="line">  FontWeight fontWeight,                          //字体粗细</span><br><span class="line">  FontStyle fontStyle,                                //正常/斜体</span><br><span class="line">  double letterSpacing,                              //字符间距可为负</span><br><span class="line">  double wordSpacing,                              //字间距（英文单词间距）</span><br><span class="line">  TextBaseline textBaseline,                        //文本对齐基线</span><br><span class="line">  Height height,                                          //Text的高度，相当于行高</span><br><span class="line">  Local locale,                                            //设置语言环境  就是国际化，多语言支持</span><br><span class="line">  Paint foreground,                                      //不知道是啥</span><br><span class="line">  Paint background,                                      //文本背景色作用和backgroundColor相同</span><br><span class="line">  List&lt;Shadow&gt; shadows,                            //文字阴影</span><br><span class="line">  TextDecoration decoration,                        //划线</span><br><span class="line">  Color decorationColor,                                //划线颜色</span><br><span class="line">  TextDecoration decorationStyle,                 //划线种类</span><br><span class="line">  double decorationThickness,                    //划线的粗细</span><br><span class="line">  String debugLabel,                                   //文本样式的文本描述，仅在debug模式下有效           </span><br><span class="line">  String fontFamily,</span><br><span class="line">  List&lt;String&gt; fontFamilyFallback,</span><br><span class="line">  String package,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>接下来详解</p>
<h4 id="color"><a href="#color" class="headerlink" title="color"></a>color</h4><p>flutter的color支持5种写法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style: TextStyle(</span><br><span class="line">  color: Color(0xFF42A5F5),                                            //十六进制色号两个F的位置为透明度，取值范围00～FF</span><br><span class="line">  color: Color.fromARGB(0xFF, 0x42, 0xA5, 0xF5),         //十六进制色号第一位为透明度，从00～FF</span><br><span class="line">  color: Color.fromARGB(255, 66, 165, 245),                   //十进制色号第一位为透明度，0~255</span><br><span class="line">  color: Color.fromRGBO(66, 165, 245, 1.0),                    //最后一位为透明度, 0.0~1.0</span><br><span class="line">  color: Colors.red                                                   //material内置</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="backgroundColor"><a href="#backgroundColor" class="headerlink" title="backgroundColor"></a>backgroundColor</h4><p>背景色和color的写法一样</p>
<h4 id="fontSize"><a href="#fontSize" class="headerlink" title="fontSize"></a>fontSize</h4><p>字体大小，double类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style: TextStyle(</span><br><span class="line">  fontSize: 30.0</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>不用写单位，flutter的单位是<code>dp</code>。</p>
<h4 id="letterSpacing"><a href="#letterSpacing" class="headerlink" title="letterSpacing"></a>letterSpacing</h4><p>字符间距</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style: TextStyle(</span><br><span class="line">  letterSpacing: 6.0</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="wordSpacing"><a href="#wordSpacing" class="headerlink" title="wordSpacing"></a>wordSpacing</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style: TextStyle(</span><br><span class="line">  wordSpacing: 10.0</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="textBaseline"><a href="#textBaseline" class="headerlink" title="textBaseline"></a>textBaseline</h4><p>对齐基线，类似css的基线，<code>alphabetic/ideographic</code>两个值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style: TextStyle(</span><br><span class="line">  textBaseline: TextBaseline.alphabetic</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>alphabetic：简单理解为英文的对齐基线<br>ideographic：简单理解为中文对齐基线</p>
<h4 id="height"><a href="#height" class="headerlink" title="height"></a>height</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style: TextStyle(</span><br><span class="line">  height: 1.5</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>和css一样1.5就是字体大小的1.5倍。</p>
<h4 id="background"><a href="#background" class="headerlink" title="background"></a>background</h4><p>这个注意了，不是<code>Color</code>，是<code>Paint</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style: TextStyle(</span><br><span class="line">  background: Paint() ..color = Colors.blue</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这个和<code>backgroundColor</code>一样，两者不能共存。<br>..是<code>dart</code>语法糖，前一个函数的返回值的属性，说的有点绕，看代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Paint() ..color = Colors.blue;</span><br><span class="line">//下边代码的简写</span><br><span class="line">Paint pg = Paint();</span><br><span class="line">pg.color = Colors.blue;</span><br></pre></td></tr></table></figure>

<h4 id="shadows"><a href="#shadows" class="headerlink" title="shadows"></a>shadows</h4><p><code>List</code>类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style = TextStyle(</span><br><span class="line">  shadows: [Shadow(color: Colors.black,offset: Offset(5, 6),blurRadius: 3 )]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这里说明一下参数<br><code>color</code>：阴影颜色，<br><code>offset</code>：两个参数xy方向的偏移量，<br><code>blurRadius</code>: 模糊程度</p>
<h4 id="decoration"><a href="#decoration" class="headerlink" title="decoration"></a>decoration</h4><p>和css的<code>text-decoration</code>类似</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style = TextStyle(</span><br><span class="line">  decoration: TextDecoration.underline</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>有5个值<br><code>underline</code>：下划线<br><code>none</code>：无划线<br><code>overline</code>：上划线<br><code>lineThrough</code>：中划线<br><code>combine</code>：这个就厉害了，可以传入一个<code>List</code>，三线齐划</p>
<h4 id="decorationColor"><a href="#decorationColor" class="headerlink" title="decorationColor"></a>decorationColor</h4><p>划线的颜色，默认和字体颜色相同。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style: TextStyle(</span><br><span class="line">  decorationColor:  Colors.black</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="decorationStyle"><a href="#decorationStyle" class="headerlink" title="decorationStyle"></a>decorationStyle</h4><p>默认为实线</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style = TextStyle(</span><br><span class="line">  decorationStyle: TextDecorationStyle.dashed</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>dashed</code>：点划线<br><code>dotted</code>：虚线<br><code>double</code>：双划线<br><code>solid</code>：实线<br><code>wavy</code>：波浪线</p>
<h4 id="decorationThickness"><a href="#decorationThickness" class="headerlink" title="decorationThickness"></a>decorationThickness</h4><p>划线的粗细，默认为1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style = TextStyle(</span><br><span class="line">  decorationThickness: 3.0</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="debugLabel"><a href="#debugLabel" class="headerlink" title="debugLabel"></a>debugLabel</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">style = TextStyle(</span><br><span class="line">  debugLabel: &apos;test</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>加上之后没找到怎么看这个提示。。。</p>
<h3 id="2、strutStyle"><a href="#2、strutStyle" class="headerlink" title="2、strutStyle"></a>2、strutStyle</h3><p>看文档这个应该是<code>style</code>的简写，类似css里边的<code>background/font</code>这种，可以把样式写到一起，样式是有顺序的，这里不研究了，不推荐这种写法，可读性不高不好维护。</p>
<h3 id="3、textAlign"><a href="#3、textAlign" class="headerlink" title="3、textAlign"></a>3、textAlign</h3><p>对齐方式，和css的<code>text-align</code>基本上相同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">textAlign: TextAlign.start</span><br></pre></td></tr></table></figure>

<p><code>start</code>：起始位置<br><code>end</code>：结束位置<br><code>center</code>：居中<br><code>left</code>：左对齐<br><code>right</code>：右对齐<br><code>justify</code>：两端对齐</p>
<h3 id="4、textDirection"><a href="#4、textDirection" class="headerlink" title="4、textDirection"></a>4、textDirection</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">textDirection: TextDirection.ltr</span><br></pre></td></tr></table></figure>

<p><code>ltr</code>：从左到右<br><code>rtl</code>：从右到左<br>left to right，right to left</p>
<h3 id="5、locale"><a href="#5、locale" class="headerlink" title="5、locale"></a>5、locale</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">locale: Locale(&apos;fr&apos;, &apos;CH&apos;)</span><br></pre></td></tr></table></figure>

<p>这个不是添加了就会自动翻译，还要配置其他东西，以及第三方包，以后再详细说。</p>
<h3 id="6、softWrap"><a href="#6、softWrap" class="headerlink" title="6、softWrap"></a>6、softWrap</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">softWrap: true</span><br></pre></td></tr></table></figure>

<p>文本超出容器时是否自动换行，默认为<code>true</code>，为<code>false</code>时文本超出容器部分默认被剪切。</p>
<h3 id="7、overflow"><a href="#7、overflow" class="headerlink" title="7、overflow"></a>7、overflow</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">overflow: TextOverflow.clip</span><br></pre></td></tr></table></figure>

<p>对文本溢出部分的处理，类似css中的<code>overflow</code>。<br><code>clip</code>：切断，超出部分不显示，默认值<br><code>ellipsis</code>：超出部分不显示，显示…<br><code>visible</code>：超出部分强制显示<br><code>fade</code>：超出部分淡出</p>
<h3 id="8、textScaleFactor"><a href="#8、textScaleFactor" class="headerlink" title="8、textScaleFactor"></a>8、textScaleFactor</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">textScaleFactor: 1.5</span><br></pre></td></tr></table></figure>

<p>缩放的倍数</p>
<h3 id="9、maxLines"><a href="#9、maxLines" class="headerlink" title="9、maxLines"></a>9、maxLines</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">maxLines: 2</span><br></pre></td></tr></table></figure>

<p>文本的最大行数</p>
<p>####10、semanticsLabel</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">semanticsLabel: &apos;test&apos;</span><br></pre></td></tr></table></figure>

<p>这个应该是相当于html中<code>img</code>的<code>alt</code>。<br>下面上完整代码，把上边demo中的<code>Center</code>换成<code>Container</code>（相当于html中的<code>div</code>，下篇笔记详细说），再加个<code>width</code>便于观察样式和属性对文本的改变。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Flutter Demo&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: new Container(</span><br><span class="line">          width: 400.0,</span><br><span class="line">          child: new Text(</span><br><span class="line">            &apos;hello world hello world hello world hello world hello world hello world&apos;,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">              color: Color.fromARGB(0xFF, 0x42, 0xA5, 0xF5),</span><br><span class="line">              backgroundColor: Colors.red,</span><br><span class="line">              fontSize: 30.0,</span><br><span class="line">              letterSpacing: 6.0,</span><br><span class="line">              wordSpacing: 15.0,</span><br><span class="line">              height: 2.0,</span><br><span class="line">//              background: Paint() ..color = Colors.blue,</span><br><span class="line">              shadows: [Shadow(color: Colors.black,offset: Offset(5, 6),blurRadius: 3 )],</span><br><span class="line">              decoration: TextDecoration.combine([</span><br><span class="line">                TextDecoration.underline,</span><br><span class="line">                TextDecoration.overline</span><br><span class="line">              ]),</span><br><span class="line">              decorationColor: Colors.black,</span><br><span class="line">              decorationStyle: TextDecorationStyle.wavy,</span><br><span class="line">              decorationThickness: 3.0,</span><br><span class="line">              debugLabel: &apos;text&apos;</span><br><span class="line">            ),</span><br><span class="line">            textAlign: TextAlign.justify,</span><br><span class="line">            textDirection: TextDirection.rtl,</span><br><span class="line">            locale: Locale(&apos;fr&apos;, &apos;CH&apos;),</span><br><span class="line">            softWrap: true,</span><br><span class="line">            overflow: TextOverflow.visible,</span><br><span class="line">            textScaleFactor: 1.5,</span><br><span class="line">            maxLines: 2,</span><br><span class="line">            semanticsLabel: &apos;test&apos;</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>学习的时候建议不要像这里一样加太多的样式和属性，不相关的属性或者样式先单独练习再组合，有的需要配合使用，比如溢出<code>softWrap</code>、<code>overflow</code>、<code>maxLines</code>这些。</p>
<h2 id="二、TextSpan"><a href="#二、TextSpan" class="headerlink" title="二、TextSpan"></a>二、TextSpan</h2><p>html里有个<code>span</code>这里有个<code>TextSpan</code>，作用基本相同，文字放一行，下面看代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  // This widget is the root of your application.</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Flutter Demo&apos;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: new Center(</span><br><span class="line">          child: new Text.rich(</span><br><span class="line">            TextSpan(</span><br><span class="line">              children: [</span><br><span class="line">                new TextSpan(text: &apos;hello: &apos;),</span><br><span class="line">                new TextSpan(</span><br><span class="line">                  text: &apos;world&apos;,</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                    color: Colors.red</span><br><span class="line">                  )</span><br><span class="line">                )</span><br><span class="line">              ]</span><br><span class="line">            )</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果<br><img src="2.png" alt="image.png"><br><code>TextSpan</code>需要套一层<code>Text.rich</code>，可以有<code>children</code>，<code>children</code>同为<code>TextSpan</code>，可以分别加不同的样式，这里只能加样式，不可以加其他的属性。<br>文本组件到这里就结束了，如有遗漏欢迎补充，如有错误请指正。</p>
]]></content>
  </entry>
  <entry>
    <title>flutter--官方示例 &amp; 代码解读</title>
    <url>/post/flutterOfficialExample/</url>
    <content><![CDATA[<p>语法的东西就不详细说了，可以看官方文档了解一下<a href="https://www.dartcn.com/" target="_blank" rel="noopener">https://www.dartcn.com/</a>，学习过程中也会介绍一些。</p>
<a id="more"></a>
<p>环境搭好，怎么搭看官网，很详细，并且为中国用户提供了解决方案</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter help</span><br></pre></td></tr></table></figure>

<p>可以看见官方提供的命令。接下来创建个项目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter create mypp</span><br></pre></td></tr></table></figure>

<p>创建好之后进入<code>myapp</code>先看一下模拟器（android stidio里边自己下）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  myapp flutter emulators    //查看可用的模拟器</span><br></pre></td></tr></table></figure>

<p><img src="1.png" alt="image.png"><br>我这里有两个，运行android模拟器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ flutter emulators --launch Nexus_5X_API_28</span><br></pre></td></tr></table></figure>

<p>模拟器跑起来之后，查看一下可用设备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter devices</span><br></pre></td></tr></table></figure>

<p><img src="2.png" alt="image.png"><br>接下来把项目跑起来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//只有一个可用设备</span><br><span class="line">flutter run</span><br><span class="line">//如果有多个设备需要指定id</span><br><span class="line">flutter run -d emulator-5554</span><br></pre></td></tr></table></figure>

<p><img src="3.png" alt="image.png"></p>
<p><img src="4.png" alt="image.png"><br>可以看到项目已经跑起来了<br>命令直接按<code>r</code>热重载，<code>R</code>重启项目。<br>按<code>h</code>可以查看更多命令。<br><img src="5.png" alt="image.png"><br>我们来看一下代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;  //引入material风格的ui库</span><br><span class="line"></span><br><span class="line">//每个dart项目都要有一个main函数</span><br><span class="line">//void表示空类型，写到函数前边代表这个函数没有返回值</span><br><span class="line">//这里用了dart语法的箭头函数</span><br><span class="line">void main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line">//main函数跑的MyApp在这里定义  继承了无状态Widget（相当于react的组件）</span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">  @override    //@元数据  为代码添加额外的信息  @override代表下边这个是一个覆写超类的函数</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &apos;Flutter Demo&apos;,</span><br><span class="line">      //app的主题</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        //这里给了蓝色，可以改成red、green、yellow等其他颜色然后在命令行按r看一下效果</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      //路由主页</span><br><span class="line">      home: MyHomePage(title: &apos;Flutter Demo Home Page&apos;),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建主页  这是一个有状态组件</span><br><span class="line">class MyHomePage extends StatefulWidget &#123;</span><br><span class="line">  //接收一个参数title</span><br><span class="line">  MyHomePage(&#123;Key key, this.title&#125;) : super(key: key);</span><br><span class="line">  final String title;</span><br><span class="line">  //有状态组件还需要一个State类</span><br><span class="line">  @override</span><br><span class="line">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//有状态组件的State类</span><br><span class="line">class _MyHomePageState extends State&lt;MyHomePage&gt; &#123;</span><br><span class="line">  //状态</span><br><span class="line">  int _counter = 0;</span><br><span class="line">  //声明一个改变状态的函数</span><br><span class="line">  void _incrementCounter() &#123;</span><br><span class="line">    //和react的setState作用一样</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    //这里有个Scaffold组件，先不用管干啥的，介绍组件的时候会详细介绍</span><br><span class="line">    return Scaffold(</span><br><span class="line">      //主页的标题栏</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        //传入的title</span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      //主页内容，Center组件里边的内容水平垂直居中，以后再详细介绍</span><br><span class="line">      body: Center(</span><br><span class="line">        //Column的子组件垂直排列</span><br><span class="line">        child: Column(</span><br><span class="line">          //主轴上的对其方式，这里是居中</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          //多个子组件用children，单个子组件用child（有child的组件，不一定有children，有的组件只可以有一个子组件）</span><br><span class="line">          //这里是一个泛型数组里只能放Widget</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            //文本组件，可以设置文字样式</span><br><span class="line">            Text(</span><br><span class="line">              &apos;You have pushed the button this many times:&apos;,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              //相当于js里边的`$&#123;_counter&#125;`</span><br><span class="line">              &apos;$_counter&apos;,</span><br><span class="line">              //文本样式</span><br><span class="line">              style: Theme.of(context).textTheme.display1,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      //ui库提供的浮动按钮</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _incrementCounter,</span><br><span class="line">        //长按提示</span><br><span class="line">        tooltip: &apos;Increment&apos;,</span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>差不多就这些东西吧，详细的东西放到后边，这里先介绍一下结构。</p>
]]></content>
  </entry>
  <entry>
    <title>花瓣飘落效果</title>
    <url>/post/petalsFluttered/</url>
    <content><![CDATA[<p>先上效果：<a href="https://monkeyinwind.github.io/canvaspetal/index.html" target="_blank" rel="noopener">https://monkeyinwind.github.io/canvaspetal/index.html</a><br>github：<a href="https://github.com/MonkeyInWind/canvaspetal" target="_blank" rel="noopener">https://github.com/MonkeyInWind/canvaspetal</a></p>
<a id="more"></a>
<p>这个demo写了很久了，今天有时间简单写一下过程。<br>用了react，这个不重要，随便用什么环境都可以。<br>首先花瓣要有素材，随便搜了一下，切了几个出来。</p>
<p><img src="1.png" alt="image.png"></p>
<h1 id="1、在页面上添加一个canvas"><a href="#1、在页面上添加一个canvas" class="headerlink" title="1、在页面上添加一个canvas"></a>1、在页面上添加一个canvas</h1><p>整个页面只有一个canvas，我们需要这个canvas占满整个浏览器可视区，并且在浏览器窗口改变大小的时候依然和可视区大小相同，同时给canvas加个背景色。<br><img src="2.png" alt="image.png"><br>这一步很简单没有什么需要说的。</p>
<h1 id="2、在canvas上画一个花瓣"><a href="#2、在canvas上画一个花瓣" class="headerlink" title="2、在canvas上画一个花瓣"></a>2、在canvas上画一个花瓣</h1><p>创建一个<code>createPetal</code>函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">createPetal() &#123;</span><br><span class="line">    let canvas = this.refs[&quot;canvas&quot;];</span><br><span class="line">    let ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    let img = new Image();</span><br><span class="line">    img.src = require(&quot;./images/petal1.png&quot;);</span><br><span class="line">    img.onload = () =&gt; &#123;</span><br><span class="line">      ctx.drawImage(img, 100, 100);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>在<code>componentDidMount</code>调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    this.setCanvas();</span><br><span class="line">    window.onresize = this.setCanvas;</span><br><span class="line">    this.createPetal();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这样就在<code>100， 100</code>这个位置画了个花瓣<br><img src="3.png" alt="image.png"></p>
<h1 id="3、让这个花瓣动起来"><a href="#3、让这个花瓣动起来" class="headerlink" title="3、让这个花瓣动起来"></a>3、让这个花瓣动起来</h1><p>canvas动画是高频率刷新，清空上一帧，画下一帧，看起来是动画。<br>了解了动画的原理，接下来就可以开始写动画，首先将坐标放到<code>state</code>中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.state = &#123;</span><br><span class="line">      cw: 0,</span><br><span class="line">      ch: 0,</span><br><span class="line">      x: 0,</span><br><span class="line">      y: 0</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>创建一个<code>go</code>函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go(ctx, img) &#123;</span><br><span class="line">    ctx.clearRect(0, 0, this.state.cw, this.state.ch);//清空画布</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      x: this.state.x + 1,</span><br><span class="line">      y: this.state.y + 1</span><br><span class="line">    &#125;);//移动花瓣坐标</span><br><span class="line">    ctx.drawImage(img, this.state.x, this.state.y);</span><br><span class="line">    window.requestAnimationFrame(() =&gt; &#123;</span><br><span class="line">      this.go(ctx, img);</span><br><span class="line">    &#125;);//重复清空画布，移动坐标重新画花瓣这个动作。</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>在<code>createPetal</code>中调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">createPetal() &#123;</span><br><span class="line">    let canvas = this.refs[&quot;canvas&quot;];</span><br><span class="line">    let ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    let img = new Image();</span><br><span class="line">    img.src = require(&quot;./images/petal1.png&quot;);</span><br><span class="line">    img.onload = () =&gt; &#123;</span><br><span class="line">      ctx.drawImage(img, this.state.x, this.state.y);</span><br><span class="line">      this.go(ctx, img);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>接下来可以看到效果。<br><img src="4.gif" alt="Feb-03-2019 10-16-19.gif"><br>录的有点卡，实际上要比这个效果好很多。。。<br>有没有发现问题，花瓣位置超出浏览器之后去哪了打印一下坐标。<br><img src="5.png" alt="image.png"><br>可以看到还在继续飘，这不是想要的，所以在坐标超出浏览器之后让它回到初始位置。<br><code>go</code>这个函数修改如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go(ctx, img) &#123;</span><br><span class="line">    ctx.clearRect(0, 0, this.state.cw, this.state.ch);//清空画布</span><br><span class="line">    let x = this.state.x + 1;</span><br><span class="line">    let y = this.state.y + 1;</span><br><span class="line">    if (x &gt; this.state.cw || y &gt; this.state.ch) &#123;</span><br><span class="line">      x = 0;</span><br><span class="line">      y = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      x,</span><br><span class="line">      y</span><br><span class="line">    &#125;);//移动花瓣坐标</span><br><span class="line">    ctx.drawImage(img, this.state.x, this.state.y);</span><br><span class="line">    window.requestAnimationFrame(() =&gt; &#123;</span><br><span class="line">      this.go(ctx, img);</span><br><span class="line">    &#125;);//重复清空画布，移动坐标重新画花瓣这个动作。</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>看一下效果<br><img src="6.gif" alt="Feb-03-2019 10-24-14.gif"></p>
<p>这一步实现之后，有没有发现还有问题，要模拟自然飘落，这个花瓣不可能没有旋转，接下来再加上旋转。<br>这个旋转，需要的是画布旋转，旋转画好了之后再复位。<br>在<code>state</code>中加上旋转角度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.state = &#123;</span><br><span class="line">      cw: 0,</span><br><span class="line">      ch: 0,</span><br><span class="line">      x: 0,</span><br><span class="line">      y: 0,</span><br><span class="line">      r: 0   //旋转角度</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在<code>go</code>里面加上旋转，并且为了统一动作和计算方便，这里将图片位移改为画布位移，画图坐标相对画布始终在同一位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go(ctx, img) &#123;</span><br><span class="line">    ctx.clearRect(0, 0, this.state.cw, this.state.ch);//清空画布</span><br><span class="line">    let x = this.state.x + 1;</span><br><span class="line">    let y = this.state.y + 1;</span><br><span class="line">    let r = this.state.r + 0.1;</span><br><span class="line">    if (x &gt; this.state.cw || y &gt; this.state.ch) &#123;</span><br><span class="line">      x = 0;</span><br><span class="line">      y = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">      r</span><br><span class="line">    &#125;);//移动花瓣坐标</span><br><span class="line">    ctx.save();//保存画布当前状态</span><br><span class="line">    ctx.translate(this.state.x, this.state.y); //改为画布位移</span><br><span class="line">    ctx.rotate(this.state.r);   //画布旋转</span><br><span class="line">    ctx.drawImage(img, 0, 0);  //画图坐标始终在画布左上角</span><br><span class="line">    ctx.restore();</span><br><span class="line">    window.requestAnimationFrame(() =&gt; &#123;</span><br><span class="line">      this.go(ctx, img);</span><br><span class="line">    &#125;);//重复清空画布，移动坐标重新画花瓣这个动作。</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><img src="7.gif" alt="Feb-03-2019 10-48-19.gif"><br>和预想的不太一样，这是因为画布默认的旋转中心为左上角，<br>我们需要将旋转中心移到图片的中心。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go(ctx, img) &#123;</span><br><span class="line">    ctx.clearRect(0, 0, this.state.cw, this.state.ch);//清空画布</span><br><span class="line">    let w = img.width;</span><br><span class="line">    let h = img.height;</span><br><span class="line">    let x = this.state.x + 1;</span><br><span class="line">    let y = this.state.y + 1;</span><br><span class="line">    let r = this.state.r + 0.1;</span><br><span class="line">    if (x &gt; this.state.cw || y &gt; this.state.ch) &#123;</span><br><span class="line">      x = 0;</span><br><span class="line">      y = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">      r</span><br><span class="line">    &#125;);//移动花瓣坐标</span><br><span class="line">    ctx.save();//保存画布当前状态</span><br><span class="line">    ctx.translate(this.state.x + w / 2, this.state.y + h / 2); //改为画布位移</span><br><span class="line">    ctx.rotate(this.state.r);</span><br><span class="line">    ctx.drawImage(img, -w / 2, - h / 2);  //画图坐标始终在画布左上角</span><br><span class="line">    ctx.restore();</span><br><span class="line">    window.requestAnimationFrame(() =&gt; &#123;</span><br><span class="line">      this.go(ctx, img);</span><br><span class="line">    &#125;);//重复清空画布，移动坐标重新画花瓣这个动作。</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>看一下效果<br><img src="8.gif" alt="Feb-03-2019 10-55-18.gif"><br>旋转是有了，<br>但是好像不太对，只绕Z轴旋转，要让它变成3D旋转，这里要用到缩放<code>scale</code>，缩放这里不可能一直放大或者缩小，所以还要加一个变量控制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.state = &#123;</span><br><span class="line">      cw: 0,</span><br><span class="line">      ch: 0,</span><br><span class="line">      x: 0,</span><br><span class="line">      y: 0,</span><br><span class="line">      r: 0,</span><br><span class="line">      scale: 1,</span><br><span class="line">      toLarge: true</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>接下来将<code>go</code>改一下，加上<code>scale</code>并且旋转速度调整一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go(ctx, img) &#123;</span><br><span class="line">    ctx.clearRect(0, 0, this.state.cw, this.state.ch);//清空画布</span><br><span class="line">    let w = img.width;</span><br><span class="line">    let h = img.height;</span><br><span class="line">    let x = this.state.x + 1;</span><br><span class="line">    let y = this.state.y + 1;</span><br><span class="line">    let r = this.state.r + 0.05;</span><br><span class="line">    let scale = this.state.scale;</span><br><span class="line">    let toLarge = this.state.toLarge;</span><br><span class="line"></span><br><span class="line">    if (scale &gt;= 1) &#123;</span><br><span class="line">      toLarge = false;</span><br><span class="line">    &#125; else if (scale &lt;= 0) &#123;</span><br><span class="line">      toLarge = true;</span><br><span class="line">    &#125;//这里根据scale大小设置toLarge</span><br><span class="line"></span><br><span class="line">    if (toLarge) &#123;</span><br><span class="line">      scale += 0.01;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      scale -= 0.01;</span><br><span class="line">    &#125;//这里根据toLarge更改scale值</span><br><span class="line">    if (x &gt; this.state.cw || y &gt; this.state.ch) &#123;</span><br><span class="line">      x = 0;</span><br><span class="line">      y = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">      r,</span><br><span class="line">      scale,</span><br><span class="line">      toLarge</span><br><span class="line">    &#125;);//移动花瓣坐标</span><br><span class="line">    ctx.save();//保存画布当前状态</span><br><span class="line">    ctx.translate(this.state.x + w / 2, this.state.y + h / 2); //改为画布位移</span><br><span class="line">    ctx.rotate(this.state.r);</span><br><span class="line">    ctx.scale(1, this.state.scale);</span><br><span class="line">    ctx.drawImage(img, -w / 2, - h / 2);  //画图坐标始终在画布左上角</span><br><span class="line">    ctx.restore();</span><br><span class="line">    window.requestAnimationFrame(() =&gt; &#123;</span><br><span class="line">      this.go(ctx, img);</span><br><span class="line">    &#125;);//重复清空画布，移动坐标重新画花瓣这个动作。</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>看一下效果<br><img src="9.gif" alt="Feb-03-2019 11-13-14.gif"><br>至此一个花瓣就写完了。<br>但是我们想要的是很多个花瓣同时飘。<br>这就需要一个花瓣的类。</p>
<h1 id="4、创建一个花瓣的class"><a href="#4、创建一个花瓣的class" class="headerlink" title="4、创建一个花瓣的class"></a>4、创建一个花瓣的class</h1><p>新建一个<code>petal.js</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default class Petal &#123;</span><br><span class="line">  constructor(w, h) &#123;</span><br><span class="line">    this.canvasW = w;  //canvas宽</span><br><span class="line">    this.canvasH = h;  //canvas高</span><br><span class="line">    this.w = 0;        //花瓣宽</span><br><span class="line">    this.h = 0;        //花瓣高</span><br><span class="line">    this.x = 0;        //初始x坐标</span><br><span class="line">    this.y = 0;        //初始y坐标</span><br><span class="line">    this.r = 0;        //初始旋转角度</span><br><span class="line">    this.scale = 1;    //初始缩放</span><br><span class="line">    this.toLarge = false;   //默认放大为false</span><br><span class="line">    this.speedX = 1;   //x方向速度</span><br><span class="line">    this.speedY = 1;   //y方向速度</span><br><span class="line">    this.speedScale= 0.01  //缩放速度</span><br><span class="line">    this.speedR = 0.05    //旋转速度</span><br><span class="line">  &#125;</span><br><span class="line">  //数据初始化，用于当花瓣超出浏览器可视区时重置位置</span><br><span class="line">  init() &#123;</span><br><span class="line">    this.x = 0;</span><br><span class="line">    this.y = 0;</span><br><span class="line">    this.r = 0;</span><br><span class="line">    this.scale = 1;</span><br><span class="line">    this.speedX = 1;</span><br><span class="line">    this.speedY = 1;</span><br><span class="line">    this.speedScale = 0.01;</span><br><span class="line">    this.speedR = 0.05;</span><br><span class="line">  &#125;</span><br><span class="line">  //画布位移、画图、画布复位</span><br><span class="line">  draw(ctx, img) &#123;</span><br><span class="line">    this.w = img.width;</span><br><span class="line">    this.h = img.height;</span><br><span class="line">    ctx.save();     //保存当前画布状态</span><br><span class="line">    ctx.translate(this.x + this.w / 2,  this.y + this.h / 2);  //画布位移</span><br><span class="line">    ctx.rotate(this.r);   //画布旋转</span><br><span class="line">    ctx.scale(1, this.scale);  //画布缩放</span><br><span class="line">    ctx.drawImage(img, -this.w / 2, -this.h / 2);   //画图</span><br><span class="line">    ctx.restore();    //画布复位</span><br><span class="line">  &#125;</span><br><span class="line">  //计算坐标</span><br><span class="line">  move() &#123;</span><br><span class="line">    this.x += this.speedX;</span><br><span class="line">    this.y += this.speedY;</span><br><span class="line">    this.r += this.speedR;</span><br><span class="line">    if (this.scale &gt;= 1) &#123;</span><br><span class="line">      this.toLarge = false;</span><br><span class="line">    &#125; else if (this.scale &lt;= 0) &#123;</span><br><span class="line">      this.toLarge = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.toLarge) &#123;</span><br><span class="line">      this.scale += this.speedScale;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      this.scale -= this.speedScale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.x &gt;= this.canvasW || this.y &gt;= this.canvasH) &#123;</span><br><span class="line">      this.init();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>App.js</code>内引入并new一个花瓣，打印一下；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &apos;./App.css&apos;;</span><br><span class="line">import Petal from &apos;./petal&apos;;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">    this.state = &#123;</span><br><span class="line">      cw: 0,</span><br><span class="line">      ch: 0,</span><br><span class="line">      x: 0,</span><br><span class="line">      y: 0,</span><br><span class="line">      r: 0,</span><br><span class="line">      scale: 1,</span><br><span class="line">      toLarge: true</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.setCanvas = this.setCanvas.bind(this);</span><br><span class="line">    this.componentDidMount = this.componentDidMount.bind(this);</span><br><span class="line">    this.createPetal = this.createPetal.bind(this);</span><br><span class="line">    this.go = this.go.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setCanvas() &#123;</span><br><span class="line">    let W = document.documentElement.clientWidth;</span><br><span class="line">    let H = document.documentElement.clientHeight;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      cw: W,</span><br><span class="line">      ch: H</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  createPetal() &#123;</span><br><span class="line">    let canvas = this.refs[&quot;canvas&quot;];</span><br><span class="line">    let ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    let img = new Image();</span><br><span class="line">    img.src = require(&quot;./images/petal1.png&quot;);</span><br><span class="line">    img.onload = () =&gt; &#123;</span><br><span class="line">      //ctx.drawImage(img, this.state.x, this.state.y);</span><br><span class="line">      // this.go(ctx, img);</span><br><span class="line">      let petal = new Petal(this.state.cw, this.state.ch);</span><br><span class="line">      console.log(petal);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  go(ctx, img) &#123;</span><br><span class="line">    ctx.clearRect(0, 0, this.state.cw, this.state.ch);//清空画布</span><br><span class="line">    let w = img.width;</span><br><span class="line">    let h = img.height;</span><br><span class="line">    let x = this.state.x + 1;</span><br><span class="line">    let y = this.state.y + 1;</span><br><span class="line">    let r = this.state.r + 0.05;</span><br><span class="line">    let scale = this.state.scale;</span><br><span class="line">    let toLarge = this.state.toLarge;</span><br><span class="line"></span><br><span class="line">    if (scale &gt;= 1) &#123;</span><br><span class="line">      toLarge = false;</span><br><span class="line">    &#125; else if (scale &lt;= 0) &#123;</span><br><span class="line">      toLarge = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (toLarge) &#123;</span><br><span class="line">      scale += 0.01;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      scale -= 0.01;</span><br><span class="line">    &#125;</span><br><span class="line">    if (x &gt; this.state.cw || y &gt; this.state.ch) &#123;</span><br><span class="line">      x = 0;</span><br><span class="line">      y = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">      r,</span><br><span class="line">      scale,</span><br><span class="line">      toLarge</span><br><span class="line">    &#125;);//移动花瓣坐标</span><br><span class="line">    ctx.save();//保存画布当前状态</span><br><span class="line">    ctx.translate(this.state.x + w / 2, this.state.y + h / 2); //改为画布位移</span><br><span class="line">    ctx.rotate(this.state.r);</span><br><span class="line">    ctx.scale(1, this.state.scale);</span><br><span class="line">    ctx.drawImage(img, -w / 2, - h / 2);  //画图坐标始终在画布左上角</span><br><span class="line">    ctx.restore();</span><br><span class="line">    window.requestAnimationFrame(() =&gt; &#123;</span><br><span class="line">      this.go(ctx, img);</span><br><span class="line">    &#125;);//重复清空画布，移动坐标重新画花瓣这个动作。</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.setCanvas();</span><br><span class="line">    window.onresize = this.setCanvas;</span><br><span class="line">    this.createPetal();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">      &lt;canvas id=&quot;canvas&quot; ref=&quot;canvas&quot; width=&#123;this.state.cw&#125; height=&#123;this.state.ch&#125;&gt;&lt;/canvas&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>

<p><img src="10.png" alt="image.png"><br>可以看见已经创建了一个初始的花瓣，暂时还没有画图片。<br>接下来就是把之前的go改一下，画上花瓣并动起来。<br><code>App.js</code>更改后如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &apos;./App.css&apos;;</span><br><span class="line">import Petal from &apos;./petal&apos;;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">    this.state = &#123;</span><br><span class="line">      cw: 0,</span><br><span class="line">      ch: 0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.setCanvas = this.setCanvas.bind(this);</span><br><span class="line">    this.componentDidMount = this.componentDidMount.bind(this);</span><br><span class="line">    this.createPetal = this.createPetal.bind(this);</span><br><span class="line">    this.go = this.go.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setCanvas() &#123;</span><br><span class="line">    let W = document.documentElement.clientWidth;</span><br><span class="line">    let H = document.documentElement.clientHeight;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      cw: W,</span><br><span class="line">      ch: H</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  createPetal() &#123;</span><br><span class="line">    let canvas = this.refs[&quot;canvas&quot;];</span><br><span class="line">    let ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    let img = new Image();</span><br><span class="line">    img.src = require(&quot;./images/petal1.png&quot;);</span><br><span class="line">    img.onload = () =&gt; &#123;</span><br><span class="line">      let petal = new Petal(this.state.cw, this.state.ch);</span><br><span class="line">      this.go(ctx, petal, img);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  go(ctx, petal, img) &#123;</span><br><span class="line">    let W = this.state.cw;</span><br><span class="line">    let H = this.state.ch;</span><br><span class="line">    //浏览器窗口改变大小时同步更新petal的cnavas宽高值，与花瓣坐标对比判断是否在可视区内</span><br><span class="line">    petal.canvasW = W;</span><br><span class="line">    petal.canvasH = H;</span><br><span class="line">    ctx.clearRect(0, 0, this.state.cw, this.state.ch);//清空画布</span><br><span class="line">    petal.move();</span><br><span class="line">    petal.draw(ctx, img);</span><br><span class="line"></span><br><span class="line">    window.requestAnimationFrame(() =&gt; &#123;</span><br><span class="line">      this.go(ctx, petal, img);</span><br><span class="line">    &#125;);//重复清空画布，移动坐标重新画花瓣这个动作。</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.setCanvas();</span><br><span class="line">    window.onresize = this.setCanvas;</span><br><span class="line">    this.createPetal();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">      &lt;canvas id=&quot;canvas&quot; ref=&quot;canvas&quot; width=&#123;this.state.cw&#125; height=&#123;this.state.ch&#125;&gt;&lt;/canvas&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>

<h1 id="5、很多花瓣"><a href="#5、很多花瓣" class="headerlink" title="5、很多花瓣"></a>5、很多花瓣</h1><p>一个花瓣已经完成了，接下来就是很多个花瓣。<br>这里涉及到几个点：<br>1、img的src不能用变量，所以要用字符串拼接变量的形式。<br>2、一个花瓣用了onload，很多花瓣很明显一个onload已经不能满足了，这里用<code>promise.all</code>。<br>3、创建很多花瓣，并不是每次<code>drawImage</code>都需要<code>clearRect</code>，需要在第0个画之前清空canvas。<br>4、关于初始坐标和初始速度，很多个花瓣就需要随机坐标和随机速度，而且初始化所在的区域需要计算，否则会出现花瓣位移过程中不经过浏览器可视区或者分布不均。</p>
<h5 id="img的src"><a href="#img的src" class="headerlink" title="img的src"></a>img的src</h5><p>在<code>state</code>里加上花瓣数组，这里不能带后缀。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.state = &#123;</span><br><span class="line">      cw: 0,</span><br><span class="line">      ch: 0,</span><br><span class="line">      n: 60,   //所要创建的花瓣数量</span><br><span class="line">      imgnames: [</span><br><span class="line">        &quot;petal1&quot;,</span><br><span class="line">        &quot;petal2&quot;,</span><br><span class="line">        &quot;petal3&quot;,</span><br><span class="line">        &quot;petal4&quot;,</span><br><span class="line">        &quot;petal5&quot;,</span><br><span class="line">        &quot;petal6&quot;,</span><br><span class="line">        &quot;petal7&quot;,</span><br><span class="line">        &quot;petal8&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>createPetal</code>函数改一下，创建多个img：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">createPetal() &#123;</span><br><span class="line">    let canvas = this.refs[&quot;canvas&quot;];</span><br><span class="line">    let ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    // let img = new Image();</span><br><span class="line">    // img.src = require(&quot;./images/petal1.png&quot;);</span><br><span class="line">    let totalNum = this.state.imgnames.length; //图片的总数量</span><br><span class="line">    for (let i = 0; i &lt; this.state.n; i++) &#123;</span><br><span class="line">      let imgname = this.state.imgnames[i % totalNum];</span><br><span class="line">      let img = new Image();</span><br><span class="line">      img.src = require(`./images/$&#123;imgname&#125;.png`);</span><br><span class="line">      console.log(img)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // img.onload = () =&gt; &#123;</span><br><span class="line">      // let petal = new Petal(this.state.cw, this.state.ch);</span><br><span class="line">      // this.go(ctx, petal, img);</span><br><span class="line">    // &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>打印出60个img，src为base64；</p>
<h5 id="所有图片onload"><a href="#所有图片onload" class="headerlink" title="所有图片onload"></a>所有图片onload</h5><p>这里把单个img的load封装为<code>promise</code>，添加到一个数组里，然后用<code>promise.all</code><br>新建一个<code>imgLoad</code>函数，返回一个load的<code>promise</code>;<br>新建一个allImgLoad函数，用于返回一个<code>promise.all</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">imgLoad(imgname) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        let img = new Image();</span><br><span class="line">        img.src = require(`./images/$&#123;imgname&#125;.png`);</span><br><span class="line">        img.onload = () =&gt; &#123;</span><br><span class="line">          resolve(img);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; catch(e) &#123;</span><br><span class="line">        reject(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  allImgLoad(imgnames) &#123;</span><br><span class="line">    let p = [];</span><br><span class="line">    for(let i = 0; i &lt; imgnames.length; i++) &#123;</span><br><span class="line">      p.push(this.imgLoad(imgnames[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    return Promise.all(p).then(res =&gt; &#123;</span><br><span class="line">      return res;</span><br><span class="line">    &#125;).catch((e) =&gt; &#123;</span><br><span class="line">      console.log(e);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  async createPetal() &#123;</span><br><span class="line">    let canvas = this.refs[&quot;canvas&quot;];</span><br><span class="line">    let ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    // let img = new Image();</span><br><span class="line">    // img.src = require(&quot;./images/petal1.png&quot;);</span><br><span class="line">    let imgnames = [];</span><br><span class="line">    let totalNum = this.state.imgnames.length; //图片的总数量</span><br><span class="line">    for (let i = 0; i &lt; this.state.n; i++) &#123;</span><br><span class="line">      let imgname = this.state.imgnames[i % totalNum];</span><br><span class="line">      imgnames.push(imgname);</span><br><span class="line">    &#125;</span><br><span class="line">    let imgs = await this.allImgLoad(imgnames);</span><br><span class="line">    console.log(imgs)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到打印出了60个img<br><img src="11.png" alt="image.png"></p>
<h5 id="很多花瓣"><a href="#很多花瓣" class="headerlink" title="很多花瓣"></a>很多花瓣</h5><p>每一帧画60个花瓣，并且在第0个画之前清空画布，如果每画一个都清空一次，会把前59个都清空，画布上只有最后一个。<br>在<code>Petal</code>类里边的<code>move</code>和<code>init</code>用异步，加个<code>async</code>，否则会出现有的花瓣跳帧或者init的时候花瓣突然出现在屏幕上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default class Petal &#123;</span><br><span class="line">  constructor(w, h) &#123;</span><br><span class="line">    this.canvasW = w;  //canvas宽</span><br><span class="line">    this.canvasH = h;  //canvas高</span><br><span class="line">    this.w = 0;        //花瓣宽</span><br><span class="line">    this.h = 0;        //花瓣高</span><br><span class="line">    this.x = 0;        //初始x坐标</span><br><span class="line">    this.y = 0;        //初始y坐标</span><br><span class="line">    this.r = 0;        //初始旋转角度</span><br><span class="line">    this.scale = 1;    //初始缩放</span><br><span class="line">    this.toLarge = false;   //默认放大为false</span><br><span class="line">    this.speedX = 1;   //x方向速度</span><br><span class="line">    this.speedY = 1;   //y方向速度</span><br><span class="line">    this.speedScale= 0.01  //缩放速度</span><br><span class="line">    this.speedR = 0.05    //旋转速度</span><br><span class="line">  &#125;</span><br><span class="line">  //数据初始化，用于当花瓣超出浏览器可视区时重置位置</span><br><span class="line">  async init() &#123;</span><br><span class="line">    this.x = 0;</span><br><span class="line">    this.y = 0;</span><br><span class="line">    this.r = 0;</span><br><span class="line">    this.scale = 1;</span><br><span class="line">    this.speedX = 1;</span><br><span class="line">    this.speedY = 1;</span><br><span class="line">    this.speedScale = 0.01;</span><br><span class="line">    this.speedR = 0.05;</span><br><span class="line">  &#125;</span><br><span class="line">  //画布位移、画图、画布复位</span><br><span class="line">  draw(ctx, img) &#123;</span><br><span class="line">    this.w = img.width;</span><br><span class="line">    this.h = img.height;</span><br><span class="line">    ctx.save();     //保存当前画布状态</span><br><span class="line">    ctx.translate(this.x + this.w / 2,  this.y + this.h / 2);  //画布位移</span><br><span class="line">    ctx.rotate(this.r);   //画布旋转</span><br><span class="line">    ctx.scale(1, this.scale);  //画布缩放</span><br><span class="line">    ctx.drawImage(img, -this.w / 2, -this.h / 2);   //画图</span><br><span class="line">    ctx.restore();    //画布复位</span><br><span class="line">  &#125;</span><br><span class="line">  //计算坐标</span><br><span class="line">  async move() &#123;</span><br><span class="line">    this.x += this.speedX;</span><br><span class="line">    this.y += this.speedY;</span><br><span class="line">    this.r += this.speedR;</span><br><span class="line">    if (this.scale &gt;= 1) &#123;</span><br><span class="line">      this.toLarge = false;</span><br><span class="line">    &#125; else if (this.scale &lt;= 0) &#123;</span><br><span class="line">      this.toLarge = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.toLarge) &#123;</span><br><span class="line">      this.scale += this.speedScale;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      this.scale -= this.speedScale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.x &gt;= this.canvasW || this.y &gt;= this.canvasH) &#123;</span><br><span class="line">      await this.init();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &apos;./App.css&apos;;</span><br><span class="line">import Petal from &apos;./petal&apos;;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">    this.state = &#123;</span><br><span class="line">      cw: 0,</span><br><span class="line">      ch: 0,</span><br><span class="line">      n: 60,</span><br><span class="line">      imgnames: [</span><br><span class="line">        &quot;petal1&quot;,</span><br><span class="line">        &quot;petal2&quot;,</span><br><span class="line">        &quot;petal3&quot;,</span><br><span class="line">        &quot;petal4&quot;,</span><br><span class="line">        &quot;petal5&quot;,</span><br><span class="line">        &quot;petal6&quot;,</span><br><span class="line">        &quot;petal7&quot;,</span><br><span class="line">        &quot;petal8&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.setCanvas = this.setCanvas.bind(this);</span><br><span class="line">    this.componentDidMount = this.componentDidMount.bind(this);</span><br><span class="line">    this.createPetal = this.createPetal.bind(this);</span><br><span class="line">    this.go = this.go.bind(this);</span><br><span class="line">    this.imgLoad = this.imgLoad.bind(this);</span><br><span class="line">    this.allImgLoad = this.allImgLoad.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setCanvas() &#123;</span><br><span class="line">    let W = document.documentElement.clientWidth;</span><br><span class="line">    let H = document.documentElement.clientHeight;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      cw: W,</span><br><span class="line">      ch: H</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  imgLoad(imgname) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        let img = new Image();</span><br><span class="line">        img.src = require(`./images/$&#123;imgname&#125;.png`);</span><br><span class="line">        img.onload = () =&gt; &#123;</span><br><span class="line">          resolve(img);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; catch(e) &#123;</span><br><span class="line">        reject(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  allImgLoad(imgnames) &#123;</span><br><span class="line">    let p = [];</span><br><span class="line">    for(let i = 0; i &lt; imgnames.length; i++) &#123;</span><br><span class="line">      p.push(this.imgLoad(imgnames[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    return Promise.all(p).then(res =&gt; &#123;</span><br><span class="line">      return res;</span><br><span class="line">    &#125;).catch((e) =&gt; &#123;</span><br><span class="line">      console.log(e);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  async createPetal() &#123;</span><br><span class="line">    let canvas = this.refs[&quot;canvas&quot;];</span><br><span class="line">    let ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class="line">    let imgnames = [];</span><br><span class="line">    let totalNum = this.state.imgnames.length; //图片的总数量</span><br><span class="line">    for (let i = 0; i &lt; this.state.n; i++) &#123;</span><br><span class="line">      let imgname = this.state.imgnames[i % totalNum];</span><br><span class="line">      imgnames.push(imgname);</span><br><span class="line">    &#125;</span><br><span class="line">    let imgs = await this.allImgLoad(imgnames);</span><br><span class="line">    if(!imgs) return;</span><br><span class="line">    for(let i = 0; i &lt; imgs.length; i++) &#123;</span><br><span class="line">      let petal = new Petal(canvas.width, canvas.height);</span><br><span class="line">      this.go(ctx, petal, imgs[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  async go(ctx, petal, img, index) &#123;</span><br><span class="line">    let W = this.state.cw;</span><br><span class="line">    let H = this.state.ch;</span><br><span class="line">    //浏览器窗口改变大小时同步更新petal的cnavas宽高值，与花瓣坐标对比判断是否在可视区内</span><br><span class="line">    petal.canvasW = W;</span><br><span class="line">    petal.canvasH = H;</span><br><span class="line">    if( index === 0) &#123;</span><br><span class="line">      ctx.clearRect(0, 0, W, H);//清空画布</span><br><span class="line">    &#125;</span><br><span class="line">    await petal.move();</span><br><span class="line">    petal.draw(ctx, img);</span><br><span class="line"></span><br><span class="line">    window.requestAnimationFrame(() =&gt; &#123;</span><br><span class="line">      this.go(ctx, petal, img, index);</span><br><span class="line">    &#125;);//重复清空画布，移动坐标重新画花瓣这个动作。</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.setCanvas();</span><br><span class="line">    window.onresize = this.setCanvas;</span><br><span class="line">    this.createPetal();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">      &lt;canvas id=&quot;canvas&quot; ref=&quot;canvas&quot; width=&#123;this.state.cw&#125; height=&#123;this.state.ch&#125;&gt;&lt;/canvas&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>

<p>这个时候60个花瓣叠在一起，看一下效果<br><img src="12.gif" alt="Feb-03-2019 14-34-22.gif"></p>
<h5 id="随机初始化"><a href="#随机初始化" class="headerlink" title="随机初始化"></a>随机初始化</h5><p>首先要确定一下花瓣初始化的随机区域，有以下几点要求。<br>1、除了打开页面或者刷新页面，可以出现在浏览器可视区，其他情况下要出现在可视区外，从可视区边缘飘进可视区。<br>2、花瓣移动的路径要经过可视区，并且不会出现在左下角或者右上角只有半个花瓣划过的情况，没有意义。<br>3、分布均匀</p>
<p>接下来就是具体实施，先画个图，便于理解。<br><img src="13.png" alt="image.png"></p>
<p>把浏览器45度向左上方平移，我们需要花瓣出现在两条红线之间的区域，并且当花瓣移出浏览器可视区之后，只能出现在蓝色斜线区域。<br>这里花瓣首先随机出现在整个大矩形里，如果出现在想要的区域外，我们做如下处理：<br><img src="14.png" alt="image.png"><br>这样可以保证所有花瓣都会经过浏览器可视区，左下角和右上角不会出现半个花瓣的情况，并且均匀分布整个浏览器可视区。<br>移动端同理这里就不画图了下面上代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const randNum = (min, max) =&gt; &#123;</span><br><span class="line">  return Math.random() * (max - min) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const calculateXY = (w, h) =&gt; &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    let x = randNum(-h + 100, w - 100);</span><br><span class="line">    let y = randNum(-h + 100, h - 100);</span><br><span class="line">    let b = 60;   //这里是加一个偏移量，防止移出可视区后初始化位置时突然在可视区上边缘和做边缘出现。</span><br><span class="line">    if (w &gt;= h) &#123;</span><br><span class="line">      let a = w - h;</span><br><span class="line">      //坐标在canvas区域，移到左上方同canvas大小区域</span><br><span class="line">      if (x &gt; -b &amp;&amp; y &gt; -b) &#123;</span><br><span class="line">        x = randNum(-h + b, a - b);</span><br><span class="line">        y = randNum(-h + b, -b);</span><br><span class="line">      &#125; else if (x &gt; a - b &amp;&amp; y &lt; -(h - (x - a) + b)) &#123;</span><br><span class="line">        //坐标在canvas右上方三角形区域，飘落不经过canvas，移到正上方三角形区域</span><br><span class="line">        y = randNum(-(h - (x - a) + b), -b);</span><br><span class="line">      &#125; else if (x &lt; -b &amp;&amp; y &gt; h + x - b) &#123;</span><br><span class="line">        //坐标在canvas左下方三角形区域，飘落不经过canvas，移到正左方三角形区域</span><br><span class="line">        y = randNum(0, h + x - b);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      let a = h - w;</span><br><span class="line">      if (x &gt; -b &amp;&amp; y &gt; -b) &#123;</span><br><span class="line">        x = randNum(-w + b, -b);</span><br><span class="line">        y = randNum(-w + b, a - b);</span><br><span class="line">      &#125; else if (x &gt; -b &amp;&amp; y &lt; -(w - x) + b) &#123;</span><br><span class="line">        y = randNum(-(w - x) + b, -b);</span><br><span class="line">      &#125; else if (x &lt; -b &amp;&amp; y &gt; h - x - b) &#123;</span><br><span class="line">        y = randNum(a, h - x - b);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(&#123;x, y&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class Petal &#123;</span><br><span class="line">  constructor(w, h) &#123;</span><br><span class="line">    this.canvasW = w;</span><br><span class="line">    this.canvasH = h;</span><br><span class="line">    this.w = 0;</span><br><span class="line">    this.h = 0;</span><br><span class="line">    this.y = randNum(-h + 100, h - 100); //这里两个100是防止直接出现在可视区边缘半个直接飘出去了</span><br><span class="line">    this.x = randNum(-h + 100, w - 100);</span><br><span class="line">    this.r = Math.random();</span><br><span class="line">    this.scale = -Math.random();</span><br><span class="line">    this.toLarge = false;</span><br><span class="line">    this.speedX = Math.random() * 0.5 + 0.5;</span><br><span class="line">    this.speedY = this.speedX;</span><br><span class="line">    this.speedScale = Math.random() * 0.007;</span><br><span class="line">    this.speedR = Math.random() * 0.03;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw(ctx, img) &#123;</span><br><span class="line">    this.w = img.width;</span><br><span class="line">    this.h = img.height;</span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.translate(this.x + this.w / 2, this.y + this.h / 2);</span><br><span class="line">    ctx.rotate(this.r);</span><br><span class="line">    ctx.scale(1, this.scale);</span><br><span class="line">    ctx.drawImage(img, -this.w / 2, -this.h / 2);</span><br><span class="line">    ctx.restore();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  async init() &#123;</span><br><span class="line">    let xy = await calculateXY(this.canvasW, this.canvasH);</span><br><span class="line">    this.x = xy.x;</span><br><span class="line">    this.y = xy.y;</span><br><span class="line">    this.r = Math.random();</span><br><span class="line">    this.scale = -Math.random();</span><br><span class="line">    this.speedX = Math.random() * 0.5 + 0.3;</span><br><span class="line">    this.speedY = this.speedX;</span><br><span class="line">    this.speedScale = Math.random() * 0.004;</span><br><span class="line">    this.speedR = Math.random() * 0.03;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  async move() &#123;</span><br><span class="line">    this.x += this.speedX;</span><br><span class="line">    this.y += this.speedY;</span><br><span class="line">    this.r += this.speedR;</span><br><span class="line">    if (this.scale &gt;= 1) &#123;</span><br><span class="line">      this.toLarge = false;</span><br><span class="line">    &#125; else if (this.scale &lt;= 0) &#123;</span><br><span class="line">      this.toLarge = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.toLarge) &#123;</span><br><span class="line">      this.scale += this.speedScale;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      this.scale -= this.speedScale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (this.x &gt;= this.canvasW || this.y &gt;= this.canvasH) &#123;</span><br><span class="line">      await this.init();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里就完成了，看一下帧数。<br>打开chrome开发者模式<br><img src="15.png" alt="image.png"><br>选<code>rendering</code>，勾选<code>FPS meter</code><br><img src="16.png" alt="image.png"><br>可以看到在60左右，是比较理想的<br><img src="17.png" alt="image.png"></p>
]]></content>
  </entry>
  <entry>
    <title>mac mysql8 密码</title>
    <url>/post/macMysql8Password/</url>
    <content><![CDATA[<p>新电脑安装mysql之后第一次是无法登陆的因为没有初始密码，网上都是老版本的处理方法，mysql8已经失效。</p>
<a id="more"></a>
<h3 id="1、停止mysql服务"><a href="#1、停止mysql服务" class="headerlink" title="1、停止mysql服务"></a>1、停止mysql服务</h3><p>系统设置偏好 &gt; mysql &gt; Stop Mysql Server<br><img src="1.png" alt="image.png"></p>
<h3 id="2、跳过登陆"><a href="#2、跳过登陆" class="headerlink" title="2、跳过登陆"></a>2、跳过登陆</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo -i      //root权限</span><br><span class="line">sudo mysqld_safe --user=mysql --skip-grant-tables --skip-networking</span><br></pre></td></tr></table></figure>

<p><img src="2.png" alt="image.png"><br><code>这里不要动！！！</code><br>打开另一个终端窗口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure>

<p>直接回车就可以登陆mysql</p>
<h3 id="3、修改密码"><a href="#3、修改密码" class="headerlink" title="3、修改密码"></a>3、修改密码</h3><p>在这里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p>可以看见有个mysql数据库<br><img src="3.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<p>可以看见有个user的表，感兴趣可以看一下。<br>接下来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p><img src="4.png" alt="image.png"><br>重置密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;new password&apos;;</span><br></pre></td></tr></table></figure>

<p>关闭终端，重新打开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p[password]</span><br></pre></td></tr></table></figure>

<p>即可登陆mysql</p>
<h3 id="4、开机启动"><a href="#4、开机启动" class="headerlink" title="4、开机启动"></a>4、开机启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents/</span><br><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>centos 安装mysql8 以及常用sql语句</title>
    <url>/post/centOsInstallMysql/</url>
    <content><![CDATA[<p>安装环境：centos7<br>刚租了台服务器安装mysql的时候发现之前的笔记已经不合适了，更新一下。</p>
<a id="more"></a>
<h4 id="mysql安装配置"><a href="#mysql安装配置" class="headerlink" title="mysql安装配置"></a>mysql安装配置</h4><p>1、检测是否安装过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure>

<p>2、删除当前已安装版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps `rpm -qa | grep mysql`</span><br></pre></td></tr></table></figure>

<p>3、在线安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-server</span><br></pre></td></tr></table></figure>

<p><code>这里可能会找不到包，如果没有可用的包，按照如下操作</code><br>去这里<a href="http://repo.mysql.com/" target="_blank" rel="noopener">http://repo.mysql.com/</a><br>选择最新版本的<code>mysql-community</code>的<code>rpm包</code>复制链接地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://repo.mysql.com/mysql80-community-release-el7-1.noarch.rpm</span><br><span class="line">rpm -ivh mysql80-community-release-el7-1.noarch.rpm</span><br><span class="line">yum -y install mysql-server</span><br></pre></td></tr></table></figure>

<p>4、开启mysql服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>

<p>5、mysql添加开机启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig mysqld on</span><br></pre></td></tr></table></figure>

<p>6、初始化配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &apos;temporary password&apos; /var/log/mysqld.log    //查看初始密码</span><br><span class="line">2018-12-04T14:08:38.524688Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: #Fwd;l5cl*r*   //初始密码  这很反人类</span><br><span class="line">//下面初始化</span><br><span class="line">whereis mysql_secure_installation    //找到mysql_secure_installation</span><br><span class="line">mysql_secure_installation: /usr/bin/mysql_secure_installation /usr/share/man/man1/mysql_secure_installation.1.gz</span><br><span class="line">/usr/bin/mysql_secure_installation    //直接运行mysql_secure_installation</span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Enter password for user root:            //输入刚才查看的密码</span><br><span class="line"></span><br><span class="line">The existing password for the user account root has expired. Please set a new password.</span><br><span class="line"></span><br><span class="line">New password:                              //新密码大小写数字加特殊符号</span><br><span class="line"></span><br><span class="line">Re-enter new password:              //重复新密码</span><br><span class="line">The &apos;validate_password&apos; component is installed on the server.</span><br><span class="line">The subsequent steps will run with the existing configuration</span><br><span class="line">of the component.</span><br><span class="line">Using existing password for root.</span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 100</span><br><span class="line">Change the password for root ? ((Press y|Y for Yes, any other key for No) :        //直接跳过  选Y的话是重新设置密码</span><br><span class="line"> ... skipping.</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : y  //禁止匿名访问</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">&apos;localhost&apos;. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y  //不允许root远程访问</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">By default, MySQL comes with a database named &apos;test&apos; that</span><br><span class="line">anyone can access. This is also intended only for testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y  //删除测试数据库test</span><br><span class="line"> - Dropping test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y  重新加载授权信息</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All done!</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">#### 常用命令</span><br><span class="line">1、开启/关闭mysql服务</span><br></pre></td></tr></table></figure>

<p>service mysqld stop/restart</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2、访问mysql数据库</span><br></pre></td></tr></table></figure>

<p>mysql -uroot -p[password]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3、显示数据库列表</span><br></pre></td></tr></table></figure>

<p>show databases;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4、选择数据库</span><br></pre></td></tr></table></figure>

<p>use databases;    #数据库名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5、显示表</span><br></pre></td></tr></table></figure>

<p>show tables;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6、显示表结构</span><br></pre></td></tr></table></figure>

<p>describe table;     #表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7、新建/删除数据库</span><br></pre></td></tr></table></figure>

<p>create database 库名;<br>drop database 库名;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8、建表</span><br></pre></td></tr></table></figure>

<p>##demo##<br>CREATE TABLE user_info(<br>    -&gt; id varchar(30) NOT NULL,<br>    -&gt; user_name varchar(10),<br>    -&gt; password varchar(10),<br>    -&gt; PRIMARY KEY ( <code>id</code> )<br>    -&gt; );</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9、删除表</span><br></pre></td></tr></table></figure>

<p>drop table 表名;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10、清空表中数据</span><br></pre></td></tr></table></figure>

<p>delete from 表名;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11、显示表中所有数据</span><br></pre></td></tr></table></figure>

<p>select * from 表名;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12、表中添加一列  </span><br><span class="line">如果想在一个已经建好的表中添加一列：</span><br></pre></td></tr></table></figure>

<p>alter table TABLE_NAME add column NEW_COLUMN_NAME varchar(20) not null;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这条语句会向已有的表中加入新的一列，这一列在表的最后一列位置。如果我们希望添加在指定的一列：</span><br></pre></td></tr></table></figure>

<p>alter table TABLE_NAME add column NEW_COLUMN_NAME varchar(20) not null after COLUMN_NAME;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意，上面这个命令的意思是说添加新列到某一列后面。如果想添加到第一列的话：</span><br></pre></td></tr></table></figure>

<p>alter table TABLE_NAME add column NEW_COLUMN_NAME varchar(20) not null first;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13、修改一列数据长度/类型</span><br></pre></td></tr></table></figure>

<p>alter table user modify column id varchar(20);</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">14、删除列</span><br></pre></td></tr></table></figure>

<p>alter table user drop column id;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">15、中文显示？？？</span><br></pre></td></tr></table></figure>

<p>service mysqld stop      #关闭mysql<br>whereis my.cnf          #确定配置文件位置<br>vim /etc/my.cnf          #具体情况看自己的路径</p>
<p>#[mysqld]下加以下两行<br>character_set_server=utf8<br>init_connect=’SET NAMES utf8’</p>
<p>#保存退出<br>service mysqld start</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`需要注意的是，之前在默认情况下创建的表的编码格式并不会改变！所以，如果想让在修改编码格式之前就创建好的表也修改，使用如下指令`</span><br><span class="line">`1.修改数据库的编码格式`</span><br></pre></td></tr></table></figure>

<p>alter database &lt;数据库名&gt; character set utf8;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`2.修改数据表格编码格式`</span><br></pre></td></tr></table></figure>

<p>alter table &lt;表名&gt; character set utf8;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`3.修改字段编码格式`</span><br></pre></td></tr></table></figure>

<p>alter table &lt;表名&gt; change &lt;字段名&gt; &lt;字段名&gt; &lt;类型&gt; character set utf8;<br>//demo<br>alter table user change username username varchar(20) character set utf8 not null;</p>
<pre><code>`**修改完的数据库和库里的表 并不会使原来的数据生效，而是新加入的数据才会生效。`</code></pre>]]></content>
  </entry>
  <entry>
    <title>一个移动端翻页的封装</title>
    <url>/post/likeSwiper/</url>
    <content><![CDATA[<p>想写一个移动端的h5页面<br>还不想用swiper那些工具，主要是太大，我需要的仅仅只是一个翻页功能<br>所以自己写了一个  </p>
<a id="more"></a>
<p>地址：<a href="https://github.com/MonkeyInWind/switching" target="_blank" rel="noopener">https://github.com/MonkeyInWind/switching</a><br>效果预览：<a href="https://monkeyinwind.github.io/switching/" target="_blank" rel="noopener">https://monkeyinwind.github.io/switching/</a></p>
<p>下面说一下用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/MonkeyInWind/switching.git</span><br><span class="line">cd switching</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>安装好之后</p>
<p>开发模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>打包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>先说一下功能：<br>可以根据手滑动的八个方向切换界面<br>左上、上、右上 、右  这四个方向是下一页<br>左下、下、右下、左   这四个方向是上一页<br>手滑向哪个方向  被滑走的界面就飞向哪个方向<br>做了手指滑出屏幕判断<br>切换界面会触发slide事件  可以做动画<br>配置了babel和postcss  </p>
<p>用法：<br>html结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;main_container&quot;&gt;</span><br><span class="line">    &lt;section style=&quot;background-color: red&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;div1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;div2&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;./src/img/aa.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">    &lt;section style=&quot;background-color: blue&quot;&gt;&lt;/section&gt;</span><br><span class="line">    &lt;section style=&quot;background-color: yellow&quot;&gt;&lt;/section&gt;</span><br><span class="line">    &lt;section style=&quot;background-color: green&quot;&gt;&lt;/section&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>js:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var Switch = new Switching(&#123;</span><br><span class="line">    target: &apos;.main_container&apos;</span><br><span class="line">&#125;);</span><br><span class="line">Switch.on(&apos;slide&apos;, function (e) &#123;</span><br><span class="line">    console.log(e);  //返回一个对象 属性包括当前界面的index   当前界面DOM节点  所有界面的DOM   滑动方向</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Linux下安装Nginx</title>
    <url>/post/installNginxInLinux/</url>
    <content><![CDATA[<h3 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<h3 id="2、下载安装包"><a href="#2、下载安装包" class="headerlink" title="2、下载安装包"></a>2、下载安装包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br></pre></td></tr></table></figure>

<p><a href="http://nginx.org/download/" target="_blank" rel="noopener">http://nginx.org/download/</a><br>去上边地址找到自己想要安装的版本复制连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.9.9.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h3><p>解压到当前文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xvf nginx-1.9.9.tar.gz</span><br><span class="line">cd nginx-1.9.9</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>安装完成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ..</span><br></pre></td></tr></table></figure>

<p>会发现多了一个nginx的文件夹，nginx就被安装在这个目录下（nginx-1.9.9的文件夹和压缩包可以删了），测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd nginx/sbin</span><br><span class="line">./nginx -t</span><br></pre></td></tr></table></figure>

<p>打印如下信息， 安装完成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br></pre></td></tr></table></figure>

<h3 id="4、常用命令"><a href="#4、常用命令" class="headerlink" title="4、常用命令"></a>4、常用命令</h3><p>安装路径 <code>/usr/local/nginx</code> 下</p>
<p>开启：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./sbin/nginx</span><br></pre></td></tr></table></figure>

<p>关闭：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./sbin/nginx -s stop (或者：nginx -s quit)</span><br></pre></td></tr></table></figure>

<p>重启：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<p>查看进程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>视频切片转m3u8</title>
    <url>/post/videoToM3U8/</url>
    <content><![CDATA[<h3 id="1、安装ffmpeg"><a href="#1、安装ffmpeg" class="headerlink" title="1、安装ffmpeg"></a>1、安装ffmpeg</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<h3 id="2-安装ffmpeg依赖"><a href="#2-安装ffmpeg依赖" class="headerlink" title="2. 安装ffmpeg依赖"></a>2. 安装ffmpeg依赖</h3><p>查看安装信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew info ffmpeg</span><br></pre></td></tr></table></figure>

<p>会显示依赖安装情况❌ 表示未安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install 需要安装的依赖</span><br></pre></td></tr></table></figure>

<h3 id="3-视频转换"><a href="#3-视频转换" class="headerlink" title="3. 视频转换"></a>3. 视频转换</h3><p>查看视频信息，只有视频编码h.264，音频编码aac的mp4视频可以转m3u8</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffprobe trailer.mp4(视频文件+后缀 我的源文件就是mp4)</span><br></pre></td></tr></table></figure>

<p> 显示如下信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> ffprobe version 3.4 Copyright (c) 2007-2017 the FFmpeg developers</span><br><span class="line"> built with Apple LLVM version 9.0.0 (clang-900.0.37)</span><br><span class="line">configuration: --prefix=/usr/local/Cellar/ffmpeg/3.4 --enable-shared --enable-pthreads --enable-version3 --enable-hardcoded-tables --enable-avresample --cc=clang --    host-cflags= --host-ldflags= --enable-gpl --enable-libmp3lame --enable-libx264 --enable-libxvid --enable-opencl --enable-videotoolbox --disable-lzma</span><br><span class="line">libavutil      55. 78.100 / 55. 78.100</span><br><span class="line">libavcodec     57.107.100 / 57.107.100</span><br><span class="line"> libavformat    57. 83.100 / 57. 83.100</span><br><span class="line"> libavdevice    57. 10.100 / 57. 10.100</span><br><span class="line"> libavfilter     6.107.100 /  6.107.100</span><br><span class="line"> libavresample   3.  7.  0 /  3.  7.  0</span><br><span class="line"> libswscale      4.  8.100 /  4.  8.100</span><br><span class="line"> libswresample   2.  9.100 /  2.  9.100</span><br><span class="line"> libpostproc    54.  7.100 / 54.  7.100</span><br><span class="line"> Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &apos;trailer.mp4&apos;:</span><br><span class="line"> Metadata:</span><br><span class="line">   major_brand     : mp42</span><br><span class="line">   minor_version   : 0</span><br><span class="line">   compatible_brands: mp42mp41</span><br><span class="line">   creation_time   : 2017-11-27T13:16:02.000000Z</span><br><span class="line">   Duration: 00:04:02.47, start: 0.000000, bitrate: 10342 kb/s</span><br><span class="line">   Stream #0:0(eng): Video: h264 (Main) (avc1 / 0x31637661), yuv420p(tv, bt709), 1920x1080, 10018 kb/s, 25 fps, 25 tbr, 25k tbn, 50 tbc (default)</span><br><span class="line">    Metadata:</span><br><span class="line">     creation_time   : 2017-11-27T13:16:02.000000Z</span><br><span class="line">      handler_name    : Alias Data Handler</span><br><span class="line">    encoder         : AVC Coding</span><br><span class="line">   Stream #0:1(eng): Audio: aac (LC) (mp4a / 0x6134706D), 48000 Hz, stereo, fltp, 317 kb/s (default)</span><br><span class="line">   Metadata:</span><br><span class="line">    creation_time   : 2017-11-27T13:16:02.000000Z</span><br><span class="line">     handler_name    : Alias Data Handler</span><br></pre></td></tr></table></figure>

<p> 视频转mp4</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i 视频源文件.后缀 -acodec copy -vcodec copy out.mp4</span><br></pre></td></tr></table></figure>

<p>视频如果太大可以压缩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input_file -s 320x240 output_file</span><br></pre></td></tr></table></figure>

<p>分辨率自己看着改</p>
<p>mp4转ts</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i out.mp4 -c copy -bsf:v h264_mp4toannexb output.ts</span><br></pre></td></tr></table></figure>

<p>视频切片</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i output.ts -c copy -map 0 -f segment -segment_list playlist.m3u8 -segment_time 5 output%03d.ts</span><br></pre></td></tr></table></figure>

<p>命令里边的5为每段视频5秒，可自行调整，完成之后会生成一个playlist.m3u8和一堆.ts,切片到这里就完成了。</p>
<h3 id="4-页面插入视频"><a href="#4-页面插入视频" class="headerlink" title="4. 页面插入视频"></a>4. 页面插入视频</h3><p>试了两种方式<br>一种是video.js + videojs-contrib-hls.js<br>这种方式不兼容IE10-<br><a href="https://github.com/videojs/video.js" target="_blank" rel="noopener">video.js</a><br><a href="https://github.com/videojs/videojs-contrib-hls" target="_blank" rel="noopener">videojs-contrib-hls</a></p>
<pre><code>&lt;video id=example-video width=960 height=540 class=&quot;video-js vjs-default-skin&quot; controls&gt;
    &lt;source src=&quot;./video/playlist.m3u8&quot; type=&quot;application/x-mpegURL&quot;&gt;
&lt;/video&gt;
&lt;script src=&quot;video.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;videojs.hls.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    var player = videojs(&apos;example-video&apos;);
    player.play();
&lt;/script&gt;</code></pre><p>另一种方式用ckplayer<br>官网：<a href="http://www.ckplayer.com/" target="_blank" rel="noopener">http://www.ckplayer.com/</a><br>下载之后解压找到<code>crossdomain.xml</code>和<code>ckplayer</code>文件夹放到根目录下  </p>
<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;ckplayer/ckplayer.js&quot;&gt;&lt;/script&gt;
&lt;div id=&quot;video&quot; style=&quot;width:600px;height:400px;&quot;&gt;&lt;/div&gt;
&lt;script&gt;
    var videoObject = {
        container:&apos;#video&apos;,
        variable:&apos;player&apos;,
        autoplay:true, //强制使用ckplay做播放器
        video:&apos;./video/playlist.m3u8&apos;
    };
    var player=new ckplayer(videoObject);
&lt;script&gt;</code></pre><p>视频会带ckplay的水印，但是不影响。</p>
]]></content>
  </entry>
  <entry>
    <title>用了react-router刷新404 nginx配置</title>
    <url>/post/reactRouterNginx/</url>
    <content><![CDATA[<p>react项目用了react-router<br>发现只有首页可以访问，在子页面刷新时not found  </p>
<a id="more"></a>
<p>nginx配置如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">  server_name xxx.xxxxxxx.com;  </span><br><span class="line">  location / &#123;  </span><br><span class="line">    proxy_pass http://11.11.11.11:1111/; (node服务端口)  </span><br><span class="line">    root html;  </span><br><span class="line">    index index.html index.htm;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是因为他会根据url去找相应路径下的html<br>但是react只有一个index.html入口<br>需要改成静态路径并且加一行 <code>try_files $uri /index.html;</code><br>无论uri是否变化<br>都返回index.html  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">  server_name xxx.xxxxxx.com;  </span><br><span class="line">  location / &#123;  </span><br><span class="line">    root /xxx/xxx/xxx/www/build;  </span><br><span class="line">    try_files $uri /index.html;  </span><br><span class="line">  &#125;  </span><br><span class="line">  location ^~ /api/ &#123;  </span><br><span class="line">    proxy_pass http://11.11.11.11:1111/;(服务端接口做代理)  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>flutter for web</title>
    <url>/post/flutterForWeb/</url>
    <content><![CDATA[<p>谷歌开发者大会上宣布flutter1.9正式发布，并且flutter_web已经合到dev合master。<br>我们来体验一下。  </p>
<a id="more"></a>
<p>首先切换到master并升级flutter到最新版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter channel master</span><br><span class="line">flutter upgrade</span><br></pre></td></tr></table></figure>

<p>安装<code>webdev</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter pub global activate webdev</span><br></pre></td></tr></table></figure>

<p>这里需要注意一下，安装之后看提示还要添加环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Installed executable webdev.</span><br><span class="line">Warning: Pub installs executables into $HOME/.pub-cache/bin, which is not on your path.</span><br><span class="line">You can fix that by adding this to your shell&apos;s config file (.bashrc, .bash_profile, etc.):</span><br><span class="line"></span><br><span class="line">  export PATH=&quot;$PATH&quot;:&quot;$HOME/.pub-cache/bin&quot;</span><br><span class="line"></span><br><span class="line">Activated webdev 2.5.1.</span><br></pre></td></tr></table></figure>

<p>打开<code>~ &gt; .bash_profile</code>把<code>export PATH=&quot;$PATH&quot;:&quot;$HOME/.pub-cache/bin&quot;</code>添加进去，然后更新环境变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>到这<code>webdev</code>就完事了，命令行敲<code>webdev</code>测试一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webdev</span><br><span class="line">/Users/xxx/.pub-cache/bin/webdev: line 7: dart: command not found</span><br></pre></td></tr></table></figure>

<p>惊不惊喜，意不意外，这是因为<code>dart</code>没有添加环境变量。<br>在<code>.bash_profile</code>中添加dart环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export DART_HOME=/Users/xxx/sdk/flutter/bin/cache/dart-sdk/bin</span><br><span class="line">export PATH=$&#123;DART_HOME&#125;:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure>

<p>刷新环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>重新试一下<code>webdev</code>如果显示如下，说明没有问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A tool to develop Dart web projects.</span><br><span class="line"></span><br><span class="line">Usage: webdev &lt;command&gt; [arguments]</span><br><span class="line"></span><br><span class="line">Global options:</span><br><span class="line">-h, --help       Print this usage information.</span><br><span class="line">    --version    Prints the version of webdev.</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">  build   Run builders to build a package.</span><br><span class="line">  help    Display help information for webdev.</span><br><span class="line">  serve   Run a local web development server and a file system watcher that rebuilds on changes.</span><br><span class="line"></span><br><span class="line">Run &quot;webdev help &lt;command&gt;&quot; for more information about a command.</span><br></pre></td></tr></table></figure>

<p>这里需要注意一下，如果没有用<code>flutter</code>自带的<code>dart-sdk</code>而是单独安装，这里可能会因为dart版本与flutter版本不匹配而出现如下提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Can&apos;t load Kernel binary: Invalid kernel binary format version.</span><br><span class="line">No active package webdev.</span><br></pre></td></tr></table></figure>

<p>出现这种情况把dart卸载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew uninstall dart</span><br></pre></td></tr></table></figure>

<p>然后如前边所述将flutter内置的dart-sdk添加到环境变量就可以了。<br>启用<code>flutter_web</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter config --enable-web</span><br></pre></td></tr></table></figure>

<p>出现如下提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Setting &quot;enable-web&quot; value to &quot;true&quot;.</span><br></pre></td></tr></table></figure>

<p>接下来创建一个flutter项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter create myapp</span><br><span class="line">cd myapp</span><br></pre></td></tr></table></figure>

<p>可以看见目录下多了一个<code>web</code>文件夹里边是一个<code>index.html</code>，内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;myapp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script src=&quot;main.dart.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>从这里可以看见，最终也是编译成js文件。<br>先看一下已连接的设备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  myapp flutter devices</span><br><span class="line">3 connected devices:</span><br><span class="line"></span><br><span class="line">macOS  • macOS  • darwin-x64     • Mac OS X 10.14.5 18F132</span><br><span class="line">Chrome • chrome • web-javascript • Google Chrome 76.0.3809.132</span><br><span class="line">Server • web    • web-javascript • Flutter Tools</span><br></pre></td></tr></table></figure>

<p>这里合之前相比多了<code>Chrome</code>和<code>Server</code></p>
<p>在chrome里跑一下项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flutter run -d chrome</span><br></pre></td></tr></table></figure>

<p>效果如下，一个熟悉的页面。<br><img src="1.png" alt="image.png"><br>可以看见大多数都是自定义标签，当然也不全是自定义，比如中间那一行文本和数字就是<code>p</code>标签，关于渲染<code>flutter</code>用了<a href="https://developers.google.com/web/updates/2018/01/paintapi" target="_blank" rel="noopener">CSS Paint</a>（能不能打开看缘分），就是用css画图，挺有意思的api。<br>点<code>sources</code>，然后<code>command+o</code><br><img src="2.png" alt="image.png"><br>可以看见这里并不是js文件，而是dart文件。<br>选择<code>main.dart</code>，看到的就是<code>main.dart</code>的源码。<br>接下来说一下调试，直接用chrome的开发者工具查找DOM是比较困难的，这个时候需要<code>android Studio</code>，在<code>android Studio</code>中打开<code>myapp</code>，设备选择<code>chrome(web)</code>，点绿色的三角跑起来<br><img src="3.png" alt="image.png"><br>在<code>View &gt; Tool Windows</code>下选择<code>Flutter Inspector</code><br><img src="4.png" alt="image.png"><br>打开之后是这个样子<br><img src="5.png" alt="image.png"><br>可以看到不知道多少个层级<br><img src="6.png" alt="image.png"><br>这个按钮可以在页面上显示<code>widget</code>的边界<br><img src="7.png" alt="image.png"><br>这个准星一样的按钮相当于浏览器的审查元素，点击之后页面左下角会出现一个放大镜，想要重新在页面上选择元素需要点击放大镜，也可以在<code>Inspector</code>之中直接选择，页面上对应的元素会高亮。<br>这里再说一下另一种方式，chrome内置了<code>Dart DevTools</code><br>项目跑起来之后点下边这个按钮<br><img src="8.png" alt="image.png"><br>chrome会弹出个新窗口<br><img src="9.png" alt="image.png"><br>和<code>Flutter Insector</code>类似，但是更好用一点。</p>
<p>关于<code>dart</code>文件的调试，和js一样可以打断点<br><img src="10.png" alt="image.png"></p>
<p>接下来是打包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  myapp flutter build web</span><br><span class="line">Compiling lib/main.dart for the Web...                             26.4s</span><br></pre></td></tr></table></figure>

<p>build结束后看一下<code>build &gt; web</code>目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  web ls</span><br><span class="line">assets           index.html       main.dart.js     main.dart.js.map</span><br></pre></td></tr></table></figure>

<p><code>dart</code>被编译成了js</p>
]]></content>
  </entry>
</search>
